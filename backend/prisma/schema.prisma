// This is the enhanced Prisma schema for Kids Activity Tracker v2
// with user accounts, children profiles, and activity sharing

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= EXISTING MODELS (ENHANCED) =============

model Provider {
  id             String     @id @default(uuid())
  name           String     @unique
  website        String
  scraperConfig  Json
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  activities     Activity[]
  scrapeJobs     ScrapeJob[]
}

model Location {
  id             String     @id @default(uuid())
  name           String
  address        String     @default("")
  city           String
  province       String
  postalCode     String?
  country        String     @default("Canada")
  latitude       Float?
  longitude      Float?
  facility       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  activities     Activity[]
  
  @@unique([name, address])
  @@index([city])
  @@index([name])
}

model Activity {
  id                String      @id @default(uuid())
  providerId        String
  externalId        String      // This is the courseId from the provider
  name              String
  category          String
  subcategory       String?
  description       String?
  schedule          String?
  dateStart         DateTime?
  dateEnd           DateTime?
  registrationDate  DateTime?
  ageMin            Int?
  ageMax            Int?
  cost              Float       @default(0)
  spotsAvailable    Int?
  totalSpots        Int?
  locationId        String?
  locationName      String?
  registrationUrl   String?
  courseId          String?     // Provider's course ID
  isActive          Boolean     @default(true)
  lastSeenAt        DateTime    @default(now())
  rawData           Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  dayOfWeek         String[]
  
  // Enhanced detail fields
  registrationStatus        String?     @default("Unknown")
  registrationButtonText    String?
  detailUrl                 String?
  fullDescription           String?
  instructor                String?
  prerequisites             String?
  whatToBring               String?
  fullAddress               String?
  latitude                  Float?
  longitude                 Float?
  directRegistrationUrl     String?
  contactInfo               String?
  
  // Support for multiple sessions and prerequisites
  hasMultipleSessions       Boolean     @default(false)
  sessionCount              Int         @default(0)
  hasPrerequisites          Boolean     @default(false)
  
  provider          Provider    @relation(fields: [providerId], references: [id])
  location          Location?   @relation(fields: [locationId], references: [id])
  favorites         Favorite[]
  childActivities   ChildActivity[]
  sessions          ActivitySession[]
  prerequisitesList ActivityPrerequisite[]
  
  // Unique constraint on provider + courseId to prevent duplicates
  @@unique([providerId, externalId])
  @@index([providerId])
  @@index([locationId])
  @@index([category])
  @@index([isActive, category])
  @@index([isActive, dateStart])
  @@index([isActive, lastSeenAt])
  @@index([registrationStatus])
  @@index([latitude, longitude])
}

model ActivitySession {
  id              String      @id @default(uuid())
  activityId      String
  sessionNumber   Int?
  date            String?     // Date as string to handle various formats
  startTime       String?     // Time as string (e.g., "9:00 AM")
  endTime         String?     // Time as string (e.g., "4:00 PM")
  location        String?
  instructor      String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  activity        Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@index([activityId])
  @@index([date])
}

model ActivityPrerequisite {
  id              String      @id @default(uuid())
  activityId      String
  name            String
  description     String?
  url             String?     // URL to the prerequisite course
  courseId        String?     // Course ID of the prerequisite
  isRequired      Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  activity        Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@index([activityId])
}

// ============= NEW MODELS FOR USER ACCOUNTS =============

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  passwordHash      String
  name              String
  phoneNumber       String?
  isVerified        Boolean     @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  preferences       Json        @default("{}")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  children          Child[]
  favorites         Favorite[]
  sharedWithMe      ActivityShare[] @relation("SharedWithUser")
  myShares          ActivityShare[] @relation("SharingUser")
  sentInvitations   Invitation[]   @relation("InvitationSender")
  receivedInvitations Invitation[] @relation("InvitationRecipient")
  
  @@index([email])
}

model Child {
  id                String      @id @default(uuid())
  userId            String
  name              String
  dateOfBirth       DateTime
  gender            String?     // 'male', 'female', 'other', 'prefer_not_to_say'
  avatarUrl         String?
  interests         String[]    // Array of interests/tags
  notes             String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities        ChildActivity[]
  sharedInProfiles  ActivityShareProfile[]
  
  @@index([userId])
}

model ChildActivity {
  id                String      @id @default(uuid())
  childId           String
  activityId        String
  status            String      // 'interested', 'registered', 'completed', 'cancelled'
  registeredAt      DateTime?
  completedAt       DateTime?
  notes             String?
  rating            Int?        // 1-5 star rating
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  child             Child       @relation(fields: [childId], references: [id], onDelete: Cascade)
  activity          Activity    @relation(fields: [activityId], references: [id])
  
  @@unique([childId, activityId])
  @@index([childId, status])
  @@index([activityId])
}

model Favorite {
  id                String      @id @default(uuid())
  userId            String
  activityId        String
  notifyOnChange    Boolean     @default(true)
  createdAt         DateTime    @default(now())
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity          Activity    @relation(fields: [activityId], references: [id])
  
  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

// ============= ACTIVITY SHARING MODELS =============

model ActivityShare {
  id                String      @id @default(uuid())
  sharingUserId     String
  sharedWithUserId  String
  permissionLevel   String      // 'view_all', 'view_registered', 'view_future'
  expiresAt         DateTime?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  sharingUser       User        @relation("SharingUser", fields: [sharingUserId], references: [id], onDelete: Cascade)
  sharedWithUser    User        @relation("SharedWithUser", fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  profiles          ActivityShareProfile[]
  
  @@unique([sharingUserId, sharedWithUserId])
  @@index([sharingUserId])
  @@index([sharedWithUserId])
}

model ActivityShareProfile {
  id                String      @id @default(uuid())
  activityShareId   String
  childId           String
  canViewInterested Boolean     @default(true)
  canViewRegistered Boolean     @default(true)
  canViewCompleted  Boolean     @default(false)
  canViewNotes      Boolean     @default(false)
  createdAt         DateTime    @default(now())
  
  activityShare     ActivityShare @relation(fields: [activityShareId], references: [id], onDelete: Cascade)
  child             Child      @relation(fields: [childId], references: [id], onDelete: Cascade)
  
  @@unique([activityShareId, childId])
}

model Invitation {
  id                String      @id @default(uuid())
  senderId          String
  recipientEmail    String
  recipientUserId   String?
  status            String      // 'pending', 'accepted', 'declined', 'expired'
  message           String?
  token             String      @unique
  expiresAt         DateTime
  acceptedAt        DateTime?
  createdAt         DateTime    @default(now())
  
  sender            User        @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient         User?       @relation("InvitationRecipient", fields: [recipientUserId], references: [id], onDelete: Cascade)
  
  @@index([senderId])
  @@index([recipientEmail])
  @@index([token])
  @@index([status, expiresAt])
}

// ============= AUDIT/HISTORY MODELS =============

model ActivityHistory {
  id                String      @id @default(uuid())
  activityId        String
  changeType        String      // 'created', 'updated', 'deactivated', 'reactivated'
  previousData      Json?
  newData           Json?
  changedFields     String[]
  createdAt         DateTime    @default(now())
  
  @@index([activityId, createdAt])
}

model ScraperRun {
  id                String      @id @default(uuid())
  providerId        String
  status            String      // 'running', 'completed', 'failed'
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  activitiesFound   Int         @default(0)
  activitiesCreated Int         @default(0)
  activitiesUpdated Int         @default(0)
  activitiesDeactivated Int     @default(0)
  activitiesPurged  Int         @default(0)
  errorMessage      String?
  logs              Json?
  
  @@index([providerId, startedAt])
}

// ============= SCRAPER JOB TRACKING =============

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model ScrapeJob {
  id                String      @id @default(uuid())
  providerId        String
  status            JobStatus   @default(PENDING)
  startedAt         DateTime?
  completedAt       DateTime?
  activitiesFound   Int         @default(0)
  activitiesCreated Int         @default(0)
  activitiesUpdated Int         @default(0)
  activitiesRemoved Int         @default(0)
  errorMessage      String?
  errorDetails      Json?
  createdAt         DateTime    @default(now())
  
  provider          Provider    @relation(fields: [providerId], references: [id])
  
  @@index([providerId])
  @@index([status])
  @@index([createdAt])
}