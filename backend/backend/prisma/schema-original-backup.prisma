generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id            String      @id @default(uuid())
  name          String      @unique
  website       String
  scraperConfig Json?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  activities    Activity[]
  scrapeJobs    ScrapeJob[]

  @@index([name])
}

model Location {
  id         String     @id @default(uuid())
  name       String
  address    String?
  city       String?
  province   String?
  postalCode String?
  latitude   Float?
  longitude  Float?
  facility   String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]

  @@unique([name, address])
  @@index([name])
  @@index([city])
}

model Activity {
  id               String            @id @default(uuid())
  providerId       String
  externalId       String
  name             String
  category         String
  subcategory      String?
  description      String?
  schedule         String?
  dateStart        DateTime?
  dateEnd          DateTime?
  registrationDate DateTime?
  ageMin           Int               @default(0)
  ageMax           Int               @default(18)
  cost             Float             @default(0)
  spotsAvailable   Int               @default(0)
  totalSpots       Int?
  locationId       String?
  locationName     String?
  registrationUrl  String?
  courseId         String?
  isActive         Boolean           @default(true)
  lastSeenAt       DateTime          @default(now())
  rawData          Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  location         Location?         @relation(fields: [locationId], references: [id])
  provider         Provider          @relation(fields: [providerId], references: [id])
  history          ActivityHistory[]
  favorites        Favorite[]

  @@unique([providerId, externalId])
  @@index([providerId])
  @@index([category])
  @@index([locationId])
  @@index([dateStart])
  @@index([ageMin, ageMax])
  @@index([cost])
  @@index([isActive, lastSeenAt])
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String?
  preferences Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[]

  @@index([email])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  activityId String
  notes      String?
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model ActivityHistory {
  id         String   @id @default(uuid())
  activityId String
  fieldName  String
  oldValue   String?
  newValue   String?
  changedAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([changedAt])
}

model ScrapeJob {
  id                String    @id @default(uuid())
  providerId        String
  status            JobStatus @default(PENDING)
  startedAt         DateTime?
  completedAt       DateTime?
  activitiesFound   Int       @default(0)
  activitiesCreated Int       @default(0)
  activitiesUpdated Int       @default(0)
  activitiesRemoved Int       @default(0)
  errorMessage      String?
  errorDetails      Json?
  createdAt         DateTime  @default(now())
  provider          Provider  @relation(fields: [providerId], references: [id])

  @@index([providerId])
  @@index([status])
  @@index([createdAt])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
