
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model ActivityHistory
 * 
 */
export type ActivityHistory = $Result.DefaultSelection<Prisma.$ActivityHistoryPayload>
/**
 * Model ActivityPrerequisite
 * 
 */
export type ActivityPrerequisite = $Result.DefaultSelection<Prisma.$ActivityPrerequisitePayload>
/**
 * Model ActivitySession
 * 
 */
export type ActivitySession = $Result.DefaultSelection<Prisma.$ActivitySessionPayload>
/**
 * Model ActivityShare
 * 
 */
export type ActivityShare = $Result.DefaultSelection<Prisma.$ActivitySharePayload>
/**
 * Model ActivityShareProfile
 * 
 */
export type ActivityShareProfile = $Result.DefaultSelection<Prisma.$ActivityShareProfilePayload>
/**
 * Model ActivitySubtype
 * 
 */
export type ActivitySubtype = $Result.DefaultSelection<Prisma.$ActivitySubtypePayload>
/**
 * Model ActivityType
 * 
 */
export type ActivityType = $Result.DefaultSelection<Prisma.$ActivityTypePayload>
/**
 * Model Child
 * 
 */
export type Child = $Result.DefaultSelection<Prisma.$ChildPayload>
/**
 * Model ChildActivity
 * 
 */
export type ChildActivity = $Result.DefaultSelection<Prisma.$ChildActivityPayload>
/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model Invitation
 * 
 */
export type Invitation = $Result.DefaultSelection<Prisma.$InvitationPayload>
/**
 * Model City
 * 
 */
export type City = $Result.DefaultSelection<Prisma.$CityPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Provider
 * 
 */
export type Provider = $Result.DefaultSelection<Prisma.$ProviderPayload>
/**
 * Model ProviderMetrics
 * 
 */
export type ProviderMetrics = $Result.DefaultSelection<Prisma.$ProviderMetricsPayload>
/**
 * Model ScrapeJob
 * 
 */
export type ScrapeJob = $Result.DefaultSelection<Prisma.$ScrapeJobPayload>
/**
 * Model ScraperHealthCheck
 * 
 */
export type ScraperHealthCheck = $Result.DefaultSelection<Prisma.$ScraperHealthCheckPayload>
/**
 * Model ScraperRun
 * 
 */
export type ScraperRun = $Result.DefaultSelection<Prisma.$ScraperRunPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model ActivityCategory
 * 
 */
export type ActivityCategory = $Result.DefaultSelection<Prisma.$ActivityCategoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const JobStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]

}

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Activities
 * const activities = await prisma.activity.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Activities
   * const activities = await prisma.activity.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityHistory`: Exposes CRUD operations for the **ActivityHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityHistories
    * const activityHistories = await prisma.activityHistory.findMany()
    * ```
    */
  get activityHistory(): Prisma.ActivityHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityPrerequisite`: Exposes CRUD operations for the **ActivityPrerequisite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityPrerequisites
    * const activityPrerequisites = await prisma.activityPrerequisite.findMany()
    * ```
    */
  get activityPrerequisite(): Prisma.ActivityPrerequisiteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activitySession`: Exposes CRUD operations for the **ActivitySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivitySessions
    * const activitySessions = await prisma.activitySession.findMany()
    * ```
    */
  get activitySession(): Prisma.ActivitySessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityShare`: Exposes CRUD operations for the **ActivityShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityShares
    * const activityShares = await prisma.activityShare.findMany()
    * ```
    */
  get activityShare(): Prisma.ActivityShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityShareProfile`: Exposes CRUD operations for the **ActivityShareProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityShareProfiles
    * const activityShareProfiles = await prisma.activityShareProfile.findMany()
    * ```
    */
  get activityShareProfile(): Prisma.ActivityShareProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activitySubtype`: Exposes CRUD operations for the **ActivitySubtype** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivitySubtypes
    * const activitySubtypes = await prisma.activitySubtype.findMany()
    * ```
    */
  get activitySubtype(): Prisma.ActivitySubtypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityType`: Exposes CRUD operations for the **ActivityType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityTypes
    * const activityTypes = await prisma.activityType.findMany()
    * ```
    */
  get activityType(): Prisma.ActivityTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.child`: Exposes CRUD operations for the **Child** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Children
    * const children = await prisma.child.findMany()
    * ```
    */
  get child(): Prisma.ChildDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.childActivity`: Exposes CRUD operations for the **ChildActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChildActivities
    * const childActivities = await prisma.childActivity.findMany()
    * ```
    */
  get childActivity(): Prisma.ChildActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invitation`: Exposes CRUD operations for the **Invitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invitations
    * const invitations = await prisma.invitation.findMany()
    * ```
    */
  get invitation(): Prisma.InvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.provider`: Exposes CRUD operations for the **Provider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Providers
    * const providers = await prisma.provider.findMany()
    * ```
    */
  get provider(): Prisma.ProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.providerMetrics`: Exposes CRUD operations for the **ProviderMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProviderMetrics
    * const providerMetrics = await prisma.providerMetrics.findMany()
    * ```
    */
  get providerMetrics(): Prisma.ProviderMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scrapeJob`: Exposes CRUD operations for the **ScrapeJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScrapeJobs
    * const scrapeJobs = await prisma.scrapeJob.findMany()
    * ```
    */
  get scrapeJob(): Prisma.ScrapeJobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scraperHealthCheck`: Exposes CRUD operations for the **ScraperHealthCheck** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScraperHealthChecks
    * const scraperHealthChecks = await prisma.scraperHealthCheck.findMany()
    * ```
    */
  get scraperHealthCheck(): Prisma.ScraperHealthCheckDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scraperRun`: Exposes CRUD operations for the **ScraperRun** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScraperRuns
    * const scraperRuns = await prisma.scraperRun.findMany()
    * ```
    */
  get scraperRun(): Prisma.ScraperRunDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityCategory`: Exposes CRUD operations for the **ActivityCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityCategories
    * const activityCategories = await prisma.activityCategory.findMany()
    * ```
    */
  get activityCategory(): Prisma.ActivityCategoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Activity: 'Activity',
    ActivityHistory: 'ActivityHistory',
    ActivityPrerequisite: 'ActivityPrerequisite',
    ActivitySession: 'ActivitySession',
    ActivityShare: 'ActivityShare',
    ActivityShareProfile: 'ActivityShareProfile',
    ActivitySubtype: 'ActivitySubtype',
    ActivityType: 'ActivityType',
    Child: 'Child',
    ChildActivity: 'ChildActivity',
    Favorite: 'Favorite',
    Invitation: 'Invitation',
    City: 'City',
    Location: 'Location',
    Provider: 'Provider',
    ProviderMetrics: 'ProviderMetrics',
    ScrapeJob: 'ScrapeJob',
    ScraperHealthCheck: 'ScraperHealthCheck',
    ScraperRun: 'ScraperRun',
    User: 'User',
    Category: 'Category',
    ActivityCategory: 'ActivityCategory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "activity" | "activityHistory" | "activityPrerequisite" | "activitySession" | "activityShare" | "activityShareProfile" | "activitySubtype" | "activityType" | "child" | "childActivity" | "favorite" | "invitation" | "city" | "location" | "provider" | "providerMetrics" | "scrapeJob" | "scraperHealthCheck" | "scraperRun" | "user" | "category" | "activityCategory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      ActivityHistory: {
        payload: Prisma.$ActivityHistoryPayload<ExtArgs>
        fields: Prisma.ActivityHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          findFirst: {
            args: Prisma.ActivityHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          findMany: {
            args: Prisma.ActivityHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>[]
          }
          create: {
            args: Prisma.ActivityHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          createMany: {
            args: Prisma.ActivityHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>[]
          }
          delete: {
            args: Prisma.ActivityHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          update: {
            args: Prisma.ActivityHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ActivityHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ActivityHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityHistoryPayload>
          }
          aggregate: {
            args: Prisma.ActivityHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityHistory>
          }
          groupBy: {
            args: Prisma.ActivityHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityHistoryCountAggregateOutputType> | number
          }
        }
      }
      ActivityPrerequisite: {
        payload: Prisma.$ActivityPrerequisitePayload<ExtArgs>
        fields: Prisma.ActivityPrerequisiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityPrerequisiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityPrerequisiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          findFirst: {
            args: Prisma.ActivityPrerequisiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityPrerequisiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          findMany: {
            args: Prisma.ActivityPrerequisiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>[]
          }
          create: {
            args: Prisma.ActivityPrerequisiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          createMany: {
            args: Prisma.ActivityPrerequisiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityPrerequisiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>[]
          }
          delete: {
            args: Prisma.ActivityPrerequisiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          update: {
            args: Prisma.ActivityPrerequisiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          deleteMany: {
            args: Prisma.ActivityPrerequisiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityPrerequisiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityPrerequisiteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>[]
          }
          upsert: {
            args: Prisma.ActivityPrerequisiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPrerequisitePayload>
          }
          aggregate: {
            args: Prisma.ActivityPrerequisiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityPrerequisite>
          }
          groupBy: {
            args: Prisma.ActivityPrerequisiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityPrerequisiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityPrerequisiteCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityPrerequisiteCountAggregateOutputType> | number
          }
        }
      }
      ActivitySession: {
        payload: Prisma.$ActivitySessionPayload<ExtArgs>
        fields: Prisma.ActivitySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivitySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivitySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          findFirst: {
            args: Prisma.ActivitySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivitySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          findMany: {
            args: Prisma.ActivitySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>[]
          }
          create: {
            args: Prisma.ActivitySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          createMany: {
            args: Prisma.ActivitySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivitySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>[]
          }
          delete: {
            args: Prisma.ActivitySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          update: {
            args: Prisma.ActivitySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          deleteMany: {
            args: Prisma.ActivitySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivitySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivitySessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>[]
          }
          upsert: {
            args: Prisma.ActivitySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySessionPayload>
          }
          aggregate: {
            args: Prisma.ActivitySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivitySession>
          }
          groupBy: {
            args: Prisma.ActivitySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivitySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivitySessionCountArgs<ExtArgs>
            result: $Utils.Optional<ActivitySessionCountAggregateOutputType> | number
          }
        }
      }
      ActivityShare: {
        payload: Prisma.$ActivitySharePayload<ExtArgs>
        fields: Prisma.ActivityShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          findFirst: {
            args: Prisma.ActivityShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          findMany: {
            args: Prisma.ActivityShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>[]
          }
          create: {
            args: Prisma.ActivityShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          createMany: {
            args: Prisma.ActivityShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>[]
          }
          delete: {
            args: Prisma.ActivityShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          update: {
            args: Prisma.ActivityShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          deleteMany: {
            args: Prisma.ActivityShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>[]
          }
          upsert: {
            args: Prisma.ActivityShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySharePayload>
          }
          aggregate: {
            args: Prisma.ActivityShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityShare>
          }
          groupBy: {
            args: Prisma.ActivityShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityShareCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityShareCountAggregateOutputType> | number
          }
        }
      }
      ActivityShareProfile: {
        payload: Prisma.$ActivityShareProfilePayload<ExtArgs>
        fields: Prisma.ActivityShareProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityShareProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityShareProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          findFirst: {
            args: Prisma.ActivityShareProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityShareProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          findMany: {
            args: Prisma.ActivityShareProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>[]
          }
          create: {
            args: Prisma.ActivityShareProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          createMany: {
            args: Prisma.ActivityShareProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityShareProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>[]
          }
          delete: {
            args: Prisma.ActivityShareProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          update: {
            args: Prisma.ActivityShareProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          deleteMany: {
            args: Prisma.ActivityShareProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityShareProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityShareProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>[]
          }
          upsert: {
            args: Prisma.ActivityShareProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityShareProfilePayload>
          }
          aggregate: {
            args: Prisma.ActivityShareProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityShareProfile>
          }
          groupBy: {
            args: Prisma.ActivityShareProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityShareProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityShareProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityShareProfileCountAggregateOutputType> | number
          }
        }
      }
      ActivitySubtype: {
        payload: Prisma.$ActivitySubtypePayload<ExtArgs>
        fields: Prisma.ActivitySubtypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivitySubtypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivitySubtypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          findFirst: {
            args: Prisma.ActivitySubtypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivitySubtypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          findMany: {
            args: Prisma.ActivitySubtypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>[]
          }
          create: {
            args: Prisma.ActivitySubtypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          createMany: {
            args: Prisma.ActivitySubtypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivitySubtypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>[]
          }
          delete: {
            args: Prisma.ActivitySubtypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          update: {
            args: Prisma.ActivitySubtypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          deleteMany: {
            args: Prisma.ActivitySubtypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivitySubtypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivitySubtypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>[]
          }
          upsert: {
            args: Prisma.ActivitySubtypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivitySubtypePayload>
          }
          aggregate: {
            args: Prisma.ActivitySubtypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivitySubtype>
          }
          groupBy: {
            args: Prisma.ActivitySubtypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivitySubtypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivitySubtypeCountArgs<ExtArgs>
            result: $Utils.Optional<ActivitySubtypeCountAggregateOutputType> | number
          }
        }
      }
      ActivityType: {
        payload: Prisma.$ActivityTypePayload<ExtArgs>
        fields: Prisma.ActivityTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          findFirst: {
            args: Prisma.ActivityTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          findMany: {
            args: Prisma.ActivityTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>[]
          }
          create: {
            args: Prisma.ActivityTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          createMany: {
            args: Prisma.ActivityTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>[]
          }
          delete: {
            args: Prisma.ActivityTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          update: {
            args: Prisma.ActivityTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          deleteMany: {
            args: Prisma.ActivityTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>[]
          }
          upsert: {
            args: Prisma.ActivityTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityTypePayload>
          }
          aggregate: {
            args: Prisma.ActivityTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityType>
          }
          groupBy: {
            args: Prisma.ActivityTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityTypeCountAggregateOutputType> | number
          }
        }
      }
      Child: {
        payload: Prisma.$ChildPayload<ExtArgs>
        fields: Prisma.ChildFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChildFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChildFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findFirst: {
            args: Prisma.ChildFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChildFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          findMany: {
            args: Prisma.ChildFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          create: {
            args: Prisma.ChildCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          createMany: {
            args: Prisma.ChildCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChildCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          delete: {
            args: Prisma.ChildDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          update: {
            args: Prisma.ChildUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          deleteMany: {
            args: Prisma.ChildDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChildUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChildUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>[]
          }
          upsert: {
            args: Prisma.ChildUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildPayload>
          }
          aggregate: {
            args: Prisma.ChildAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChild>
          }
          groupBy: {
            args: Prisma.ChildGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChildGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChildCountArgs<ExtArgs>
            result: $Utils.Optional<ChildCountAggregateOutputType> | number
          }
        }
      }
      ChildActivity: {
        payload: Prisma.$ChildActivityPayload<ExtArgs>
        fields: Prisma.ChildActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChildActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChildActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          findFirst: {
            args: Prisma.ChildActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChildActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          findMany: {
            args: Prisma.ChildActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>[]
          }
          create: {
            args: Prisma.ChildActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          createMany: {
            args: Prisma.ChildActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChildActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>[]
          }
          delete: {
            args: Prisma.ChildActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          update: {
            args: Prisma.ChildActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          deleteMany: {
            args: Prisma.ChildActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChildActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChildActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>[]
          }
          upsert: {
            args: Prisma.ChildActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChildActivityPayload>
          }
          aggregate: {
            args: Prisma.ChildActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChildActivity>
          }
          groupBy: {
            args: Prisma.ChildActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChildActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChildActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ChildActivityCountAggregateOutputType> | number
          }
        }
      }
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FavoriteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      Invitation: {
        payload: Prisma.$InvitationPayload<ExtArgs>
        fields: Prisma.InvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findFirst: {
            args: Prisma.InvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          findMany: {
            args: Prisma.InvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          create: {
            args: Prisma.InvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          createMany: {
            args: Prisma.InvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          delete: {
            args: Prisma.InvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          update: {
            args: Prisma.InvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          deleteMany: {
            args: Prisma.InvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>[]
          }
          upsert: {
            args: Prisma.InvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitationPayload>
          }
          aggregate: {
            args: Prisma.InvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvitation>
          }
          groupBy: {
            args: Prisma.InvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvitationCountArgs<ExtArgs>
            result: $Utils.Optional<InvitationCountAggregateOutputType> | number
          }
        }
      }
      City: {
        payload: Prisma.$CityPayload<ExtArgs>
        fields: Prisma.CityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findFirst: {
            args: Prisma.CityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findMany: {
            args: Prisma.CityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          create: {
            args: Prisma.CityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          createMany: {
            args: Prisma.CityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          delete: {
            args: Prisma.CityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          update: {
            args: Prisma.CityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          deleteMany: {
            args: Prisma.CityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          upsert: {
            args: Prisma.CityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          aggregate: {
            args: Prisma.CityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCity>
          }
          groupBy: {
            args: Prisma.CityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CityCountArgs<ExtArgs>
            result: $Utils.Optional<CityCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Provider: {
        payload: Prisma.$ProviderPayload<ExtArgs>
        fields: Prisma.ProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findFirst: {
            args: Prisma.ProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          findMany: {
            args: Prisma.ProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          create: {
            args: Prisma.ProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          createMany: {
            args: Prisma.ProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          delete: {
            args: Prisma.ProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          update: {
            args: Prisma.ProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          deleteMany: {
            args: Prisma.ProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>[]
          }
          upsert: {
            args: Prisma.ProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderPayload>
          }
          aggregate: {
            args: Prisma.ProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProvider>
          }
          groupBy: {
            args: Prisma.ProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderCountArgs<ExtArgs>
            result: $Utils.Optional<ProviderCountAggregateOutputType> | number
          }
        }
      }
      ProviderMetrics: {
        payload: Prisma.$ProviderMetricsPayload<ExtArgs>
        fields: Prisma.ProviderMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProviderMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProviderMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          findFirst: {
            args: Prisma.ProviderMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProviderMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          findMany: {
            args: Prisma.ProviderMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>[]
          }
          create: {
            args: Prisma.ProviderMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          createMany: {
            args: Prisma.ProviderMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProviderMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>[]
          }
          delete: {
            args: Prisma.ProviderMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          update: {
            args: Prisma.ProviderMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          deleteMany: {
            args: Prisma.ProviderMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProviderMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProviderMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>[]
          }
          upsert: {
            args: Prisma.ProviderMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProviderMetricsPayload>
          }
          aggregate: {
            args: Prisma.ProviderMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProviderMetrics>
          }
          groupBy: {
            args: Prisma.ProviderMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProviderMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProviderMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<ProviderMetricsCountAggregateOutputType> | number
          }
        }
      }
      ScrapeJob: {
        payload: Prisma.$ScrapeJobPayload<ExtArgs>
        fields: Prisma.ScrapeJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScrapeJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScrapeJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          findFirst: {
            args: Prisma.ScrapeJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScrapeJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          findMany: {
            args: Prisma.ScrapeJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>[]
          }
          create: {
            args: Prisma.ScrapeJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          createMany: {
            args: Prisma.ScrapeJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScrapeJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>[]
          }
          delete: {
            args: Prisma.ScrapeJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          update: {
            args: Prisma.ScrapeJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          deleteMany: {
            args: Prisma.ScrapeJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScrapeJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScrapeJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>[]
          }
          upsert: {
            args: Prisma.ScrapeJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScrapeJobPayload>
          }
          aggregate: {
            args: Prisma.ScrapeJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScrapeJob>
          }
          groupBy: {
            args: Prisma.ScrapeJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScrapeJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScrapeJobCountArgs<ExtArgs>
            result: $Utils.Optional<ScrapeJobCountAggregateOutputType> | number
          }
        }
      }
      ScraperHealthCheck: {
        payload: Prisma.$ScraperHealthCheckPayload<ExtArgs>
        fields: Prisma.ScraperHealthCheckFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScraperHealthCheckFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScraperHealthCheckFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          findFirst: {
            args: Prisma.ScraperHealthCheckFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScraperHealthCheckFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          findMany: {
            args: Prisma.ScraperHealthCheckFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>[]
          }
          create: {
            args: Prisma.ScraperHealthCheckCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          createMany: {
            args: Prisma.ScraperHealthCheckCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScraperHealthCheckCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>[]
          }
          delete: {
            args: Prisma.ScraperHealthCheckDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          update: {
            args: Prisma.ScraperHealthCheckUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          deleteMany: {
            args: Prisma.ScraperHealthCheckDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScraperHealthCheckUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScraperHealthCheckUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>[]
          }
          upsert: {
            args: Prisma.ScraperHealthCheckUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperHealthCheckPayload>
          }
          aggregate: {
            args: Prisma.ScraperHealthCheckAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScraperHealthCheck>
          }
          groupBy: {
            args: Prisma.ScraperHealthCheckGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScraperHealthCheckGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScraperHealthCheckCountArgs<ExtArgs>
            result: $Utils.Optional<ScraperHealthCheckCountAggregateOutputType> | number
          }
        }
      }
      ScraperRun: {
        payload: Prisma.$ScraperRunPayload<ExtArgs>
        fields: Prisma.ScraperRunFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScraperRunFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScraperRunFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          findFirst: {
            args: Prisma.ScraperRunFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScraperRunFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          findMany: {
            args: Prisma.ScraperRunFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>[]
          }
          create: {
            args: Prisma.ScraperRunCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          createMany: {
            args: Prisma.ScraperRunCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScraperRunCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>[]
          }
          delete: {
            args: Prisma.ScraperRunDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          update: {
            args: Prisma.ScraperRunUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          deleteMany: {
            args: Prisma.ScraperRunDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScraperRunUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScraperRunUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>[]
          }
          upsert: {
            args: Prisma.ScraperRunUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScraperRunPayload>
          }
          aggregate: {
            args: Prisma.ScraperRunAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScraperRun>
          }
          groupBy: {
            args: Prisma.ScraperRunGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScraperRunGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScraperRunCountArgs<ExtArgs>
            result: $Utils.Optional<ScraperRunCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      ActivityCategory: {
        payload: Prisma.$ActivityCategoryPayload<ExtArgs>
        fields: Prisma.ActivityCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          findFirst: {
            args: Prisma.ActivityCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          findMany: {
            args: Prisma.ActivityCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>[]
          }
          create: {
            args: Prisma.ActivityCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          createMany: {
            args: Prisma.ActivityCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>[]
          }
          delete: {
            args: Prisma.ActivityCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          update: {
            args: Prisma.ActivityCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ActivityCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ActivityCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityCategoryPayload>
          }
          aggregate: {
            args: Prisma.ActivityCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityCategory>
          }
          groupBy: {
            args: Prisma.ActivityCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    activity?: ActivityOmit
    activityHistory?: ActivityHistoryOmit
    activityPrerequisite?: ActivityPrerequisiteOmit
    activitySession?: ActivitySessionOmit
    activityShare?: ActivityShareOmit
    activityShareProfile?: ActivityShareProfileOmit
    activitySubtype?: ActivitySubtypeOmit
    activityType?: ActivityTypeOmit
    child?: ChildOmit
    childActivity?: ChildActivityOmit
    favorite?: FavoriteOmit
    invitation?: InvitationOmit
    city?: CityOmit
    location?: LocationOmit
    provider?: ProviderOmit
    providerMetrics?: ProviderMetricsOmit
    scrapeJob?: ScrapeJobOmit
    scraperHealthCheck?: ScraperHealthCheckOmit
    scraperRun?: ScraperRunOmit
    user?: UserOmit
    category?: CategoryOmit
    activityCategory?: ActivityCategoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    prerequisitesList: number
    sessions: number
    childActivities: number
    favorites: number
    categories: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prerequisitesList?: boolean | ActivityCountOutputTypeCountPrerequisitesListArgs
    sessions?: boolean | ActivityCountOutputTypeCountSessionsArgs
    childActivities?: boolean | ActivityCountOutputTypeCountChildActivitiesArgs
    favorites?: boolean | ActivityCountOutputTypeCountFavoritesArgs
    categories?: boolean | ActivityCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountPrerequisitesListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityPrerequisiteWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitySessionWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountChildActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildActivityWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCategoryWhereInput
  }


  /**
   * Count Type ActivityShareCountOutputType
   */

  export type ActivityShareCountOutputType = {
    profiles: number
  }

  export type ActivityShareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | ActivityShareCountOutputTypeCountProfilesArgs
  }

  // Custom InputTypes
  /**
   * ActivityShareCountOutputType without action
   */
  export type ActivityShareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareCountOutputType
     */
    select?: ActivityShareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityShareCountOutputType without action
   */
  export type ActivityShareCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareProfileWhereInput
  }


  /**
   * Count Type ActivitySubtypeCountOutputType
   */

  export type ActivitySubtypeCountOutputType = {
    activities: number
  }

  export type ActivitySubtypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ActivitySubtypeCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ActivitySubtypeCountOutputType without action
   */
  export type ActivitySubtypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtypeCountOutputType
     */
    select?: ActivitySubtypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivitySubtypeCountOutputType without action
   */
  export type ActivitySubtypeCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * Count Type ActivityTypeCountOutputType
   */

  export type ActivityTypeCountOutputType = {
    activities: number
    subtypes: number
  }

  export type ActivityTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ActivityTypeCountOutputTypeCountActivitiesArgs
    subtypes?: boolean | ActivityTypeCountOutputTypeCountSubtypesArgs
  }

  // Custom InputTypes
  /**
   * ActivityTypeCountOutputType without action
   */
  export type ActivityTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityTypeCountOutputType
     */
    select?: ActivityTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityTypeCountOutputType without action
   */
  export type ActivityTypeCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * ActivityTypeCountOutputType without action
   */
  export type ActivityTypeCountOutputTypeCountSubtypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitySubtypeWhereInput
  }


  /**
   * Count Type ChildCountOutputType
   */

  export type ChildCountOutputType = {
    profiles: number
    childActivities: number
  }

  export type ChildCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | ChildCountOutputTypeCountProfilesArgs
    childActivities?: boolean | ChildCountOutputTypeCountChildActivitiesArgs
  }

  // Custom InputTypes
  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildCountOutputType
     */
    select?: ChildCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareProfileWhereInput
  }

  /**
   * ChildCountOutputType without action
   */
  export type ChildCountOutputTypeCountChildActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildActivityWhereInput
  }


  /**
   * Count Type CityCountOutputType
   */

  export type CityCountOutputType = {
    locations: number
  }

  export type CityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | CityCountOutputTypeCountLocationsArgs
  }

  // Custom InputTypes
  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    activities: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | LocationCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * Count Type ProviderCountOutputType
   */

  export type ProviderCountOutputType = {
    activities: number
    ProviderMetrics: number
    ScrapeJob: number
    ScraperHealthCheck: number
  }

  export type ProviderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ProviderCountOutputTypeCountActivitiesArgs
    ProviderMetrics?: boolean | ProviderCountOutputTypeCountProviderMetricsArgs
    ScrapeJob?: boolean | ProviderCountOutputTypeCountScrapeJobArgs
    ScraperHealthCheck?: boolean | ProviderCountOutputTypeCountScraperHealthCheckArgs
  }

  // Custom InputTypes
  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderCountOutputType
     */
    select?: ProviderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountProviderMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderMetricsWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountScrapeJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapeJobWhereInput
  }

  /**
   * ProviderCountOutputType without action
   */
  export type ProviderCountOutputTypeCountScraperHealthCheckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScraperHealthCheckWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sharedWithMe: number
    myShares: number
    children: number
    favorites: number
    receivedInvitations: number
    sentInvitations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sharedWithMe?: boolean | UserCountOutputTypeCountSharedWithMeArgs
    myShares?: boolean | UserCountOutputTypeCountMySharesArgs
    children?: boolean | UserCountOutputTypeCountChildrenArgs
    favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    receivedInvitations?: boolean | UserCountOutputTypeCountReceivedInvitationsArgs
    sentInvitations?: boolean | UserCountOutputTypeCountSentInvitationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharedWithMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    activities: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | CategoryCountOutputTypeCountActivitiesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCategoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    ageMin: number | null
    ageMax: number | null
    cost: number | null
    spotsAvailable: number | null
    totalSpots: number | null
    taxAmount: number | null
    sessionCount: number | null
  }

  export type ActivitySumAggregateOutputType = {
    ageMin: number | null
    ageMax: number | null
    cost: number | null
    spotsAvailable: number | null
    totalSpots: number | null
    taxAmount: number | null
    sessionCount: number | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    externalId: string | null
    name: string | null
    category: string | null
    subcategory: string | null
    description: string | null
    schedule: string | null
    dateStart: Date | null
    dateEnd: Date | null
    registrationDate: Date | null
    ageMin: number | null
    ageMax: number | null
    cost: number | null
    spotsAvailable: number | null
    totalSpots: number | null
    locationId: string | null
    registrationUrl: string | null
    courseId: string | null
    isActive: boolean | null
    isUpdated: boolean | null
    lastSeenAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    registrationEndDate: Date | null
    registrationEndTime: string | null
    costIncludesTax: boolean | null
    taxAmount: number | null
    startTime: string | null
    endTime: string | null
    courseDetails: string | null
    dates: string | null
    registrationStatus: string | null
    registrationButtonText: string | null
    detailUrl: string | null
    instructor: string | null
    hasMultipleSessions: boolean | null
    sessionCount: number | null
    hasPrerequisites: boolean | null
    fullDescription: string | null
    whatToBring: string | null
    prerequisites: string | null
    directRegistrationUrl: string | null
    contactInfo: string | null
    activitySubtypeId: string | null
    activityTypeId: string | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    externalId: string | null
    name: string | null
    category: string | null
    subcategory: string | null
    description: string | null
    schedule: string | null
    dateStart: Date | null
    dateEnd: Date | null
    registrationDate: Date | null
    ageMin: number | null
    ageMax: number | null
    cost: number | null
    spotsAvailable: number | null
    totalSpots: number | null
    locationId: string | null
    registrationUrl: string | null
    courseId: string | null
    isActive: boolean | null
    isUpdated: boolean | null
    lastSeenAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    registrationEndDate: Date | null
    registrationEndTime: string | null
    costIncludesTax: boolean | null
    taxAmount: number | null
    startTime: string | null
    endTime: string | null
    courseDetails: string | null
    dates: string | null
    registrationStatus: string | null
    registrationButtonText: string | null
    detailUrl: string | null
    instructor: string | null
    hasMultipleSessions: boolean | null
    sessionCount: number | null
    hasPrerequisites: boolean | null
    fullDescription: string | null
    whatToBring: string | null
    prerequisites: string | null
    directRegistrationUrl: string | null
    contactInfo: string | null
    activitySubtypeId: string | null
    activityTypeId: string | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    providerId: number
    externalId: number
    name: number
    category: number
    subcategory: number
    description: number
    schedule: number
    dateStart: number
    dateEnd: number
    registrationDate: number
    ageMin: number
    ageMax: number
    cost: number
    spotsAvailable: number
    totalSpots: number
    locationId: number
    registrationUrl: number
    courseId: number
    isActive: number
    isUpdated: number
    lastSeenAt: number
    rawData: number
    createdAt: number
    updatedAt: number
    dayOfWeek: number
    registrationEndDate: number
    registrationEndTime: number
    costIncludesTax: number
    taxAmount: number
    startTime: number
    endTime: number
    courseDetails: number
    dates: number
    registrationStatus: number
    registrationButtonText: number
    detailUrl: number
    instructor: number
    hasMultipleSessions: number
    sessionCount: number
    hasPrerequisites: number
    fullDescription: number
    whatToBring: number
    prerequisites: number
    directRegistrationUrl: number
    contactInfo: number
    activitySubtypeId: number
    activityTypeId: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    ageMin?: true
    ageMax?: true
    cost?: true
    spotsAvailable?: true
    totalSpots?: true
    taxAmount?: true
    sessionCount?: true
  }

  export type ActivitySumAggregateInputType = {
    ageMin?: true
    ageMax?: true
    cost?: true
    spotsAvailable?: true
    totalSpots?: true
    taxAmount?: true
    sessionCount?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    providerId?: true
    externalId?: true
    name?: true
    category?: true
    subcategory?: true
    description?: true
    schedule?: true
    dateStart?: true
    dateEnd?: true
    registrationDate?: true
    ageMin?: true
    ageMax?: true
    cost?: true
    spotsAvailable?: true
    totalSpots?: true
    locationId?: true
    registrationUrl?: true
    courseId?: true
    isActive?: true
    isUpdated?: true
    lastSeenAt?: true
    createdAt?: true
    updatedAt?: true
    registrationEndDate?: true
    registrationEndTime?: true
    costIncludesTax?: true
    taxAmount?: true
    startTime?: true
    endTime?: true
    courseDetails?: true
    dates?: true
    registrationStatus?: true
    registrationButtonText?: true
    detailUrl?: true
    instructor?: true
    hasMultipleSessions?: true
    sessionCount?: true
    hasPrerequisites?: true
    fullDescription?: true
    whatToBring?: true
    prerequisites?: true
    directRegistrationUrl?: true
    contactInfo?: true
    activitySubtypeId?: true
    activityTypeId?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    providerId?: true
    externalId?: true
    name?: true
    category?: true
    subcategory?: true
    description?: true
    schedule?: true
    dateStart?: true
    dateEnd?: true
    registrationDate?: true
    ageMin?: true
    ageMax?: true
    cost?: true
    spotsAvailable?: true
    totalSpots?: true
    locationId?: true
    registrationUrl?: true
    courseId?: true
    isActive?: true
    isUpdated?: true
    lastSeenAt?: true
    createdAt?: true
    updatedAt?: true
    registrationEndDate?: true
    registrationEndTime?: true
    costIncludesTax?: true
    taxAmount?: true
    startTime?: true
    endTime?: true
    courseDetails?: true
    dates?: true
    registrationStatus?: true
    registrationButtonText?: true
    detailUrl?: true
    instructor?: true
    hasMultipleSessions?: true
    sessionCount?: true
    hasPrerequisites?: true
    fullDescription?: true
    whatToBring?: true
    prerequisites?: true
    directRegistrationUrl?: true
    contactInfo?: true
    activitySubtypeId?: true
    activityTypeId?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    providerId?: true
    externalId?: true
    name?: true
    category?: true
    subcategory?: true
    description?: true
    schedule?: true
    dateStart?: true
    dateEnd?: true
    registrationDate?: true
    ageMin?: true
    ageMax?: true
    cost?: true
    spotsAvailable?: true
    totalSpots?: true
    locationId?: true
    registrationUrl?: true
    courseId?: true
    isActive?: true
    isUpdated?: true
    lastSeenAt?: true
    rawData?: true
    createdAt?: true
    updatedAt?: true
    dayOfWeek?: true
    registrationEndDate?: true
    registrationEndTime?: true
    costIncludesTax?: true
    taxAmount?: true
    startTime?: true
    endTime?: true
    courseDetails?: true
    dates?: true
    registrationStatus?: true
    registrationButtonText?: true
    detailUrl?: true
    instructor?: true
    hasMultipleSessions?: true
    sessionCount?: true
    hasPrerequisites?: true
    fullDescription?: true
    whatToBring?: true
    prerequisites?: true
    directRegistrationUrl?: true
    contactInfo?: true
    activitySubtypeId?: true
    activityTypeId?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory: string | null
    description: string | null
    schedule: string | null
    dateStart: Date | null
    dateEnd: Date | null
    registrationDate: Date | null
    ageMin: number | null
    ageMax: number | null
    cost: number
    spotsAvailable: number | null
    totalSpots: number | null
    locationId: string | null
    registrationUrl: string | null
    courseId: string | null
    isActive: boolean
    isUpdated: boolean
    lastSeenAt: Date
    rawData: JsonValue | null
    createdAt: Date
    updatedAt: Date
    dayOfWeek: string[]
    registrationEndDate: Date | null
    registrationEndTime: string | null
    costIncludesTax: boolean
    taxAmount: number | null
    startTime: string | null
    endTime: string | null
    courseDetails: string | null
    dates: string | null
    registrationStatus: string | null
    registrationButtonText: string | null
    detailUrl: string | null
    instructor: string | null
    hasMultipleSessions: boolean
    sessionCount: number
    hasPrerequisites: boolean
    fullDescription: string | null
    whatToBring: string | null
    prerequisites: string | null
    directRegistrationUrl: string | null
    contactInfo: string | null
    activitySubtypeId: string | null
    activityTypeId: string | null
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    externalId?: boolean
    name?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    schedule?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    registrationDate?: boolean
    ageMin?: boolean
    ageMax?: boolean
    cost?: boolean
    spotsAvailable?: boolean
    totalSpots?: boolean
    locationId?: boolean
    registrationUrl?: boolean
    courseId?: boolean
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: boolean
    rawData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dayOfWeek?: boolean
    registrationEndDate?: boolean
    registrationEndTime?: boolean
    costIncludesTax?: boolean
    taxAmount?: boolean
    startTime?: boolean
    endTime?: boolean
    courseDetails?: boolean
    dates?: boolean
    registrationStatus?: boolean
    registrationButtonText?: boolean
    detailUrl?: boolean
    instructor?: boolean
    hasMultipleSessions?: boolean
    sessionCount?: boolean
    hasPrerequisites?: boolean
    fullDescription?: boolean
    whatToBring?: boolean
    prerequisites?: boolean
    directRegistrationUrl?: boolean
    contactInfo?: boolean
    activitySubtypeId?: boolean
    activityTypeId?: boolean
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    prerequisitesList?: boolean | Activity$prerequisitesListArgs<ExtArgs>
    sessions?: boolean | Activity$sessionsArgs<ExtArgs>
    childActivities?: boolean | Activity$childActivitiesArgs<ExtArgs>
    favorites?: boolean | Activity$favoritesArgs<ExtArgs>
    categories?: boolean | Activity$categoriesArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    externalId?: boolean
    name?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    schedule?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    registrationDate?: boolean
    ageMin?: boolean
    ageMax?: boolean
    cost?: boolean
    spotsAvailable?: boolean
    totalSpots?: boolean
    locationId?: boolean
    registrationUrl?: boolean
    courseId?: boolean
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: boolean
    rawData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dayOfWeek?: boolean
    registrationEndDate?: boolean
    registrationEndTime?: boolean
    costIncludesTax?: boolean
    taxAmount?: boolean
    startTime?: boolean
    endTime?: boolean
    courseDetails?: boolean
    dates?: boolean
    registrationStatus?: boolean
    registrationButtonText?: boolean
    detailUrl?: boolean
    instructor?: boolean
    hasMultipleSessions?: boolean
    sessionCount?: boolean
    hasPrerequisites?: boolean
    fullDescription?: boolean
    whatToBring?: boolean
    prerequisites?: boolean
    directRegistrationUrl?: boolean
    contactInfo?: boolean
    activitySubtypeId?: boolean
    activityTypeId?: boolean
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    externalId?: boolean
    name?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    schedule?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    registrationDate?: boolean
    ageMin?: boolean
    ageMax?: boolean
    cost?: boolean
    spotsAvailable?: boolean
    totalSpots?: boolean
    locationId?: boolean
    registrationUrl?: boolean
    courseId?: boolean
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: boolean
    rawData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dayOfWeek?: boolean
    registrationEndDate?: boolean
    registrationEndTime?: boolean
    costIncludesTax?: boolean
    taxAmount?: boolean
    startTime?: boolean
    endTime?: boolean
    courseDetails?: boolean
    dates?: boolean
    registrationStatus?: boolean
    registrationButtonText?: boolean
    detailUrl?: boolean
    instructor?: boolean
    hasMultipleSessions?: boolean
    sessionCount?: boolean
    hasPrerequisites?: boolean
    fullDescription?: boolean
    whatToBring?: boolean
    prerequisites?: boolean
    directRegistrationUrl?: boolean
    contactInfo?: boolean
    activitySubtypeId?: boolean
    activityTypeId?: boolean
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    providerId?: boolean
    externalId?: boolean
    name?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    schedule?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    registrationDate?: boolean
    ageMin?: boolean
    ageMax?: boolean
    cost?: boolean
    spotsAvailable?: boolean
    totalSpots?: boolean
    locationId?: boolean
    registrationUrl?: boolean
    courseId?: boolean
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: boolean
    rawData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dayOfWeek?: boolean
    registrationEndDate?: boolean
    registrationEndTime?: boolean
    costIncludesTax?: boolean
    taxAmount?: boolean
    startTime?: boolean
    endTime?: boolean
    courseDetails?: boolean
    dates?: boolean
    registrationStatus?: boolean
    registrationButtonText?: boolean
    detailUrl?: boolean
    instructor?: boolean
    hasMultipleSessions?: boolean
    sessionCount?: boolean
    hasPrerequisites?: boolean
    fullDescription?: boolean
    whatToBring?: boolean
    prerequisites?: boolean
    directRegistrationUrl?: boolean
    contactInfo?: boolean
    activitySubtypeId?: boolean
    activityTypeId?: boolean
  }

  export type ActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "externalId" | "name" | "category" | "subcategory" | "description" | "schedule" | "dateStart" | "dateEnd" | "registrationDate" | "ageMin" | "ageMax" | "cost" | "spotsAvailable" | "totalSpots" | "locationId" | "registrationUrl" | "courseId" | "isActive" | "isUpdated" | "lastSeenAt" | "rawData" | "createdAt" | "updatedAt" | "dayOfWeek" | "registrationEndDate" | "registrationEndTime" | "costIncludesTax" | "taxAmount" | "startTime" | "endTime" | "courseDetails" | "dates" | "registrationStatus" | "registrationButtonText" | "detailUrl" | "instructor" | "hasMultipleSessions" | "sessionCount" | "hasPrerequisites" | "fullDescription" | "whatToBring" | "prerequisites" | "directRegistrationUrl" | "contactInfo" | "activitySubtypeId" | "activityTypeId", ExtArgs["result"]["activity"]>
  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
    prerequisitesList?: boolean | Activity$prerequisitesListArgs<ExtArgs>
    sessions?: boolean | Activity$sessionsArgs<ExtArgs>
    childActivities?: boolean | Activity$childActivitiesArgs<ExtArgs>
    favorites?: boolean | Activity$favoritesArgs<ExtArgs>
    categories?: boolean | Activity$categoriesArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activitySubtype?: boolean | Activity$activitySubtypeArgs<ExtArgs>
    activityType?: boolean | Activity$activityTypeArgs<ExtArgs>
    location?: boolean | Activity$locationArgs<ExtArgs>
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      activitySubtype: Prisma.$ActivitySubtypePayload<ExtArgs> | null
      activityType: Prisma.$ActivityTypePayload<ExtArgs> | null
      location: Prisma.$LocationPayload<ExtArgs> | null
      provider: Prisma.$ProviderPayload<ExtArgs>
      prerequisitesList: Prisma.$ActivityPrerequisitePayload<ExtArgs>[]
      sessions: Prisma.$ActivitySessionPayload<ExtArgs>[]
      childActivities: Prisma.$ChildActivityPayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
      categories: Prisma.$ActivityCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      externalId: string
      name: string
      category: string
      subcategory: string | null
      description: string | null
      schedule: string | null
      dateStart: Date | null
      dateEnd: Date | null
      registrationDate: Date | null
      ageMin: number | null
      ageMax: number | null
      cost: number
      spotsAvailable: number | null
      totalSpots: number | null
      locationId: string | null
      registrationUrl: string | null
      courseId: string | null
      isActive: boolean
      isUpdated: boolean
      lastSeenAt: Date
      rawData: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      dayOfWeek: string[]
      registrationEndDate: Date | null
      registrationEndTime: string | null
      costIncludesTax: boolean
      taxAmount: number | null
      startTime: string | null
      endTime: string | null
      courseDetails: string | null
      dates: string | null
      registrationStatus: string | null
      registrationButtonText: string | null
      detailUrl: string | null
      instructor: string | null
      hasMultipleSessions: boolean
      sessionCount: number
      hasPrerequisites: boolean
      fullDescription: string | null
      whatToBring: string | null
      prerequisites: string | null
      directRegistrationUrl: string | null
      contactInfo: string | null
      activitySubtypeId: string | null
      activityTypeId: string | null
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities and returns the data updated in the database.
     * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activitySubtype<T extends Activity$activitySubtypeArgs<ExtArgs> = {}>(args?: Subset<T, Activity$activitySubtypeArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activityType<T extends Activity$activityTypeArgs<ExtArgs> = {}>(args?: Subset<T, Activity$activityTypeArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    location<T extends Activity$locationArgs<ExtArgs> = {}>(args?: Subset<T, Activity$locationArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prerequisitesList<T extends Activity$prerequisitesListArgs<ExtArgs> = {}>(args?: Subset<T, Activity$prerequisitesListArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends Activity$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    childActivities<T extends Activity$childActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$childActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favorites<T extends Activity$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Activity$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly providerId: FieldRef<"Activity", 'String'>
    readonly externalId: FieldRef<"Activity", 'String'>
    readonly name: FieldRef<"Activity", 'String'>
    readonly category: FieldRef<"Activity", 'String'>
    readonly subcategory: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly schedule: FieldRef<"Activity", 'String'>
    readonly dateStart: FieldRef<"Activity", 'DateTime'>
    readonly dateEnd: FieldRef<"Activity", 'DateTime'>
    readonly registrationDate: FieldRef<"Activity", 'DateTime'>
    readonly ageMin: FieldRef<"Activity", 'Int'>
    readonly ageMax: FieldRef<"Activity", 'Int'>
    readonly cost: FieldRef<"Activity", 'Float'>
    readonly spotsAvailable: FieldRef<"Activity", 'Int'>
    readonly totalSpots: FieldRef<"Activity", 'Int'>
    readonly locationId: FieldRef<"Activity", 'String'>
    readonly registrationUrl: FieldRef<"Activity", 'String'>
    readonly courseId: FieldRef<"Activity", 'String'>
    readonly isActive: FieldRef<"Activity", 'Boolean'>
    readonly isUpdated: FieldRef<"Activity", 'Boolean'>
    readonly lastSeenAt: FieldRef<"Activity", 'DateTime'>
    readonly rawData: FieldRef<"Activity", 'Json'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly updatedAt: FieldRef<"Activity", 'DateTime'>
    readonly dayOfWeek: FieldRef<"Activity", 'String[]'>
    readonly registrationEndDate: FieldRef<"Activity", 'DateTime'>
    readonly registrationEndTime: FieldRef<"Activity", 'String'>
    readonly costIncludesTax: FieldRef<"Activity", 'Boolean'>
    readonly taxAmount: FieldRef<"Activity", 'Float'>
    readonly startTime: FieldRef<"Activity", 'String'>
    readonly endTime: FieldRef<"Activity", 'String'>
    readonly courseDetails: FieldRef<"Activity", 'String'>
    readonly dates: FieldRef<"Activity", 'String'>
    readonly registrationStatus: FieldRef<"Activity", 'String'>
    readonly registrationButtonText: FieldRef<"Activity", 'String'>
    readonly detailUrl: FieldRef<"Activity", 'String'>
    readonly instructor: FieldRef<"Activity", 'String'>
    readonly hasMultipleSessions: FieldRef<"Activity", 'Boolean'>
    readonly sessionCount: FieldRef<"Activity", 'Int'>
    readonly hasPrerequisites: FieldRef<"Activity", 'Boolean'>
    readonly fullDescription: FieldRef<"Activity", 'String'>
    readonly whatToBring: FieldRef<"Activity", 'String'>
    readonly prerequisites: FieldRef<"Activity", 'String'>
    readonly directRegistrationUrl: FieldRef<"Activity", 'String'>
    readonly contactInfo: FieldRef<"Activity", 'String'>
    readonly activitySubtypeId: FieldRef<"Activity", 'String'>
    readonly activityTypeId: FieldRef<"Activity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activity updateManyAndReturn
   */
  export type ActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activity.activitySubtype
   */
  export type Activity$activitySubtypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    where?: ActivitySubtypeWhereInput
  }

  /**
   * Activity.activityType
   */
  export type Activity$activityTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    where?: ActivityTypeWhereInput
  }

  /**
   * Activity.location
   */
  export type Activity$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
  }

  /**
   * Activity.prerequisitesList
   */
  export type Activity$prerequisitesListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    where?: ActivityPrerequisiteWhereInput
    orderBy?: ActivityPrerequisiteOrderByWithRelationInput | ActivityPrerequisiteOrderByWithRelationInput[]
    cursor?: ActivityPrerequisiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityPrerequisiteScalarFieldEnum | ActivityPrerequisiteScalarFieldEnum[]
  }

  /**
   * Activity.sessions
   */
  export type Activity$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    where?: ActivitySessionWhereInput
    orderBy?: ActivitySessionOrderByWithRelationInput | ActivitySessionOrderByWithRelationInput[]
    cursor?: ActivitySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivitySessionScalarFieldEnum | ActivitySessionScalarFieldEnum[]
  }

  /**
   * Activity.childActivities
   */
  export type Activity$childActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    where?: ChildActivityWhereInput
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    cursor?: ChildActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChildActivityScalarFieldEnum | ChildActivityScalarFieldEnum[]
  }

  /**
   * Activity.favorites
   */
  export type Activity$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Activity.categories
   */
  export type Activity$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    where?: ActivityCategoryWhereInput
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    cursor?: ActivityCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityCategoryScalarFieldEnum | ActivityCategoryScalarFieldEnum[]
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model ActivityHistory
   */

  export type AggregateActivityHistory = {
    _count: ActivityHistoryCountAggregateOutputType | null
    _min: ActivityHistoryMinAggregateOutputType | null
    _max: ActivityHistoryMaxAggregateOutputType | null
  }

  export type ActivityHistoryMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    changeType: string | null
    createdAt: Date | null
  }

  export type ActivityHistoryMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    changeType: string | null
    createdAt: Date | null
  }

  export type ActivityHistoryCountAggregateOutputType = {
    id: number
    activityId: number
    changeType: number
    previousData: number
    newData: number
    changedFields: number
    createdAt: number
    _all: number
  }


  export type ActivityHistoryMinAggregateInputType = {
    id?: true
    activityId?: true
    changeType?: true
    createdAt?: true
  }

  export type ActivityHistoryMaxAggregateInputType = {
    id?: true
    activityId?: true
    changeType?: true
    createdAt?: true
  }

  export type ActivityHistoryCountAggregateInputType = {
    id?: true
    activityId?: true
    changeType?: true
    previousData?: true
    newData?: true
    changedFields?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityHistory to aggregate.
     */
    where?: ActivityHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityHistories to fetch.
     */
    orderBy?: ActivityHistoryOrderByWithRelationInput | ActivityHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityHistories
    **/
    _count?: true | ActivityHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityHistoryMaxAggregateInputType
  }

  export type GetActivityHistoryAggregateType<T extends ActivityHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityHistory[P]>
      : GetScalarType<T[P], AggregateActivityHistory[P]>
  }




  export type ActivityHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityHistoryWhereInput
    orderBy?: ActivityHistoryOrderByWithAggregationInput | ActivityHistoryOrderByWithAggregationInput[]
    by: ActivityHistoryScalarFieldEnum[] | ActivityHistoryScalarFieldEnum
    having?: ActivityHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityHistoryCountAggregateInputType | true
    _min?: ActivityHistoryMinAggregateInputType
    _max?: ActivityHistoryMaxAggregateInputType
  }

  export type ActivityHistoryGroupByOutputType = {
    id: string
    activityId: string
    changeType: string
    previousData: JsonValue | null
    newData: JsonValue | null
    changedFields: string[]
    createdAt: Date
    _count: ActivityHistoryCountAggregateOutputType | null
    _min: ActivityHistoryMinAggregateOutputType | null
    _max: ActivityHistoryMaxAggregateOutputType | null
  }

  type GetActivityHistoryGroupByPayload<T extends ActivityHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ActivityHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    changeType?: boolean
    previousData?: boolean
    newData?: boolean
    changedFields?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["activityHistory"]>

  export type ActivityHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    changeType?: boolean
    previousData?: boolean
    newData?: boolean
    changedFields?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["activityHistory"]>

  export type ActivityHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    changeType?: boolean
    previousData?: boolean
    newData?: boolean
    changedFields?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["activityHistory"]>

  export type ActivityHistorySelectScalar = {
    id?: boolean
    activityId?: boolean
    changeType?: boolean
    previousData?: boolean
    newData?: boolean
    changedFields?: boolean
    createdAt?: boolean
  }

  export type ActivityHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "changeType" | "previousData" | "newData" | "changedFields" | "createdAt", ExtArgs["result"]["activityHistory"]>

  export type $ActivityHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityHistory"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      changeType: string
      previousData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      changedFields: string[]
      createdAt: Date
    }, ExtArgs["result"]["activityHistory"]>
    composites: {}
  }

  type ActivityHistoryGetPayload<S extends boolean | null | undefined | ActivityHistoryDefaultArgs> = $Result.GetResult<Prisma.$ActivityHistoryPayload, S>

  type ActivityHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityHistoryCountAggregateInputType | true
    }

  export interface ActivityHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityHistory'], meta: { name: 'ActivityHistory' } }
    /**
     * Find zero or one ActivityHistory that matches the filter.
     * @param {ActivityHistoryFindUniqueArgs} args - Arguments to find a ActivityHistory
     * @example
     * // Get one ActivityHistory
     * const activityHistory = await prisma.activityHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityHistoryFindUniqueArgs>(args: SelectSubset<T, ActivityHistoryFindUniqueArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityHistoryFindUniqueOrThrowArgs} args - Arguments to find a ActivityHistory
     * @example
     * // Get one ActivityHistory
     * const activityHistory = await prisma.activityHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryFindFirstArgs} args - Arguments to find a ActivityHistory
     * @example
     * // Get one ActivityHistory
     * const activityHistory = await prisma.activityHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityHistoryFindFirstArgs>(args?: SelectSubset<T, ActivityHistoryFindFirstArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryFindFirstOrThrowArgs} args - Arguments to find a ActivityHistory
     * @example
     * // Get one ActivityHistory
     * const activityHistory = await prisma.activityHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityHistories
     * const activityHistories = await prisma.activityHistory.findMany()
     * 
     * // Get first 10 ActivityHistories
     * const activityHistories = await prisma.activityHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityHistoryWithIdOnly = await prisma.activityHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityHistoryFindManyArgs>(args?: SelectSubset<T, ActivityHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityHistory.
     * @param {ActivityHistoryCreateArgs} args - Arguments to create a ActivityHistory.
     * @example
     * // Create one ActivityHistory
     * const ActivityHistory = await prisma.activityHistory.create({
     *   data: {
     *     // ... data to create a ActivityHistory
     *   }
     * })
     * 
     */
    create<T extends ActivityHistoryCreateArgs>(args: SelectSubset<T, ActivityHistoryCreateArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityHistories.
     * @param {ActivityHistoryCreateManyArgs} args - Arguments to create many ActivityHistories.
     * @example
     * // Create many ActivityHistories
     * const activityHistory = await prisma.activityHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityHistoryCreateManyArgs>(args?: SelectSubset<T, ActivityHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityHistories and returns the data saved in the database.
     * @param {ActivityHistoryCreateManyAndReturnArgs} args - Arguments to create many ActivityHistories.
     * @example
     * // Create many ActivityHistories
     * const activityHistory = await prisma.activityHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityHistories and only return the `id`
     * const activityHistoryWithIdOnly = await prisma.activityHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityHistory.
     * @param {ActivityHistoryDeleteArgs} args - Arguments to delete one ActivityHistory.
     * @example
     * // Delete one ActivityHistory
     * const ActivityHistory = await prisma.activityHistory.delete({
     *   where: {
     *     // ... filter to delete one ActivityHistory
     *   }
     * })
     * 
     */
    delete<T extends ActivityHistoryDeleteArgs>(args: SelectSubset<T, ActivityHistoryDeleteArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityHistory.
     * @param {ActivityHistoryUpdateArgs} args - Arguments to update one ActivityHistory.
     * @example
     * // Update one ActivityHistory
     * const activityHistory = await prisma.activityHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityHistoryUpdateArgs>(args: SelectSubset<T, ActivityHistoryUpdateArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityHistories.
     * @param {ActivityHistoryDeleteManyArgs} args - Arguments to filter ActivityHistories to delete.
     * @example
     * // Delete a few ActivityHistories
     * const { count } = await prisma.activityHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityHistoryDeleteManyArgs>(args?: SelectSubset<T, ActivityHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityHistories
     * const activityHistory = await prisma.activityHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityHistoryUpdateManyArgs>(args: SelectSubset<T, ActivityHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityHistories and returns the data updated in the database.
     * @param {ActivityHistoryUpdateManyAndReturnArgs} args - Arguments to update many ActivityHistories.
     * @example
     * // Update many ActivityHistories
     * const activityHistory = await prisma.activityHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityHistories and only return the `id`
     * const activityHistoryWithIdOnly = await prisma.activityHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityHistory.
     * @param {ActivityHistoryUpsertArgs} args - Arguments to update or create a ActivityHistory.
     * @example
     * // Update or create a ActivityHistory
     * const activityHistory = await prisma.activityHistory.upsert({
     *   create: {
     *     // ... data to create a ActivityHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityHistory we want to update
     *   }
     * })
     */
    upsert<T extends ActivityHistoryUpsertArgs>(args: SelectSubset<T, ActivityHistoryUpsertArgs<ExtArgs>>): Prisma__ActivityHistoryClient<$Result.GetResult<Prisma.$ActivityHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryCountArgs} args - Arguments to filter ActivityHistories to count.
     * @example
     * // Count the number of ActivityHistories
     * const count = await prisma.activityHistory.count({
     *   where: {
     *     // ... the filter for the ActivityHistories we want to count
     *   }
     * })
    **/
    count<T extends ActivityHistoryCountArgs>(
      args?: Subset<T, ActivityHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityHistoryAggregateArgs>(args: Subset<T, ActivityHistoryAggregateArgs>): Prisma.PrismaPromise<GetActivityHistoryAggregateType<T>>

    /**
     * Group by ActivityHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ActivityHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityHistory model
   */
  readonly fields: ActivityHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityHistory model
   */
  interface ActivityHistoryFieldRefs {
    readonly id: FieldRef<"ActivityHistory", 'String'>
    readonly activityId: FieldRef<"ActivityHistory", 'String'>
    readonly changeType: FieldRef<"ActivityHistory", 'String'>
    readonly previousData: FieldRef<"ActivityHistory", 'Json'>
    readonly newData: FieldRef<"ActivityHistory", 'Json'>
    readonly changedFields: FieldRef<"ActivityHistory", 'String[]'>
    readonly createdAt: FieldRef<"ActivityHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityHistory findUnique
   */
  export type ActivityHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter, which ActivityHistory to fetch.
     */
    where: ActivityHistoryWhereUniqueInput
  }

  /**
   * ActivityHistory findUniqueOrThrow
   */
  export type ActivityHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter, which ActivityHistory to fetch.
     */
    where: ActivityHistoryWhereUniqueInput
  }

  /**
   * ActivityHistory findFirst
   */
  export type ActivityHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter, which ActivityHistory to fetch.
     */
    where?: ActivityHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityHistories to fetch.
     */
    orderBy?: ActivityHistoryOrderByWithRelationInput | ActivityHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityHistories.
     */
    cursor?: ActivityHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityHistories.
     */
    distinct?: ActivityHistoryScalarFieldEnum | ActivityHistoryScalarFieldEnum[]
  }

  /**
   * ActivityHistory findFirstOrThrow
   */
  export type ActivityHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter, which ActivityHistory to fetch.
     */
    where?: ActivityHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityHistories to fetch.
     */
    orderBy?: ActivityHistoryOrderByWithRelationInput | ActivityHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityHistories.
     */
    cursor?: ActivityHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityHistories.
     */
    distinct?: ActivityHistoryScalarFieldEnum | ActivityHistoryScalarFieldEnum[]
  }

  /**
   * ActivityHistory findMany
   */
  export type ActivityHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter, which ActivityHistories to fetch.
     */
    where?: ActivityHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityHistories to fetch.
     */
    orderBy?: ActivityHistoryOrderByWithRelationInput | ActivityHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityHistories.
     */
    cursor?: ActivityHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityHistories.
     */
    skip?: number
    distinct?: ActivityHistoryScalarFieldEnum | ActivityHistoryScalarFieldEnum[]
  }

  /**
   * ActivityHistory create
   */
  export type ActivityHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * The data needed to create a ActivityHistory.
     */
    data: XOR<ActivityHistoryCreateInput, ActivityHistoryUncheckedCreateInput>
  }

  /**
   * ActivityHistory createMany
   */
  export type ActivityHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityHistories.
     */
    data: ActivityHistoryCreateManyInput | ActivityHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityHistory createManyAndReturn
   */
  export type ActivityHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityHistories.
     */
    data: ActivityHistoryCreateManyInput | ActivityHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityHistory update
   */
  export type ActivityHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * The data needed to update a ActivityHistory.
     */
    data: XOR<ActivityHistoryUpdateInput, ActivityHistoryUncheckedUpdateInput>
    /**
     * Choose, which ActivityHistory to update.
     */
    where: ActivityHistoryWhereUniqueInput
  }

  /**
   * ActivityHistory updateMany
   */
  export type ActivityHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityHistories.
     */
    data: XOR<ActivityHistoryUpdateManyMutationInput, ActivityHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityHistories to update
     */
    where?: ActivityHistoryWhereInput
    /**
     * Limit how many ActivityHistories to update.
     */
    limit?: number
  }

  /**
   * ActivityHistory updateManyAndReturn
   */
  export type ActivityHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ActivityHistories.
     */
    data: XOR<ActivityHistoryUpdateManyMutationInput, ActivityHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityHistories to update
     */
    where?: ActivityHistoryWhereInput
    /**
     * Limit how many ActivityHistories to update.
     */
    limit?: number
  }

  /**
   * ActivityHistory upsert
   */
  export type ActivityHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * The filter to search for the ActivityHistory to update in case it exists.
     */
    where: ActivityHistoryWhereUniqueInput
    /**
     * In case the ActivityHistory found by the `where` argument doesn't exist, create a new ActivityHistory with this data.
     */
    create: XOR<ActivityHistoryCreateInput, ActivityHistoryUncheckedCreateInput>
    /**
     * In case the ActivityHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityHistoryUpdateInput, ActivityHistoryUncheckedUpdateInput>
  }

  /**
   * ActivityHistory delete
   */
  export type ActivityHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
    /**
     * Filter which ActivityHistory to delete.
     */
    where: ActivityHistoryWhereUniqueInput
  }

  /**
   * ActivityHistory deleteMany
   */
  export type ActivityHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityHistories to delete
     */
    where?: ActivityHistoryWhereInput
    /**
     * Limit how many ActivityHistories to delete.
     */
    limit?: number
  }

  /**
   * ActivityHistory without action
   */
  export type ActivityHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityHistory
     */
    select?: ActivityHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityHistory
     */
    omit?: ActivityHistoryOmit<ExtArgs> | null
  }


  /**
   * Model ActivityPrerequisite
   */

  export type AggregateActivityPrerequisite = {
    _count: ActivityPrerequisiteCountAggregateOutputType | null
    _min: ActivityPrerequisiteMinAggregateOutputType | null
    _max: ActivityPrerequisiteMaxAggregateOutputType | null
  }

  export type ActivityPrerequisiteMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    name: string | null
    description: string | null
    url: string | null
    courseId: string | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityPrerequisiteMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    name: string | null
    description: string | null
    url: string | null
    courseId: string | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityPrerequisiteCountAggregateOutputType = {
    id: number
    activityId: number
    name: number
    description: number
    url: number
    courseId: number
    isRequired: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActivityPrerequisiteMinAggregateInputType = {
    id?: true
    activityId?: true
    name?: true
    description?: true
    url?: true
    courseId?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityPrerequisiteMaxAggregateInputType = {
    id?: true
    activityId?: true
    name?: true
    description?: true
    url?: true
    courseId?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityPrerequisiteCountAggregateInputType = {
    id?: true
    activityId?: true
    name?: true
    description?: true
    url?: true
    courseId?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActivityPrerequisiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityPrerequisite to aggregate.
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityPrerequisites to fetch.
     */
    orderBy?: ActivityPrerequisiteOrderByWithRelationInput | ActivityPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityPrerequisites
    **/
    _count?: true | ActivityPrerequisiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityPrerequisiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityPrerequisiteMaxAggregateInputType
  }

  export type GetActivityPrerequisiteAggregateType<T extends ActivityPrerequisiteAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityPrerequisite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityPrerequisite[P]>
      : GetScalarType<T[P], AggregateActivityPrerequisite[P]>
  }




  export type ActivityPrerequisiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityPrerequisiteWhereInput
    orderBy?: ActivityPrerequisiteOrderByWithAggregationInput | ActivityPrerequisiteOrderByWithAggregationInput[]
    by: ActivityPrerequisiteScalarFieldEnum[] | ActivityPrerequisiteScalarFieldEnum
    having?: ActivityPrerequisiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityPrerequisiteCountAggregateInputType | true
    _min?: ActivityPrerequisiteMinAggregateInputType
    _max?: ActivityPrerequisiteMaxAggregateInputType
  }

  export type ActivityPrerequisiteGroupByOutputType = {
    id: string
    activityId: string
    name: string
    description: string | null
    url: string | null
    courseId: string | null
    isRequired: boolean
    createdAt: Date
    updatedAt: Date
    _count: ActivityPrerequisiteCountAggregateOutputType | null
    _min: ActivityPrerequisiteMinAggregateOutputType | null
    _max: ActivityPrerequisiteMaxAggregateOutputType | null
  }

  type GetActivityPrerequisiteGroupByPayload<T extends ActivityPrerequisiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityPrerequisiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityPrerequisiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityPrerequisiteGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityPrerequisiteGroupByOutputType[P]>
        }
      >
    >


  export type ActivityPrerequisiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    courseId?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityPrerequisite"]>

  export type ActivityPrerequisiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    courseId?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityPrerequisite"]>

  export type ActivityPrerequisiteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    courseId?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityPrerequisite"]>

  export type ActivityPrerequisiteSelectScalar = {
    id?: boolean
    activityId?: boolean
    name?: boolean
    description?: boolean
    url?: boolean
    courseId?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActivityPrerequisiteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "name" | "description" | "url" | "courseId" | "isRequired" | "createdAt" | "updatedAt", ExtArgs["result"]["activityPrerequisite"]>
  export type ActivityPrerequisiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type ActivityPrerequisiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type ActivityPrerequisiteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ActivityPrerequisitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityPrerequisite"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      name: string
      description: string | null
      url: string | null
      courseId: string | null
      isRequired: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["activityPrerequisite"]>
    composites: {}
  }

  type ActivityPrerequisiteGetPayload<S extends boolean | null | undefined | ActivityPrerequisiteDefaultArgs> = $Result.GetResult<Prisma.$ActivityPrerequisitePayload, S>

  type ActivityPrerequisiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityPrerequisiteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityPrerequisiteCountAggregateInputType | true
    }

  export interface ActivityPrerequisiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityPrerequisite'], meta: { name: 'ActivityPrerequisite' } }
    /**
     * Find zero or one ActivityPrerequisite that matches the filter.
     * @param {ActivityPrerequisiteFindUniqueArgs} args - Arguments to find a ActivityPrerequisite
     * @example
     * // Get one ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityPrerequisiteFindUniqueArgs>(args: SelectSubset<T, ActivityPrerequisiteFindUniqueArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityPrerequisite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityPrerequisiteFindUniqueOrThrowArgs} args - Arguments to find a ActivityPrerequisite
     * @example
     * // Get one ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityPrerequisiteFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityPrerequisiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityPrerequisite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteFindFirstArgs} args - Arguments to find a ActivityPrerequisite
     * @example
     * // Get one ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityPrerequisiteFindFirstArgs>(args?: SelectSubset<T, ActivityPrerequisiteFindFirstArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityPrerequisite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteFindFirstOrThrowArgs} args - Arguments to find a ActivityPrerequisite
     * @example
     * // Get one ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityPrerequisiteFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityPrerequisiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityPrerequisites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityPrerequisites
     * const activityPrerequisites = await prisma.activityPrerequisite.findMany()
     * 
     * // Get first 10 ActivityPrerequisites
     * const activityPrerequisites = await prisma.activityPrerequisite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityPrerequisiteWithIdOnly = await prisma.activityPrerequisite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityPrerequisiteFindManyArgs>(args?: SelectSubset<T, ActivityPrerequisiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityPrerequisite.
     * @param {ActivityPrerequisiteCreateArgs} args - Arguments to create a ActivityPrerequisite.
     * @example
     * // Create one ActivityPrerequisite
     * const ActivityPrerequisite = await prisma.activityPrerequisite.create({
     *   data: {
     *     // ... data to create a ActivityPrerequisite
     *   }
     * })
     * 
     */
    create<T extends ActivityPrerequisiteCreateArgs>(args: SelectSubset<T, ActivityPrerequisiteCreateArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityPrerequisites.
     * @param {ActivityPrerequisiteCreateManyArgs} args - Arguments to create many ActivityPrerequisites.
     * @example
     * // Create many ActivityPrerequisites
     * const activityPrerequisite = await prisma.activityPrerequisite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityPrerequisiteCreateManyArgs>(args?: SelectSubset<T, ActivityPrerequisiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityPrerequisites and returns the data saved in the database.
     * @param {ActivityPrerequisiteCreateManyAndReturnArgs} args - Arguments to create many ActivityPrerequisites.
     * @example
     * // Create many ActivityPrerequisites
     * const activityPrerequisite = await prisma.activityPrerequisite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityPrerequisites and only return the `id`
     * const activityPrerequisiteWithIdOnly = await prisma.activityPrerequisite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityPrerequisiteCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityPrerequisiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityPrerequisite.
     * @param {ActivityPrerequisiteDeleteArgs} args - Arguments to delete one ActivityPrerequisite.
     * @example
     * // Delete one ActivityPrerequisite
     * const ActivityPrerequisite = await prisma.activityPrerequisite.delete({
     *   where: {
     *     // ... filter to delete one ActivityPrerequisite
     *   }
     * })
     * 
     */
    delete<T extends ActivityPrerequisiteDeleteArgs>(args: SelectSubset<T, ActivityPrerequisiteDeleteArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityPrerequisite.
     * @param {ActivityPrerequisiteUpdateArgs} args - Arguments to update one ActivityPrerequisite.
     * @example
     * // Update one ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityPrerequisiteUpdateArgs>(args: SelectSubset<T, ActivityPrerequisiteUpdateArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityPrerequisites.
     * @param {ActivityPrerequisiteDeleteManyArgs} args - Arguments to filter ActivityPrerequisites to delete.
     * @example
     * // Delete a few ActivityPrerequisites
     * const { count } = await prisma.activityPrerequisite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityPrerequisiteDeleteManyArgs>(args?: SelectSubset<T, ActivityPrerequisiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityPrerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityPrerequisites
     * const activityPrerequisite = await prisma.activityPrerequisite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityPrerequisiteUpdateManyArgs>(args: SelectSubset<T, ActivityPrerequisiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityPrerequisites and returns the data updated in the database.
     * @param {ActivityPrerequisiteUpdateManyAndReturnArgs} args - Arguments to update many ActivityPrerequisites.
     * @example
     * // Update many ActivityPrerequisites
     * const activityPrerequisite = await prisma.activityPrerequisite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityPrerequisites and only return the `id`
     * const activityPrerequisiteWithIdOnly = await prisma.activityPrerequisite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityPrerequisiteUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityPrerequisiteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityPrerequisite.
     * @param {ActivityPrerequisiteUpsertArgs} args - Arguments to update or create a ActivityPrerequisite.
     * @example
     * // Update or create a ActivityPrerequisite
     * const activityPrerequisite = await prisma.activityPrerequisite.upsert({
     *   create: {
     *     // ... data to create a ActivityPrerequisite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityPrerequisite we want to update
     *   }
     * })
     */
    upsert<T extends ActivityPrerequisiteUpsertArgs>(args: SelectSubset<T, ActivityPrerequisiteUpsertArgs<ExtArgs>>): Prisma__ActivityPrerequisiteClient<$Result.GetResult<Prisma.$ActivityPrerequisitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityPrerequisites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteCountArgs} args - Arguments to filter ActivityPrerequisites to count.
     * @example
     * // Count the number of ActivityPrerequisites
     * const count = await prisma.activityPrerequisite.count({
     *   where: {
     *     // ... the filter for the ActivityPrerequisites we want to count
     *   }
     * })
    **/
    count<T extends ActivityPrerequisiteCountArgs>(
      args?: Subset<T, ActivityPrerequisiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityPrerequisiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityPrerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityPrerequisiteAggregateArgs>(args: Subset<T, ActivityPrerequisiteAggregateArgs>): Prisma.PrismaPromise<GetActivityPrerequisiteAggregateType<T>>

    /**
     * Group by ActivityPrerequisite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityPrerequisiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityPrerequisiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityPrerequisiteGroupByArgs['orderBy'] }
        : { orderBy?: ActivityPrerequisiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityPrerequisiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityPrerequisiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityPrerequisite model
   */
  readonly fields: ActivityPrerequisiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityPrerequisite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityPrerequisiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityPrerequisite model
   */
  interface ActivityPrerequisiteFieldRefs {
    readonly id: FieldRef<"ActivityPrerequisite", 'String'>
    readonly activityId: FieldRef<"ActivityPrerequisite", 'String'>
    readonly name: FieldRef<"ActivityPrerequisite", 'String'>
    readonly description: FieldRef<"ActivityPrerequisite", 'String'>
    readonly url: FieldRef<"ActivityPrerequisite", 'String'>
    readonly courseId: FieldRef<"ActivityPrerequisite", 'String'>
    readonly isRequired: FieldRef<"ActivityPrerequisite", 'Boolean'>
    readonly createdAt: FieldRef<"ActivityPrerequisite", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivityPrerequisite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityPrerequisite findUnique
   */
  export type ActivityPrerequisiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which ActivityPrerequisite to fetch.
     */
    where: ActivityPrerequisiteWhereUniqueInput
  }

  /**
   * ActivityPrerequisite findUniqueOrThrow
   */
  export type ActivityPrerequisiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which ActivityPrerequisite to fetch.
     */
    where: ActivityPrerequisiteWhereUniqueInput
  }

  /**
   * ActivityPrerequisite findFirst
   */
  export type ActivityPrerequisiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which ActivityPrerequisite to fetch.
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityPrerequisites to fetch.
     */
    orderBy?: ActivityPrerequisiteOrderByWithRelationInput | ActivityPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityPrerequisites.
     */
    cursor?: ActivityPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityPrerequisites.
     */
    distinct?: ActivityPrerequisiteScalarFieldEnum | ActivityPrerequisiteScalarFieldEnum[]
  }

  /**
   * ActivityPrerequisite findFirstOrThrow
   */
  export type ActivityPrerequisiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which ActivityPrerequisite to fetch.
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityPrerequisites to fetch.
     */
    orderBy?: ActivityPrerequisiteOrderByWithRelationInput | ActivityPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityPrerequisites.
     */
    cursor?: ActivityPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityPrerequisites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityPrerequisites.
     */
    distinct?: ActivityPrerequisiteScalarFieldEnum | ActivityPrerequisiteScalarFieldEnum[]
  }

  /**
   * ActivityPrerequisite findMany
   */
  export type ActivityPrerequisiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter, which ActivityPrerequisites to fetch.
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityPrerequisites to fetch.
     */
    orderBy?: ActivityPrerequisiteOrderByWithRelationInput | ActivityPrerequisiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityPrerequisites.
     */
    cursor?: ActivityPrerequisiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityPrerequisites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityPrerequisites.
     */
    skip?: number
    distinct?: ActivityPrerequisiteScalarFieldEnum | ActivityPrerequisiteScalarFieldEnum[]
  }

  /**
   * ActivityPrerequisite create
   */
  export type ActivityPrerequisiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityPrerequisite.
     */
    data: XOR<ActivityPrerequisiteCreateInput, ActivityPrerequisiteUncheckedCreateInput>
  }

  /**
   * ActivityPrerequisite createMany
   */
  export type ActivityPrerequisiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityPrerequisites.
     */
    data: ActivityPrerequisiteCreateManyInput | ActivityPrerequisiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityPrerequisite createManyAndReturn
   */
  export type ActivityPrerequisiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityPrerequisites.
     */
    data: ActivityPrerequisiteCreateManyInput | ActivityPrerequisiteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityPrerequisite update
   */
  export type ActivityPrerequisiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityPrerequisite.
     */
    data: XOR<ActivityPrerequisiteUpdateInput, ActivityPrerequisiteUncheckedUpdateInput>
    /**
     * Choose, which ActivityPrerequisite to update.
     */
    where: ActivityPrerequisiteWhereUniqueInput
  }

  /**
   * ActivityPrerequisite updateMany
   */
  export type ActivityPrerequisiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityPrerequisites.
     */
    data: XOR<ActivityPrerequisiteUpdateManyMutationInput, ActivityPrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which ActivityPrerequisites to update
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * Limit how many ActivityPrerequisites to update.
     */
    limit?: number
  }

  /**
   * ActivityPrerequisite updateManyAndReturn
   */
  export type ActivityPrerequisiteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * The data used to update ActivityPrerequisites.
     */
    data: XOR<ActivityPrerequisiteUpdateManyMutationInput, ActivityPrerequisiteUncheckedUpdateManyInput>
    /**
     * Filter which ActivityPrerequisites to update
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * Limit how many ActivityPrerequisites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityPrerequisite upsert
   */
  export type ActivityPrerequisiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityPrerequisite to update in case it exists.
     */
    where: ActivityPrerequisiteWhereUniqueInput
    /**
     * In case the ActivityPrerequisite found by the `where` argument doesn't exist, create a new ActivityPrerequisite with this data.
     */
    create: XOR<ActivityPrerequisiteCreateInput, ActivityPrerequisiteUncheckedCreateInput>
    /**
     * In case the ActivityPrerequisite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityPrerequisiteUpdateInput, ActivityPrerequisiteUncheckedUpdateInput>
  }

  /**
   * ActivityPrerequisite delete
   */
  export type ActivityPrerequisiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
    /**
     * Filter which ActivityPrerequisite to delete.
     */
    where: ActivityPrerequisiteWhereUniqueInput
  }

  /**
   * ActivityPrerequisite deleteMany
   */
  export type ActivityPrerequisiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityPrerequisites to delete
     */
    where?: ActivityPrerequisiteWhereInput
    /**
     * Limit how many ActivityPrerequisites to delete.
     */
    limit?: number
  }

  /**
   * ActivityPrerequisite without action
   */
  export type ActivityPrerequisiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityPrerequisite
     */
    select?: ActivityPrerequisiteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityPrerequisite
     */
    omit?: ActivityPrerequisiteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityPrerequisiteInclude<ExtArgs> | null
  }


  /**
   * Model ActivitySession
   */

  export type AggregateActivitySession = {
    _count: ActivitySessionCountAggregateOutputType | null
    _avg: ActivitySessionAvgAggregateOutputType | null
    _sum: ActivitySessionSumAggregateOutputType | null
    _min: ActivitySessionMinAggregateOutputType | null
    _max: ActivitySessionMaxAggregateOutputType | null
  }

  export type ActivitySessionAvgAggregateOutputType = {
    sessionNumber: number | null
  }

  export type ActivitySessionSumAggregateOutputType = {
    sessionNumber: number | null
  }

  export type ActivitySessionMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    sessionNumber: number | null
    date: string | null
    dayOfWeek: string | null
    startTime: string | null
    endTime: string | null
    location: string | null
    subLocation: string | null
    instructor: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivitySessionMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    sessionNumber: number | null
    date: string | null
    dayOfWeek: string | null
    startTime: string | null
    endTime: string | null
    location: string | null
    subLocation: string | null
    instructor: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivitySessionCountAggregateOutputType = {
    id: number
    activityId: number
    sessionNumber: number
    date: number
    dayOfWeek: number
    startTime: number
    endTime: number
    location: number
    subLocation: number
    instructor: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActivitySessionAvgAggregateInputType = {
    sessionNumber?: true
  }

  export type ActivitySessionSumAggregateInputType = {
    sessionNumber?: true
  }

  export type ActivitySessionMinAggregateInputType = {
    id?: true
    activityId?: true
    sessionNumber?: true
    date?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    location?: true
    subLocation?: true
    instructor?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivitySessionMaxAggregateInputType = {
    id?: true
    activityId?: true
    sessionNumber?: true
    date?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    location?: true
    subLocation?: true
    instructor?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivitySessionCountAggregateInputType = {
    id?: true
    activityId?: true
    sessionNumber?: true
    date?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    location?: true
    subLocation?: true
    instructor?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActivitySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivitySession to aggregate.
     */
    where?: ActivitySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySessions to fetch.
     */
    orderBy?: ActivitySessionOrderByWithRelationInput | ActivitySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivitySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivitySessions
    **/
    _count?: true | ActivitySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivitySessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivitySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivitySessionMaxAggregateInputType
  }

  export type GetActivitySessionAggregateType<T extends ActivitySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateActivitySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivitySession[P]>
      : GetScalarType<T[P], AggregateActivitySession[P]>
  }




  export type ActivitySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitySessionWhereInput
    orderBy?: ActivitySessionOrderByWithAggregationInput | ActivitySessionOrderByWithAggregationInput[]
    by: ActivitySessionScalarFieldEnum[] | ActivitySessionScalarFieldEnum
    having?: ActivitySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivitySessionCountAggregateInputType | true
    _avg?: ActivitySessionAvgAggregateInputType
    _sum?: ActivitySessionSumAggregateInputType
    _min?: ActivitySessionMinAggregateInputType
    _max?: ActivitySessionMaxAggregateInputType
  }

  export type ActivitySessionGroupByOutputType = {
    id: string
    activityId: string
    sessionNumber: number | null
    date: string | null
    dayOfWeek: string | null
    startTime: string | null
    endTime: string | null
    location: string | null
    subLocation: string | null
    instructor: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ActivitySessionCountAggregateOutputType | null
    _avg: ActivitySessionAvgAggregateOutputType | null
    _sum: ActivitySessionSumAggregateOutputType | null
    _min: ActivitySessionMinAggregateOutputType | null
    _max: ActivitySessionMaxAggregateOutputType | null
  }

  type GetActivitySessionGroupByPayload<T extends ActivitySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivitySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivitySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivitySessionGroupByOutputType[P]>
            : GetScalarType<T[P], ActivitySessionGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    sessionNumber?: boolean
    date?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    subLocation?: boolean
    instructor?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySession"]>

  export type ActivitySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    sessionNumber?: boolean
    date?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    subLocation?: boolean
    instructor?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySession"]>

  export type ActivitySessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    sessionNumber?: boolean
    date?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    subLocation?: boolean
    instructor?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySession"]>

  export type ActivitySessionSelectScalar = {
    id?: boolean
    activityId?: boolean
    sessionNumber?: boolean
    date?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    subLocation?: boolean
    instructor?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActivitySessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "sessionNumber" | "date" | "dayOfWeek" | "startTime" | "endTime" | "location" | "subLocation" | "instructor" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["activitySession"]>
  export type ActivitySessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type ActivitySessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type ActivitySessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $ActivitySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivitySession"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      sessionNumber: number | null
      date: string | null
      dayOfWeek: string | null
      startTime: string | null
      endTime: string | null
      location: string | null
      subLocation: string | null
      instructor: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["activitySession"]>
    composites: {}
  }

  type ActivitySessionGetPayload<S extends boolean | null | undefined | ActivitySessionDefaultArgs> = $Result.GetResult<Prisma.$ActivitySessionPayload, S>

  type ActivitySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivitySessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivitySessionCountAggregateInputType | true
    }

  export interface ActivitySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivitySession'], meta: { name: 'ActivitySession' } }
    /**
     * Find zero or one ActivitySession that matches the filter.
     * @param {ActivitySessionFindUniqueArgs} args - Arguments to find a ActivitySession
     * @example
     * // Get one ActivitySession
     * const activitySession = await prisma.activitySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivitySessionFindUniqueArgs>(args: SelectSubset<T, ActivitySessionFindUniqueArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivitySession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivitySessionFindUniqueOrThrowArgs} args - Arguments to find a ActivitySession
     * @example
     * // Get one ActivitySession
     * const activitySession = await prisma.activitySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivitySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivitySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivitySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionFindFirstArgs} args - Arguments to find a ActivitySession
     * @example
     * // Get one ActivitySession
     * const activitySession = await prisma.activitySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivitySessionFindFirstArgs>(args?: SelectSubset<T, ActivitySessionFindFirstArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivitySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionFindFirstOrThrowArgs} args - Arguments to find a ActivitySession
     * @example
     * // Get one ActivitySession
     * const activitySession = await prisma.activitySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivitySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivitySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivitySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivitySessions
     * const activitySessions = await prisma.activitySession.findMany()
     * 
     * // Get first 10 ActivitySessions
     * const activitySessions = await prisma.activitySession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activitySessionWithIdOnly = await prisma.activitySession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivitySessionFindManyArgs>(args?: SelectSubset<T, ActivitySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivitySession.
     * @param {ActivitySessionCreateArgs} args - Arguments to create a ActivitySession.
     * @example
     * // Create one ActivitySession
     * const ActivitySession = await prisma.activitySession.create({
     *   data: {
     *     // ... data to create a ActivitySession
     *   }
     * })
     * 
     */
    create<T extends ActivitySessionCreateArgs>(args: SelectSubset<T, ActivitySessionCreateArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivitySessions.
     * @param {ActivitySessionCreateManyArgs} args - Arguments to create many ActivitySessions.
     * @example
     * // Create many ActivitySessions
     * const activitySession = await prisma.activitySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivitySessionCreateManyArgs>(args?: SelectSubset<T, ActivitySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivitySessions and returns the data saved in the database.
     * @param {ActivitySessionCreateManyAndReturnArgs} args - Arguments to create many ActivitySessions.
     * @example
     * // Create many ActivitySessions
     * const activitySession = await prisma.activitySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivitySessions and only return the `id`
     * const activitySessionWithIdOnly = await prisma.activitySession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivitySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivitySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivitySession.
     * @param {ActivitySessionDeleteArgs} args - Arguments to delete one ActivitySession.
     * @example
     * // Delete one ActivitySession
     * const ActivitySession = await prisma.activitySession.delete({
     *   where: {
     *     // ... filter to delete one ActivitySession
     *   }
     * })
     * 
     */
    delete<T extends ActivitySessionDeleteArgs>(args: SelectSubset<T, ActivitySessionDeleteArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivitySession.
     * @param {ActivitySessionUpdateArgs} args - Arguments to update one ActivitySession.
     * @example
     * // Update one ActivitySession
     * const activitySession = await prisma.activitySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivitySessionUpdateArgs>(args: SelectSubset<T, ActivitySessionUpdateArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivitySessions.
     * @param {ActivitySessionDeleteManyArgs} args - Arguments to filter ActivitySessions to delete.
     * @example
     * // Delete a few ActivitySessions
     * const { count } = await prisma.activitySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivitySessionDeleteManyArgs>(args?: SelectSubset<T, ActivitySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivitySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivitySessions
     * const activitySession = await prisma.activitySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivitySessionUpdateManyArgs>(args: SelectSubset<T, ActivitySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivitySessions and returns the data updated in the database.
     * @param {ActivitySessionUpdateManyAndReturnArgs} args - Arguments to update many ActivitySessions.
     * @example
     * // Update many ActivitySessions
     * const activitySession = await prisma.activitySession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivitySessions and only return the `id`
     * const activitySessionWithIdOnly = await prisma.activitySession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivitySessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivitySessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivitySession.
     * @param {ActivitySessionUpsertArgs} args - Arguments to update or create a ActivitySession.
     * @example
     * // Update or create a ActivitySession
     * const activitySession = await prisma.activitySession.upsert({
     *   create: {
     *     // ... data to create a ActivitySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivitySession we want to update
     *   }
     * })
     */
    upsert<T extends ActivitySessionUpsertArgs>(args: SelectSubset<T, ActivitySessionUpsertArgs<ExtArgs>>): Prisma__ActivitySessionClient<$Result.GetResult<Prisma.$ActivitySessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivitySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionCountArgs} args - Arguments to filter ActivitySessions to count.
     * @example
     * // Count the number of ActivitySessions
     * const count = await prisma.activitySession.count({
     *   where: {
     *     // ... the filter for the ActivitySessions we want to count
     *   }
     * })
    **/
    count<T extends ActivitySessionCountArgs>(
      args?: Subset<T, ActivitySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivitySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivitySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivitySessionAggregateArgs>(args: Subset<T, ActivitySessionAggregateArgs>): Prisma.PrismaPromise<GetActivitySessionAggregateType<T>>

    /**
     * Group by ActivitySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivitySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivitySessionGroupByArgs['orderBy'] }
        : { orderBy?: ActivitySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivitySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivitySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivitySession model
   */
  readonly fields: ActivitySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivitySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivitySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivitySession model
   */
  interface ActivitySessionFieldRefs {
    readonly id: FieldRef<"ActivitySession", 'String'>
    readonly activityId: FieldRef<"ActivitySession", 'String'>
    readonly sessionNumber: FieldRef<"ActivitySession", 'Int'>
    readonly date: FieldRef<"ActivitySession", 'String'>
    readonly dayOfWeek: FieldRef<"ActivitySession", 'String'>
    readonly startTime: FieldRef<"ActivitySession", 'String'>
    readonly endTime: FieldRef<"ActivitySession", 'String'>
    readonly location: FieldRef<"ActivitySession", 'String'>
    readonly subLocation: FieldRef<"ActivitySession", 'String'>
    readonly instructor: FieldRef<"ActivitySession", 'String'>
    readonly notes: FieldRef<"ActivitySession", 'String'>
    readonly createdAt: FieldRef<"ActivitySession", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivitySession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivitySession findUnique
   */
  export type ActivitySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySession to fetch.
     */
    where: ActivitySessionWhereUniqueInput
  }

  /**
   * ActivitySession findUniqueOrThrow
   */
  export type ActivitySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySession to fetch.
     */
    where: ActivitySessionWhereUniqueInput
  }

  /**
   * ActivitySession findFirst
   */
  export type ActivitySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySession to fetch.
     */
    where?: ActivitySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySessions to fetch.
     */
    orderBy?: ActivitySessionOrderByWithRelationInput | ActivitySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivitySessions.
     */
    cursor?: ActivitySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivitySessions.
     */
    distinct?: ActivitySessionScalarFieldEnum | ActivitySessionScalarFieldEnum[]
  }

  /**
   * ActivitySession findFirstOrThrow
   */
  export type ActivitySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySession to fetch.
     */
    where?: ActivitySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySessions to fetch.
     */
    orderBy?: ActivitySessionOrderByWithRelationInput | ActivitySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivitySessions.
     */
    cursor?: ActivitySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivitySessions.
     */
    distinct?: ActivitySessionScalarFieldEnum | ActivitySessionScalarFieldEnum[]
  }

  /**
   * ActivitySession findMany
   */
  export type ActivitySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySessions to fetch.
     */
    where?: ActivitySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySessions to fetch.
     */
    orderBy?: ActivitySessionOrderByWithRelationInput | ActivitySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivitySessions.
     */
    cursor?: ActivitySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySessions.
     */
    skip?: number
    distinct?: ActivitySessionScalarFieldEnum | ActivitySessionScalarFieldEnum[]
  }

  /**
   * ActivitySession create
   */
  export type ActivitySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivitySession.
     */
    data: XOR<ActivitySessionCreateInput, ActivitySessionUncheckedCreateInput>
  }

  /**
   * ActivitySession createMany
   */
  export type ActivitySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivitySessions.
     */
    data: ActivitySessionCreateManyInput | ActivitySessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivitySession createManyAndReturn
   */
  export type ActivitySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * The data used to create many ActivitySessions.
     */
    data: ActivitySessionCreateManyInput | ActivitySessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivitySession update
   */
  export type ActivitySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivitySession.
     */
    data: XOR<ActivitySessionUpdateInput, ActivitySessionUncheckedUpdateInput>
    /**
     * Choose, which ActivitySession to update.
     */
    where: ActivitySessionWhereUniqueInput
  }

  /**
   * ActivitySession updateMany
   */
  export type ActivitySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivitySessions.
     */
    data: XOR<ActivitySessionUpdateManyMutationInput, ActivitySessionUncheckedUpdateManyInput>
    /**
     * Filter which ActivitySessions to update
     */
    where?: ActivitySessionWhereInput
    /**
     * Limit how many ActivitySessions to update.
     */
    limit?: number
  }

  /**
   * ActivitySession updateManyAndReturn
   */
  export type ActivitySessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * The data used to update ActivitySessions.
     */
    data: XOR<ActivitySessionUpdateManyMutationInput, ActivitySessionUncheckedUpdateManyInput>
    /**
     * Filter which ActivitySessions to update
     */
    where?: ActivitySessionWhereInput
    /**
     * Limit how many ActivitySessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivitySession upsert
   */
  export type ActivitySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivitySession to update in case it exists.
     */
    where: ActivitySessionWhereUniqueInput
    /**
     * In case the ActivitySession found by the `where` argument doesn't exist, create a new ActivitySession with this data.
     */
    create: XOR<ActivitySessionCreateInput, ActivitySessionUncheckedCreateInput>
    /**
     * In case the ActivitySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivitySessionUpdateInput, ActivitySessionUncheckedUpdateInput>
  }

  /**
   * ActivitySession delete
   */
  export type ActivitySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
    /**
     * Filter which ActivitySession to delete.
     */
    where: ActivitySessionWhereUniqueInput
  }

  /**
   * ActivitySession deleteMany
   */
  export type ActivitySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivitySessions to delete
     */
    where?: ActivitySessionWhereInput
    /**
     * Limit how many ActivitySessions to delete.
     */
    limit?: number
  }

  /**
   * ActivitySession without action
   */
  export type ActivitySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySession
     */
    select?: ActivitySessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySession
     */
    omit?: ActivitySessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySessionInclude<ExtArgs> | null
  }


  /**
   * Model ActivityShare
   */

  export type AggregateActivityShare = {
    _count: ActivityShareCountAggregateOutputType | null
    _min: ActivityShareMinAggregateOutputType | null
    _max: ActivityShareMaxAggregateOutputType | null
  }

  export type ActivityShareMinAggregateOutputType = {
    id: string | null
    sharingUserId: string | null
    sharedWithUserId: string | null
    permissionLevel: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityShareMaxAggregateOutputType = {
    id: string | null
    sharingUserId: string | null
    sharedWithUserId: string | null
    permissionLevel: string | null
    expiresAt: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityShareCountAggregateOutputType = {
    id: number
    sharingUserId: number
    sharedWithUserId: number
    permissionLevel: number
    expiresAt: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActivityShareMinAggregateInputType = {
    id?: true
    sharingUserId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityShareMaxAggregateInputType = {
    id?: true
    sharingUserId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityShareCountAggregateInputType = {
    id?: true
    sharingUserId?: true
    sharedWithUserId?: true
    permissionLevel?: true
    expiresAt?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActivityShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityShare to aggregate.
     */
    where?: ActivityShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShares to fetch.
     */
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityShares
    **/
    _count?: true | ActivityShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityShareMaxAggregateInputType
  }

  export type GetActivityShareAggregateType<T extends ActivityShareAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityShare[P]>
      : GetScalarType<T[P], AggregateActivityShare[P]>
  }




  export type ActivityShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareWhereInput
    orderBy?: ActivityShareOrderByWithAggregationInput | ActivityShareOrderByWithAggregationInput[]
    by: ActivityShareScalarFieldEnum[] | ActivityShareScalarFieldEnum
    having?: ActivityShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityShareCountAggregateInputType | true
    _min?: ActivityShareMinAggregateInputType
    _max?: ActivityShareMaxAggregateInputType
  }

  export type ActivityShareGroupByOutputType = {
    id: string
    sharingUserId: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ActivityShareCountAggregateOutputType | null
    _min: ActivityShareMinAggregateOutputType | null
    _max: ActivityShareMaxAggregateOutputType | null
  }

  type GetActivityShareGroupByPayload<T extends ActivityShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityShareGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityShareGroupByOutputType[P]>
        }
      >
    >


  export type ActivityShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sharingUserId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
    profiles?: boolean | ActivityShare$profilesArgs<ExtArgs>
    _count?: boolean | ActivityShareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShare"]>

  export type ActivityShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sharingUserId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShare"]>

  export type ActivityShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sharingUserId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShare"]>

  export type ActivityShareSelectScalar = {
    id?: boolean
    sharingUserId?: boolean
    sharedWithUserId?: boolean
    permissionLevel?: boolean
    expiresAt?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActivityShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sharingUserId" | "sharedWithUserId" | "permissionLevel" | "expiresAt" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["activityShare"]>
  export type ActivityShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
    profiles?: boolean | ActivityShare$profilesArgs<ExtArgs>
    _count?: boolean | ActivityShareCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sharedWithUser?: boolean | UserDefaultArgs<ExtArgs>
    sharingUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivitySharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityShare"
    objects: {
      sharedWithUser: Prisma.$UserPayload<ExtArgs>
      sharingUser: Prisma.$UserPayload<ExtArgs>
      profiles: Prisma.$ActivityShareProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sharingUserId: string
      sharedWithUserId: string
      permissionLevel: string
      expiresAt: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["activityShare"]>
    composites: {}
  }

  type ActivityShareGetPayload<S extends boolean | null | undefined | ActivityShareDefaultArgs> = $Result.GetResult<Prisma.$ActivitySharePayload, S>

  type ActivityShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityShareCountAggregateInputType | true
    }

  export interface ActivityShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityShare'], meta: { name: 'ActivityShare' } }
    /**
     * Find zero or one ActivityShare that matches the filter.
     * @param {ActivityShareFindUniqueArgs} args - Arguments to find a ActivityShare
     * @example
     * // Get one ActivityShare
     * const activityShare = await prisma.activityShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityShareFindUniqueArgs>(args: SelectSubset<T, ActivityShareFindUniqueArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityShareFindUniqueOrThrowArgs} args - Arguments to find a ActivityShare
     * @example
     * // Get one ActivityShare
     * const activityShare = await prisma.activityShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityShareFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareFindFirstArgs} args - Arguments to find a ActivityShare
     * @example
     * // Get one ActivityShare
     * const activityShare = await prisma.activityShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityShareFindFirstArgs>(args?: SelectSubset<T, ActivityShareFindFirstArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareFindFirstOrThrowArgs} args - Arguments to find a ActivityShare
     * @example
     * // Get one ActivityShare
     * const activityShare = await prisma.activityShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityShareFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityShares
     * const activityShares = await prisma.activityShare.findMany()
     * 
     * // Get first 10 ActivityShares
     * const activityShares = await prisma.activityShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityShareWithIdOnly = await prisma.activityShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityShareFindManyArgs>(args?: SelectSubset<T, ActivityShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityShare.
     * @param {ActivityShareCreateArgs} args - Arguments to create a ActivityShare.
     * @example
     * // Create one ActivityShare
     * const ActivityShare = await prisma.activityShare.create({
     *   data: {
     *     // ... data to create a ActivityShare
     *   }
     * })
     * 
     */
    create<T extends ActivityShareCreateArgs>(args: SelectSubset<T, ActivityShareCreateArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityShares.
     * @param {ActivityShareCreateManyArgs} args - Arguments to create many ActivityShares.
     * @example
     * // Create many ActivityShares
     * const activityShare = await prisma.activityShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityShareCreateManyArgs>(args?: SelectSubset<T, ActivityShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityShares and returns the data saved in the database.
     * @param {ActivityShareCreateManyAndReturnArgs} args - Arguments to create many ActivityShares.
     * @example
     * // Create many ActivityShares
     * const activityShare = await prisma.activityShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityShares and only return the `id`
     * const activityShareWithIdOnly = await prisma.activityShare.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityShareCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityShare.
     * @param {ActivityShareDeleteArgs} args - Arguments to delete one ActivityShare.
     * @example
     * // Delete one ActivityShare
     * const ActivityShare = await prisma.activityShare.delete({
     *   where: {
     *     // ... filter to delete one ActivityShare
     *   }
     * })
     * 
     */
    delete<T extends ActivityShareDeleteArgs>(args: SelectSubset<T, ActivityShareDeleteArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityShare.
     * @param {ActivityShareUpdateArgs} args - Arguments to update one ActivityShare.
     * @example
     * // Update one ActivityShare
     * const activityShare = await prisma.activityShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityShareUpdateArgs>(args: SelectSubset<T, ActivityShareUpdateArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityShares.
     * @param {ActivityShareDeleteManyArgs} args - Arguments to filter ActivityShares to delete.
     * @example
     * // Delete a few ActivityShares
     * const { count } = await prisma.activityShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityShareDeleteManyArgs>(args?: SelectSubset<T, ActivityShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityShares
     * const activityShare = await prisma.activityShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityShareUpdateManyArgs>(args: SelectSubset<T, ActivityShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityShares and returns the data updated in the database.
     * @param {ActivityShareUpdateManyAndReturnArgs} args - Arguments to update many ActivityShares.
     * @example
     * // Update many ActivityShares
     * const activityShare = await prisma.activityShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityShares and only return the `id`
     * const activityShareWithIdOnly = await prisma.activityShare.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityShareUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityShare.
     * @param {ActivityShareUpsertArgs} args - Arguments to update or create a ActivityShare.
     * @example
     * // Update or create a ActivityShare
     * const activityShare = await prisma.activityShare.upsert({
     *   create: {
     *     // ... data to create a ActivityShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityShare we want to update
     *   }
     * })
     */
    upsert<T extends ActivityShareUpsertArgs>(args: SelectSubset<T, ActivityShareUpsertArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareCountArgs} args - Arguments to filter ActivityShares to count.
     * @example
     * // Count the number of ActivityShares
     * const count = await prisma.activityShare.count({
     *   where: {
     *     // ... the filter for the ActivityShares we want to count
     *   }
     * })
    **/
    count<T extends ActivityShareCountArgs>(
      args?: Subset<T, ActivityShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityShareAggregateArgs>(args: Subset<T, ActivityShareAggregateArgs>): Prisma.PrismaPromise<GetActivityShareAggregateType<T>>

    /**
     * Group by ActivityShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityShareGroupByArgs['orderBy'] }
        : { orderBy?: ActivityShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityShare model
   */
  readonly fields: ActivityShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sharedWithUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sharingUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profiles<T extends ActivityShare$profilesArgs<ExtArgs> = {}>(args?: Subset<T, ActivityShare$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityShare model
   */
  interface ActivityShareFieldRefs {
    readonly id: FieldRef<"ActivityShare", 'String'>
    readonly sharingUserId: FieldRef<"ActivityShare", 'String'>
    readonly sharedWithUserId: FieldRef<"ActivityShare", 'String'>
    readonly permissionLevel: FieldRef<"ActivityShare", 'String'>
    readonly expiresAt: FieldRef<"ActivityShare", 'DateTime'>
    readonly isActive: FieldRef<"ActivityShare", 'Boolean'>
    readonly createdAt: FieldRef<"ActivityShare", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivityShare", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityShare findUnique
   */
  export type ActivityShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShare to fetch.
     */
    where: ActivityShareWhereUniqueInput
  }

  /**
   * ActivityShare findUniqueOrThrow
   */
  export type ActivityShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShare to fetch.
     */
    where: ActivityShareWhereUniqueInput
  }

  /**
   * ActivityShare findFirst
   */
  export type ActivityShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShare to fetch.
     */
    where?: ActivityShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShares to fetch.
     */
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityShares.
     */
    cursor?: ActivityShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityShares.
     */
    distinct?: ActivityShareScalarFieldEnum | ActivityShareScalarFieldEnum[]
  }

  /**
   * ActivityShare findFirstOrThrow
   */
  export type ActivityShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShare to fetch.
     */
    where?: ActivityShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShares to fetch.
     */
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityShares.
     */
    cursor?: ActivityShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityShares.
     */
    distinct?: ActivityShareScalarFieldEnum | ActivityShareScalarFieldEnum[]
  }

  /**
   * ActivityShare findMany
   */
  export type ActivityShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShares to fetch.
     */
    where?: ActivityShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShares to fetch.
     */
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityShares.
     */
    cursor?: ActivityShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShares.
     */
    skip?: number
    distinct?: ActivityShareScalarFieldEnum | ActivityShareScalarFieldEnum[]
  }

  /**
   * ActivityShare create
   */
  export type ActivityShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityShare.
     */
    data: XOR<ActivityShareCreateInput, ActivityShareUncheckedCreateInput>
  }

  /**
   * ActivityShare createMany
   */
  export type ActivityShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityShares.
     */
    data: ActivityShareCreateManyInput | ActivityShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityShare createManyAndReturn
   */
  export type ActivityShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityShares.
     */
    data: ActivityShareCreateManyInput | ActivityShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityShare update
   */
  export type ActivityShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityShare.
     */
    data: XOR<ActivityShareUpdateInput, ActivityShareUncheckedUpdateInput>
    /**
     * Choose, which ActivityShare to update.
     */
    where: ActivityShareWhereUniqueInput
  }

  /**
   * ActivityShare updateMany
   */
  export type ActivityShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityShares.
     */
    data: XOR<ActivityShareUpdateManyMutationInput, ActivityShareUncheckedUpdateManyInput>
    /**
     * Filter which ActivityShares to update
     */
    where?: ActivityShareWhereInput
    /**
     * Limit how many ActivityShares to update.
     */
    limit?: number
  }

  /**
   * ActivityShare updateManyAndReturn
   */
  export type ActivityShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * The data used to update ActivityShares.
     */
    data: XOR<ActivityShareUpdateManyMutationInput, ActivityShareUncheckedUpdateManyInput>
    /**
     * Filter which ActivityShares to update
     */
    where?: ActivityShareWhereInput
    /**
     * Limit how many ActivityShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityShare upsert
   */
  export type ActivityShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityShare to update in case it exists.
     */
    where: ActivityShareWhereUniqueInput
    /**
     * In case the ActivityShare found by the `where` argument doesn't exist, create a new ActivityShare with this data.
     */
    create: XOR<ActivityShareCreateInput, ActivityShareUncheckedCreateInput>
    /**
     * In case the ActivityShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityShareUpdateInput, ActivityShareUncheckedUpdateInput>
  }

  /**
   * ActivityShare delete
   */
  export type ActivityShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    /**
     * Filter which ActivityShare to delete.
     */
    where: ActivityShareWhereUniqueInput
  }

  /**
   * ActivityShare deleteMany
   */
  export type ActivityShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityShares to delete
     */
    where?: ActivityShareWhereInput
    /**
     * Limit how many ActivityShares to delete.
     */
    limit?: number
  }

  /**
   * ActivityShare.profiles
   */
  export type ActivityShare$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    where?: ActivityShareProfileWhereInput
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    cursor?: ActivityShareProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityShareProfileScalarFieldEnum | ActivityShareProfileScalarFieldEnum[]
  }

  /**
   * ActivityShare without action
   */
  export type ActivityShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
  }


  /**
   * Model ActivityShareProfile
   */

  export type AggregateActivityShareProfile = {
    _count: ActivityShareProfileCountAggregateOutputType | null
    _min: ActivityShareProfileMinAggregateOutputType | null
    _max: ActivityShareProfileMaxAggregateOutputType | null
  }

  export type ActivityShareProfileMinAggregateOutputType = {
    id: string | null
    activityShareId: string | null
    childId: string | null
    canViewInterested: boolean | null
    canViewRegistered: boolean | null
    canViewCompleted: boolean | null
    canViewNotes: boolean | null
    createdAt: Date | null
  }

  export type ActivityShareProfileMaxAggregateOutputType = {
    id: string | null
    activityShareId: string | null
    childId: string | null
    canViewInterested: boolean | null
    canViewRegistered: boolean | null
    canViewCompleted: boolean | null
    canViewNotes: boolean | null
    createdAt: Date | null
  }

  export type ActivityShareProfileCountAggregateOutputType = {
    id: number
    activityShareId: number
    childId: number
    canViewInterested: number
    canViewRegistered: number
    canViewCompleted: number
    canViewNotes: number
    createdAt: number
    _all: number
  }


  export type ActivityShareProfileMinAggregateInputType = {
    id?: true
    activityShareId?: true
    childId?: true
    canViewInterested?: true
    canViewRegistered?: true
    canViewCompleted?: true
    canViewNotes?: true
    createdAt?: true
  }

  export type ActivityShareProfileMaxAggregateInputType = {
    id?: true
    activityShareId?: true
    childId?: true
    canViewInterested?: true
    canViewRegistered?: true
    canViewCompleted?: true
    canViewNotes?: true
    createdAt?: true
  }

  export type ActivityShareProfileCountAggregateInputType = {
    id?: true
    activityShareId?: true
    childId?: true
    canViewInterested?: true
    canViewRegistered?: true
    canViewCompleted?: true
    canViewNotes?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityShareProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityShareProfile to aggregate.
     */
    where?: ActivityShareProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShareProfiles to fetch.
     */
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityShareProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShareProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShareProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityShareProfiles
    **/
    _count?: true | ActivityShareProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityShareProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityShareProfileMaxAggregateInputType
  }

  export type GetActivityShareProfileAggregateType<T extends ActivityShareProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityShareProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityShareProfile[P]>
      : GetScalarType<T[P], AggregateActivityShareProfile[P]>
  }




  export type ActivityShareProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityShareProfileWhereInput
    orderBy?: ActivityShareProfileOrderByWithAggregationInput | ActivityShareProfileOrderByWithAggregationInput[]
    by: ActivityShareProfileScalarFieldEnum[] | ActivityShareProfileScalarFieldEnum
    having?: ActivityShareProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityShareProfileCountAggregateInputType | true
    _min?: ActivityShareProfileMinAggregateInputType
    _max?: ActivityShareProfileMaxAggregateInputType
  }

  export type ActivityShareProfileGroupByOutputType = {
    id: string
    activityShareId: string
    childId: string
    canViewInterested: boolean
    canViewRegistered: boolean
    canViewCompleted: boolean
    canViewNotes: boolean
    createdAt: Date
    _count: ActivityShareProfileCountAggregateOutputType | null
    _min: ActivityShareProfileMinAggregateOutputType | null
    _max: ActivityShareProfileMaxAggregateOutputType | null
  }

  type GetActivityShareProfileGroupByPayload<T extends ActivityShareProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityShareProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityShareProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityShareProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityShareProfileGroupByOutputType[P]>
        }
      >
    >


  export type ActivityShareProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityShareId?: boolean
    childId?: boolean
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: boolean
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShareProfile"]>

  export type ActivityShareProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityShareId?: boolean
    childId?: boolean
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: boolean
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShareProfile"]>

  export type ActivityShareProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityShareId?: boolean
    childId?: boolean
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: boolean
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityShareProfile"]>

  export type ActivityShareProfileSelectScalar = {
    id?: boolean
    activityShareId?: boolean
    childId?: boolean
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: boolean
  }

  export type ActivityShareProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityShareId" | "childId" | "canViewInterested" | "canViewRegistered" | "canViewCompleted" | "canViewNotes" | "createdAt", ExtArgs["result"]["activityShareProfile"]>
  export type ActivityShareProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ActivityShareProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ActivityShareProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityShare?: boolean | ActivityShareDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }

  export type $ActivityShareProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityShareProfile"
    objects: {
      activityShare: Prisma.$ActivitySharePayload<ExtArgs>
      child: Prisma.$ChildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityShareId: string
      childId: string
      canViewInterested: boolean
      canViewRegistered: boolean
      canViewCompleted: boolean
      canViewNotes: boolean
      createdAt: Date
    }, ExtArgs["result"]["activityShareProfile"]>
    composites: {}
  }

  type ActivityShareProfileGetPayload<S extends boolean | null | undefined | ActivityShareProfileDefaultArgs> = $Result.GetResult<Prisma.$ActivityShareProfilePayload, S>

  type ActivityShareProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityShareProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityShareProfileCountAggregateInputType | true
    }

  export interface ActivityShareProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityShareProfile'], meta: { name: 'ActivityShareProfile' } }
    /**
     * Find zero or one ActivityShareProfile that matches the filter.
     * @param {ActivityShareProfileFindUniqueArgs} args - Arguments to find a ActivityShareProfile
     * @example
     * // Get one ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityShareProfileFindUniqueArgs>(args: SelectSubset<T, ActivityShareProfileFindUniqueArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityShareProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityShareProfileFindUniqueOrThrowArgs} args - Arguments to find a ActivityShareProfile
     * @example
     * // Get one ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityShareProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityShareProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityShareProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileFindFirstArgs} args - Arguments to find a ActivityShareProfile
     * @example
     * // Get one ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityShareProfileFindFirstArgs>(args?: SelectSubset<T, ActivityShareProfileFindFirstArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityShareProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileFindFirstOrThrowArgs} args - Arguments to find a ActivityShareProfile
     * @example
     * // Get one ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityShareProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityShareProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityShareProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityShareProfiles
     * const activityShareProfiles = await prisma.activityShareProfile.findMany()
     * 
     * // Get first 10 ActivityShareProfiles
     * const activityShareProfiles = await prisma.activityShareProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityShareProfileWithIdOnly = await prisma.activityShareProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityShareProfileFindManyArgs>(args?: SelectSubset<T, ActivityShareProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityShareProfile.
     * @param {ActivityShareProfileCreateArgs} args - Arguments to create a ActivityShareProfile.
     * @example
     * // Create one ActivityShareProfile
     * const ActivityShareProfile = await prisma.activityShareProfile.create({
     *   data: {
     *     // ... data to create a ActivityShareProfile
     *   }
     * })
     * 
     */
    create<T extends ActivityShareProfileCreateArgs>(args: SelectSubset<T, ActivityShareProfileCreateArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityShareProfiles.
     * @param {ActivityShareProfileCreateManyArgs} args - Arguments to create many ActivityShareProfiles.
     * @example
     * // Create many ActivityShareProfiles
     * const activityShareProfile = await prisma.activityShareProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityShareProfileCreateManyArgs>(args?: SelectSubset<T, ActivityShareProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityShareProfiles and returns the data saved in the database.
     * @param {ActivityShareProfileCreateManyAndReturnArgs} args - Arguments to create many ActivityShareProfiles.
     * @example
     * // Create many ActivityShareProfiles
     * const activityShareProfile = await prisma.activityShareProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityShareProfiles and only return the `id`
     * const activityShareProfileWithIdOnly = await prisma.activityShareProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityShareProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityShareProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityShareProfile.
     * @param {ActivityShareProfileDeleteArgs} args - Arguments to delete one ActivityShareProfile.
     * @example
     * // Delete one ActivityShareProfile
     * const ActivityShareProfile = await prisma.activityShareProfile.delete({
     *   where: {
     *     // ... filter to delete one ActivityShareProfile
     *   }
     * })
     * 
     */
    delete<T extends ActivityShareProfileDeleteArgs>(args: SelectSubset<T, ActivityShareProfileDeleteArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityShareProfile.
     * @param {ActivityShareProfileUpdateArgs} args - Arguments to update one ActivityShareProfile.
     * @example
     * // Update one ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityShareProfileUpdateArgs>(args: SelectSubset<T, ActivityShareProfileUpdateArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityShareProfiles.
     * @param {ActivityShareProfileDeleteManyArgs} args - Arguments to filter ActivityShareProfiles to delete.
     * @example
     * // Delete a few ActivityShareProfiles
     * const { count } = await prisma.activityShareProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityShareProfileDeleteManyArgs>(args?: SelectSubset<T, ActivityShareProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityShareProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityShareProfiles
     * const activityShareProfile = await prisma.activityShareProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityShareProfileUpdateManyArgs>(args: SelectSubset<T, ActivityShareProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityShareProfiles and returns the data updated in the database.
     * @param {ActivityShareProfileUpdateManyAndReturnArgs} args - Arguments to update many ActivityShareProfiles.
     * @example
     * // Update many ActivityShareProfiles
     * const activityShareProfile = await prisma.activityShareProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityShareProfiles and only return the `id`
     * const activityShareProfileWithIdOnly = await prisma.activityShareProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityShareProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityShareProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityShareProfile.
     * @param {ActivityShareProfileUpsertArgs} args - Arguments to update or create a ActivityShareProfile.
     * @example
     * // Update or create a ActivityShareProfile
     * const activityShareProfile = await prisma.activityShareProfile.upsert({
     *   create: {
     *     // ... data to create a ActivityShareProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityShareProfile we want to update
     *   }
     * })
     */
    upsert<T extends ActivityShareProfileUpsertArgs>(args: SelectSubset<T, ActivityShareProfileUpsertArgs<ExtArgs>>): Prisma__ActivityShareProfileClient<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityShareProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileCountArgs} args - Arguments to filter ActivityShareProfiles to count.
     * @example
     * // Count the number of ActivityShareProfiles
     * const count = await prisma.activityShareProfile.count({
     *   where: {
     *     // ... the filter for the ActivityShareProfiles we want to count
     *   }
     * })
    **/
    count<T extends ActivityShareProfileCountArgs>(
      args?: Subset<T, ActivityShareProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityShareProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityShareProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityShareProfileAggregateArgs>(args: Subset<T, ActivityShareProfileAggregateArgs>): Prisma.PrismaPromise<GetActivityShareProfileAggregateType<T>>

    /**
     * Group by ActivityShareProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityShareProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityShareProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityShareProfileGroupByArgs['orderBy'] }
        : { orderBy?: ActivityShareProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityShareProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityShareProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityShareProfile model
   */
  readonly fields: ActivityShareProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityShareProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityShareProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityShare<T extends ActivityShareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityShareDefaultArgs<ExtArgs>>): Prisma__ActivityShareClient<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityShareProfile model
   */
  interface ActivityShareProfileFieldRefs {
    readonly id: FieldRef<"ActivityShareProfile", 'String'>
    readonly activityShareId: FieldRef<"ActivityShareProfile", 'String'>
    readonly childId: FieldRef<"ActivityShareProfile", 'String'>
    readonly canViewInterested: FieldRef<"ActivityShareProfile", 'Boolean'>
    readonly canViewRegistered: FieldRef<"ActivityShareProfile", 'Boolean'>
    readonly canViewCompleted: FieldRef<"ActivityShareProfile", 'Boolean'>
    readonly canViewNotes: FieldRef<"ActivityShareProfile", 'Boolean'>
    readonly createdAt: FieldRef<"ActivityShareProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityShareProfile findUnique
   */
  export type ActivityShareProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShareProfile to fetch.
     */
    where: ActivityShareProfileWhereUniqueInput
  }

  /**
   * ActivityShareProfile findUniqueOrThrow
   */
  export type ActivityShareProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShareProfile to fetch.
     */
    where: ActivityShareProfileWhereUniqueInput
  }

  /**
   * ActivityShareProfile findFirst
   */
  export type ActivityShareProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShareProfile to fetch.
     */
    where?: ActivityShareProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShareProfiles to fetch.
     */
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityShareProfiles.
     */
    cursor?: ActivityShareProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShareProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShareProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityShareProfiles.
     */
    distinct?: ActivityShareProfileScalarFieldEnum | ActivityShareProfileScalarFieldEnum[]
  }

  /**
   * ActivityShareProfile findFirstOrThrow
   */
  export type ActivityShareProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShareProfile to fetch.
     */
    where?: ActivityShareProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShareProfiles to fetch.
     */
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityShareProfiles.
     */
    cursor?: ActivityShareProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShareProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShareProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityShareProfiles.
     */
    distinct?: ActivityShareProfileScalarFieldEnum | ActivityShareProfileScalarFieldEnum[]
  }

  /**
   * ActivityShareProfile findMany
   */
  export type ActivityShareProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter, which ActivityShareProfiles to fetch.
     */
    where?: ActivityShareProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityShareProfiles to fetch.
     */
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityShareProfiles.
     */
    cursor?: ActivityShareProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityShareProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityShareProfiles.
     */
    skip?: number
    distinct?: ActivityShareProfileScalarFieldEnum | ActivityShareProfileScalarFieldEnum[]
  }

  /**
   * ActivityShareProfile create
   */
  export type ActivityShareProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityShareProfile.
     */
    data: XOR<ActivityShareProfileCreateInput, ActivityShareProfileUncheckedCreateInput>
  }

  /**
   * ActivityShareProfile createMany
   */
  export type ActivityShareProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityShareProfiles.
     */
    data: ActivityShareProfileCreateManyInput | ActivityShareProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityShareProfile createManyAndReturn
   */
  export type ActivityShareProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityShareProfiles.
     */
    data: ActivityShareProfileCreateManyInput | ActivityShareProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityShareProfile update
   */
  export type ActivityShareProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityShareProfile.
     */
    data: XOR<ActivityShareProfileUpdateInput, ActivityShareProfileUncheckedUpdateInput>
    /**
     * Choose, which ActivityShareProfile to update.
     */
    where: ActivityShareProfileWhereUniqueInput
  }

  /**
   * ActivityShareProfile updateMany
   */
  export type ActivityShareProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityShareProfiles.
     */
    data: XOR<ActivityShareProfileUpdateManyMutationInput, ActivityShareProfileUncheckedUpdateManyInput>
    /**
     * Filter which ActivityShareProfiles to update
     */
    where?: ActivityShareProfileWhereInput
    /**
     * Limit how many ActivityShareProfiles to update.
     */
    limit?: number
  }

  /**
   * ActivityShareProfile updateManyAndReturn
   */
  export type ActivityShareProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * The data used to update ActivityShareProfiles.
     */
    data: XOR<ActivityShareProfileUpdateManyMutationInput, ActivityShareProfileUncheckedUpdateManyInput>
    /**
     * Filter which ActivityShareProfiles to update
     */
    where?: ActivityShareProfileWhereInput
    /**
     * Limit how many ActivityShareProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityShareProfile upsert
   */
  export type ActivityShareProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityShareProfile to update in case it exists.
     */
    where: ActivityShareProfileWhereUniqueInput
    /**
     * In case the ActivityShareProfile found by the `where` argument doesn't exist, create a new ActivityShareProfile with this data.
     */
    create: XOR<ActivityShareProfileCreateInput, ActivityShareProfileUncheckedCreateInput>
    /**
     * In case the ActivityShareProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityShareProfileUpdateInput, ActivityShareProfileUncheckedUpdateInput>
  }

  /**
   * ActivityShareProfile delete
   */
  export type ActivityShareProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    /**
     * Filter which ActivityShareProfile to delete.
     */
    where: ActivityShareProfileWhereUniqueInput
  }

  /**
   * ActivityShareProfile deleteMany
   */
  export type ActivityShareProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityShareProfiles to delete
     */
    where?: ActivityShareProfileWhereInput
    /**
     * Limit how many ActivityShareProfiles to delete.
     */
    limit?: number
  }

  /**
   * ActivityShareProfile without action
   */
  export type ActivityShareProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
  }


  /**
   * Model ActivitySubtype
   */

  export type AggregateActivitySubtype = {
    _count: ActivitySubtypeCountAggregateOutputType | null
    _avg: ActivitySubtypeAvgAggregateOutputType | null
    _sum: ActivitySubtypeSumAggregateOutputType | null
    _min: ActivitySubtypeMinAggregateOutputType | null
    _max: ActivitySubtypeMaxAggregateOutputType | null
  }

  export type ActivitySubtypeAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type ActivitySubtypeSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type ActivitySubtypeMinAggregateOutputType = {
    id: string | null
    activityTypeId: string | null
    code: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayOrder: number | null
  }

  export type ActivitySubtypeMaxAggregateOutputType = {
    id: string | null
    activityTypeId: string | null
    code: string | null
    name: string | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayOrder: number | null
  }

  export type ActivitySubtypeCountAggregateOutputType = {
    id: number
    activityTypeId: number
    code: number
    name: number
    description: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    displayOrder: number
    _all: number
  }


  export type ActivitySubtypeAvgAggregateInputType = {
    displayOrder?: true
  }

  export type ActivitySubtypeSumAggregateInputType = {
    displayOrder?: true
  }

  export type ActivitySubtypeMinAggregateInputType = {
    id?: true
    activityTypeId?: true
    code?: true
    name?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
  }

  export type ActivitySubtypeMaxAggregateInputType = {
    id?: true
    activityTypeId?: true
    code?: true
    name?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
  }

  export type ActivitySubtypeCountAggregateInputType = {
    id?: true
    activityTypeId?: true
    code?: true
    name?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    displayOrder?: true
    _all?: true
  }

  export type ActivitySubtypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivitySubtype to aggregate.
     */
    where?: ActivitySubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySubtypes to fetch.
     */
    orderBy?: ActivitySubtypeOrderByWithRelationInput | ActivitySubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivitySubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivitySubtypes
    **/
    _count?: true | ActivitySubtypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivitySubtypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySubtypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivitySubtypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivitySubtypeMaxAggregateInputType
  }

  export type GetActivitySubtypeAggregateType<T extends ActivitySubtypeAggregateArgs> = {
        [P in keyof T & keyof AggregateActivitySubtype]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivitySubtype[P]>
      : GetScalarType<T[P], AggregateActivitySubtype[P]>
  }




  export type ActivitySubtypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivitySubtypeWhereInput
    orderBy?: ActivitySubtypeOrderByWithAggregationInput | ActivitySubtypeOrderByWithAggregationInput[]
    by: ActivitySubtypeScalarFieldEnum[] | ActivitySubtypeScalarFieldEnum
    having?: ActivitySubtypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivitySubtypeCountAggregateInputType | true
    _avg?: ActivitySubtypeAvgAggregateInputType
    _sum?: ActivitySubtypeSumAggregateInputType
    _min?: ActivitySubtypeMinAggregateInputType
    _max?: ActivitySubtypeMaxAggregateInputType
  }

  export type ActivitySubtypeGroupByOutputType = {
    id: string
    activityTypeId: string
    code: string
    name: string
    description: string | null
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    displayOrder: number
    _count: ActivitySubtypeCountAggregateOutputType | null
    _avg: ActivitySubtypeAvgAggregateOutputType | null
    _sum: ActivitySubtypeSumAggregateOutputType | null
    _min: ActivitySubtypeMinAggregateOutputType | null
    _max: ActivitySubtypeMaxAggregateOutputType | null
  }

  type GetActivitySubtypeGroupByPayload<T extends ActivitySubtypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivitySubtypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivitySubtypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivitySubtypeGroupByOutputType[P]>
            : GetScalarType<T[P], ActivitySubtypeGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySubtypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityTypeId?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    activities?: boolean | ActivitySubtype$activitiesArgs<ExtArgs>
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
    _count?: boolean | ActivitySubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySubtype"]>

  export type ActivitySubtypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityTypeId?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySubtype"]>

  export type ActivitySubtypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityTypeId?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activitySubtype"]>

  export type ActivitySubtypeSelectScalar = {
    id?: boolean
    activityTypeId?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayOrder?: boolean
  }

  export type ActivitySubtypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityTypeId" | "code" | "name" | "description" | "imageUrl" | "createdAt" | "updatedAt" | "displayOrder", ExtArgs["result"]["activitySubtype"]>
  export type ActivitySubtypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ActivitySubtype$activitiesArgs<ExtArgs>
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
    _count?: boolean | ActivitySubtypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivitySubtypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
  }
  export type ActivitySubtypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityType?: boolean | ActivityTypeDefaultArgs<ExtArgs>
  }

  export type $ActivitySubtypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivitySubtype"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      activityType: Prisma.$ActivityTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityTypeId: string
      code: string
      name: string
      description: string | null
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      displayOrder: number
    }, ExtArgs["result"]["activitySubtype"]>
    composites: {}
  }

  type ActivitySubtypeGetPayload<S extends boolean | null | undefined | ActivitySubtypeDefaultArgs> = $Result.GetResult<Prisma.$ActivitySubtypePayload, S>

  type ActivitySubtypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivitySubtypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivitySubtypeCountAggregateInputType | true
    }

  export interface ActivitySubtypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivitySubtype'], meta: { name: 'ActivitySubtype' } }
    /**
     * Find zero or one ActivitySubtype that matches the filter.
     * @param {ActivitySubtypeFindUniqueArgs} args - Arguments to find a ActivitySubtype
     * @example
     * // Get one ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivitySubtypeFindUniqueArgs>(args: SelectSubset<T, ActivitySubtypeFindUniqueArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivitySubtype that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivitySubtypeFindUniqueOrThrowArgs} args - Arguments to find a ActivitySubtype
     * @example
     * // Get one ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivitySubtypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivitySubtypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivitySubtype that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeFindFirstArgs} args - Arguments to find a ActivitySubtype
     * @example
     * // Get one ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivitySubtypeFindFirstArgs>(args?: SelectSubset<T, ActivitySubtypeFindFirstArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivitySubtype that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeFindFirstOrThrowArgs} args - Arguments to find a ActivitySubtype
     * @example
     * // Get one ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivitySubtypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivitySubtypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivitySubtypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivitySubtypes
     * const activitySubtypes = await prisma.activitySubtype.findMany()
     * 
     * // Get first 10 ActivitySubtypes
     * const activitySubtypes = await prisma.activitySubtype.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activitySubtypeWithIdOnly = await prisma.activitySubtype.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivitySubtypeFindManyArgs>(args?: SelectSubset<T, ActivitySubtypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivitySubtype.
     * @param {ActivitySubtypeCreateArgs} args - Arguments to create a ActivitySubtype.
     * @example
     * // Create one ActivitySubtype
     * const ActivitySubtype = await prisma.activitySubtype.create({
     *   data: {
     *     // ... data to create a ActivitySubtype
     *   }
     * })
     * 
     */
    create<T extends ActivitySubtypeCreateArgs>(args: SelectSubset<T, ActivitySubtypeCreateArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivitySubtypes.
     * @param {ActivitySubtypeCreateManyArgs} args - Arguments to create many ActivitySubtypes.
     * @example
     * // Create many ActivitySubtypes
     * const activitySubtype = await prisma.activitySubtype.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivitySubtypeCreateManyArgs>(args?: SelectSubset<T, ActivitySubtypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivitySubtypes and returns the data saved in the database.
     * @param {ActivitySubtypeCreateManyAndReturnArgs} args - Arguments to create many ActivitySubtypes.
     * @example
     * // Create many ActivitySubtypes
     * const activitySubtype = await prisma.activitySubtype.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivitySubtypes and only return the `id`
     * const activitySubtypeWithIdOnly = await prisma.activitySubtype.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivitySubtypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivitySubtypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivitySubtype.
     * @param {ActivitySubtypeDeleteArgs} args - Arguments to delete one ActivitySubtype.
     * @example
     * // Delete one ActivitySubtype
     * const ActivitySubtype = await prisma.activitySubtype.delete({
     *   where: {
     *     // ... filter to delete one ActivitySubtype
     *   }
     * })
     * 
     */
    delete<T extends ActivitySubtypeDeleteArgs>(args: SelectSubset<T, ActivitySubtypeDeleteArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivitySubtype.
     * @param {ActivitySubtypeUpdateArgs} args - Arguments to update one ActivitySubtype.
     * @example
     * // Update one ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivitySubtypeUpdateArgs>(args: SelectSubset<T, ActivitySubtypeUpdateArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivitySubtypes.
     * @param {ActivitySubtypeDeleteManyArgs} args - Arguments to filter ActivitySubtypes to delete.
     * @example
     * // Delete a few ActivitySubtypes
     * const { count } = await prisma.activitySubtype.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivitySubtypeDeleteManyArgs>(args?: SelectSubset<T, ActivitySubtypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivitySubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivitySubtypes
     * const activitySubtype = await prisma.activitySubtype.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivitySubtypeUpdateManyArgs>(args: SelectSubset<T, ActivitySubtypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivitySubtypes and returns the data updated in the database.
     * @param {ActivitySubtypeUpdateManyAndReturnArgs} args - Arguments to update many ActivitySubtypes.
     * @example
     * // Update many ActivitySubtypes
     * const activitySubtype = await prisma.activitySubtype.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivitySubtypes and only return the `id`
     * const activitySubtypeWithIdOnly = await prisma.activitySubtype.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivitySubtypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivitySubtypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivitySubtype.
     * @param {ActivitySubtypeUpsertArgs} args - Arguments to update or create a ActivitySubtype.
     * @example
     * // Update or create a ActivitySubtype
     * const activitySubtype = await prisma.activitySubtype.upsert({
     *   create: {
     *     // ... data to create a ActivitySubtype
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivitySubtype we want to update
     *   }
     * })
     */
    upsert<T extends ActivitySubtypeUpsertArgs>(args: SelectSubset<T, ActivitySubtypeUpsertArgs<ExtArgs>>): Prisma__ActivitySubtypeClient<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivitySubtypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeCountArgs} args - Arguments to filter ActivitySubtypes to count.
     * @example
     * // Count the number of ActivitySubtypes
     * const count = await prisma.activitySubtype.count({
     *   where: {
     *     // ... the filter for the ActivitySubtypes we want to count
     *   }
     * })
    **/
    count<T extends ActivitySubtypeCountArgs>(
      args?: Subset<T, ActivitySubtypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivitySubtypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivitySubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivitySubtypeAggregateArgs>(args: Subset<T, ActivitySubtypeAggregateArgs>): Prisma.PrismaPromise<GetActivitySubtypeAggregateType<T>>

    /**
     * Group by ActivitySubtype.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivitySubtypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivitySubtypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivitySubtypeGroupByArgs['orderBy'] }
        : { orderBy?: ActivitySubtypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivitySubtypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivitySubtypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivitySubtype model
   */
  readonly fields: ActivitySubtypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivitySubtype.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivitySubtypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends ActivitySubtype$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, ActivitySubtype$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityType<T extends ActivityTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityTypeDefaultArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivitySubtype model
   */
  interface ActivitySubtypeFieldRefs {
    readonly id: FieldRef<"ActivitySubtype", 'String'>
    readonly activityTypeId: FieldRef<"ActivitySubtype", 'String'>
    readonly code: FieldRef<"ActivitySubtype", 'String'>
    readonly name: FieldRef<"ActivitySubtype", 'String'>
    readonly description: FieldRef<"ActivitySubtype", 'String'>
    readonly imageUrl: FieldRef<"ActivitySubtype", 'String'>
    readonly createdAt: FieldRef<"ActivitySubtype", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivitySubtype", 'DateTime'>
    readonly displayOrder: FieldRef<"ActivitySubtype", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ActivitySubtype findUnique
   */
  export type ActivitySubtypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySubtype to fetch.
     */
    where: ActivitySubtypeWhereUniqueInput
  }

  /**
   * ActivitySubtype findUniqueOrThrow
   */
  export type ActivitySubtypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySubtype to fetch.
     */
    where: ActivitySubtypeWhereUniqueInput
  }

  /**
   * ActivitySubtype findFirst
   */
  export type ActivitySubtypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySubtype to fetch.
     */
    where?: ActivitySubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySubtypes to fetch.
     */
    orderBy?: ActivitySubtypeOrderByWithRelationInput | ActivitySubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivitySubtypes.
     */
    cursor?: ActivitySubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivitySubtypes.
     */
    distinct?: ActivitySubtypeScalarFieldEnum | ActivitySubtypeScalarFieldEnum[]
  }

  /**
   * ActivitySubtype findFirstOrThrow
   */
  export type ActivitySubtypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySubtype to fetch.
     */
    where?: ActivitySubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySubtypes to fetch.
     */
    orderBy?: ActivitySubtypeOrderByWithRelationInput | ActivitySubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivitySubtypes.
     */
    cursor?: ActivitySubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySubtypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivitySubtypes.
     */
    distinct?: ActivitySubtypeScalarFieldEnum | ActivitySubtypeScalarFieldEnum[]
  }

  /**
   * ActivitySubtype findMany
   */
  export type ActivitySubtypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivitySubtypes to fetch.
     */
    where?: ActivitySubtypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivitySubtypes to fetch.
     */
    orderBy?: ActivitySubtypeOrderByWithRelationInput | ActivitySubtypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivitySubtypes.
     */
    cursor?: ActivitySubtypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivitySubtypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivitySubtypes.
     */
    skip?: number
    distinct?: ActivitySubtypeScalarFieldEnum | ActivitySubtypeScalarFieldEnum[]
  }

  /**
   * ActivitySubtype create
   */
  export type ActivitySubtypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivitySubtype.
     */
    data: XOR<ActivitySubtypeCreateInput, ActivitySubtypeUncheckedCreateInput>
  }

  /**
   * ActivitySubtype createMany
   */
  export type ActivitySubtypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivitySubtypes.
     */
    data: ActivitySubtypeCreateManyInput | ActivitySubtypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivitySubtype createManyAndReturn
   */
  export type ActivitySubtypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * The data used to create many ActivitySubtypes.
     */
    data: ActivitySubtypeCreateManyInput | ActivitySubtypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivitySubtype update
   */
  export type ActivitySubtypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivitySubtype.
     */
    data: XOR<ActivitySubtypeUpdateInput, ActivitySubtypeUncheckedUpdateInput>
    /**
     * Choose, which ActivitySubtype to update.
     */
    where: ActivitySubtypeWhereUniqueInput
  }

  /**
   * ActivitySubtype updateMany
   */
  export type ActivitySubtypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivitySubtypes.
     */
    data: XOR<ActivitySubtypeUpdateManyMutationInput, ActivitySubtypeUncheckedUpdateManyInput>
    /**
     * Filter which ActivitySubtypes to update
     */
    where?: ActivitySubtypeWhereInput
    /**
     * Limit how many ActivitySubtypes to update.
     */
    limit?: number
  }

  /**
   * ActivitySubtype updateManyAndReturn
   */
  export type ActivitySubtypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * The data used to update ActivitySubtypes.
     */
    data: XOR<ActivitySubtypeUpdateManyMutationInput, ActivitySubtypeUncheckedUpdateManyInput>
    /**
     * Filter which ActivitySubtypes to update
     */
    where?: ActivitySubtypeWhereInput
    /**
     * Limit how many ActivitySubtypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivitySubtype upsert
   */
  export type ActivitySubtypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivitySubtype to update in case it exists.
     */
    where: ActivitySubtypeWhereUniqueInput
    /**
     * In case the ActivitySubtype found by the `where` argument doesn't exist, create a new ActivitySubtype with this data.
     */
    create: XOR<ActivitySubtypeCreateInput, ActivitySubtypeUncheckedCreateInput>
    /**
     * In case the ActivitySubtype was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivitySubtypeUpdateInput, ActivitySubtypeUncheckedUpdateInput>
  }

  /**
   * ActivitySubtype delete
   */
  export type ActivitySubtypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    /**
     * Filter which ActivitySubtype to delete.
     */
    where: ActivitySubtypeWhereUniqueInput
  }

  /**
   * ActivitySubtype deleteMany
   */
  export type ActivitySubtypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivitySubtypes to delete
     */
    where?: ActivitySubtypeWhereInput
    /**
     * Limit how many ActivitySubtypes to delete.
     */
    limit?: number
  }

  /**
   * ActivitySubtype.activities
   */
  export type ActivitySubtype$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * ActivitySubtype without action
   */
  export type ActivitySubtypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
  }


  /**
   * Model ActivityType
   */

  export type AggregateActivityType = {
    _count: ActivityTypeCountAggregateOutputType | null
    _avg: ActivityTypeAvgAggregateOutputType | null
    _sum: ActivityTypeSumAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  export type ActivityTypeAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type ActivityTypeSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type ActivityTypeMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    iconName: string | null
    imageUrl: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityTypeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    iconName: string | null
    imageUrl: string | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ActivityTypeCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    iconName: number
    imageUrl: number
    displayOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ActivityTypeAvgAggregateInputType = {
    displayOrder?: true
  }

  export type ActivityTypeSumAggregateInputType = {
    displayOrder?: true
  }

  export type ActivityTypeMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    iconName?: true
    imageUrl?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityTypeMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    iconName?: true
    imageUrl?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ActivityTypeCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    iconName?: true
    imageUrl?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ActivityTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityType to aggregate.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityTypes
    **/
    _count?: true | ActivityTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityTypeMaxAggregateInputType
  }

  export type GetActivityTypeAggregateType<T extends ActivityTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityType[P]>
      : GetScalarType<T[P], AggregateActivityType[P]>
  }




  export type ActivityTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityTypeWhereInput
    orderBy?: ActivityTypeOrderByWithAggregationInput | ActivityTypeOrderByWithAggregationInput[]
    by: ActivityTypeScalarFieldEnum[] | ActivityTypeScalarFieldEnum
    having?: ActivityTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityTypeCountAggregateInputType | true
    _avg?: ActivityTypeAvgAggregateInputType
    _sum?: ActivityTypeSumAggregateInputType
    _min?: ActivityTypeMinAggregateInputType
    _max?: ActivityTypeMaxAggregateInputType
  }

  export type ActivityTypeGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    iconName: string | null
    imageUrl: string | null
    displayOrder: number
    createdAt: Date
    updatedAt: Date
    _count: ActivityTypeCountAggregateOutputType | null
    _avg: ActivityTypeAvgAggregateOutputType | null
    _sum: ActivityTypeSumAggregateOutputType | null
    _min: ActivityTypeMinAggregateOutputType | null
    _max: ActivityTypeMaxAggregateOutputType | null
  }

  type GetActivityTypeGroupByPayload<T extends ActivityTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityTypeGroupByOutputType[P]>
        }
      >
    >


  export type ActivityTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    imageUrl?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activities?: boolean | ActivityType$activitiesArgs<ExtArgs>
    subtypes?: boolean | ActivityType$subtypesArgs<ExtArgs>
    _count?: boolean | ActivityTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityType"]>

  export type ActivityTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    imageUrl?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["activityType"]>

  export type ActivityTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    imageUrl?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["activityType"]>

  export type ActivityTypeSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    iconName?: boolean
    imageUrl?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ActivityTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "description" | "iconName" | "imageUrl" | "displayOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["activityType"]>
  export type ActivityTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | ActivityType$activitiesArgs<ExtArgs>
    subtypes?: boolean | ActivityType$subtypesArgs<ExtArgs>
    _count?: boolean | ActivityTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ActivityTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ActivityTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityType"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      subtypes: Prisma.$ActivitySubtypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      iconName: string | null
      imageUrl: string | null
      displayOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["activityType"]>
    composites: {}
  }

  type ActivityTypeGetPayload<S extends boolean | null | undefined | ActivityTypeDefaultArgs> = $Result.GetResult<Prisma.$ActivityTypePayload, S>

  type ActivityTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityTypeCountAggregateInputType | true
    }

  export interface ActivityTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityType'], meta: { name: 'ActivityType' } }
    /**
     * Find zero or one ActivityType that matches the filter.
     * @param {ActivityTypeFindUniqueArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityTypeFindUniqueArgs>(args: SelectSubset<T, ActivityTypeFindUniqueArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityTypeFindUniqueOrThrowArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindFirstArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityTypeFindFirstArgs>(args?: SelectSubset<T, ActivityTypeFindFirstArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindFirstOrThrowArgs} args - Arguments to find a ActivityType
     * @example
     * // Get one ActivityType
     * const activityType = await prisma.activityType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityTypes
     * const activityTypes = await prisma.activityType.findMany()
     * 
     * // Get first 10 ActivityTypes
     * const activityTypes = await prisma.activityType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityTypeWithIdOnly = await prisma.activityType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityTypeFindManyArgs>(args?: SelectSubset<T, ActivityTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityType.
     * @param {ActivityTypeCreateArgs} args - Arguments to create a ActivityType.
     * @example
     * // Create one ActivityType
     * const ActivityType = await prisma.activityType.create({
     *   data: {
     *     // ... data to create a ActivityType
     *   }
     * })
     * 
     */
    create<T extends ActivityTypeCreateArgs>(args: SelectSubset<T, ActivityTypeCreateArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityTypes.
     * @param {ActivityTypeCreateManyArgs} args - Arguments to create many ActivityTypes.
     * @example
     * // Create many ActivityTypes
     * const activityType = await prisma.activityType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityTypeCreateManyArgs>(args?: SelectSubset<T, ActivityTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityTypes and returns the data saved in the database.
     * @param {ActivityTypeCreateManyAndReturnArgs} args - Arguments to create many ActivityTypes.
     * @example
     * // Create many ActivityTypes
     * const activityType = await prisma.activityType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityTypes and only return the `id`
     * const activityTypeWithIdOnly = await prisma.activityType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityType.
     * @param {ActivityTypeDeleteArgs} args - Arguments to delete one ActivityType.
     * @example
     * // Delete one ActivityType
     * const ActivityType = await prisma.activityType.delete({
     *   where: {
     *     // ... filter to delete one ActivityType
     *   }
     * })
     * 
     */
    delete<T extends ActivityTypeDeleteArgs>(args: SelectSubset<T, ActivityTypeDeleteArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityType.
     * @param {ActivityTypeUpdateArgs} args - Arguments to update one ActivityType.
     * @example
     * // Update one ActivityType
     * const activityType = await prisma.activityType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityTypeUpdateArgs>(args: SelectSubset<T, ActivityTypeUpdateArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityTypes.
     * @param {ActivityTypeDeleteManyArgs} args - Arguments to filter ActivityTypes to delete.
     * @example
     * // Delete a few ActivityTypes
     * const { count } = await prisma.activityType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityTypeDeleteManyArgs>(args?: SelectSubset<T, ActivityTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityTypes
     * const activityType = await prisma.activityType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityTypeUpdateManyArgs>(args: SelectSubset<T, ActivityTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityTypes and returns the data updated in the database.
     * @param {ActivityTypeUpdateManyAndReturnArgs} args - Arguments to update many ActivityTypes.
     * @example
     * // Update many ActivityTypes
     * const activityType = await prisma.activityType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityTypes and only return the `id`
     * const activityTypeWithIdOnly = await prisma.activityType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityType.
     * @param {ActivityTypeUpsertArgs} args - Arguments to update or create a ActivityType.
     * @example
     * // Update or create a ActivityType
     * const activityType = await prisma.activityType.upsert({
     *   create: {
     *     // ... data to create a ActivityType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityType we want to update
     *   }
     * })
     */
    upsert<T extends ActivityTypeUpsertArgs>(args: SelectSubset<T, ActivityTypeUpsertArgs<ExtArgs>>): Prisma__ActivityTypeClient<$Result.GetResult<Prisma.$ActivityTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeCountArgs} args - Arguments to filter ActivityTypes to count.
     * @example
     * // Count the number of ActivityTypes
     * const count = await prisma.activityType.count({
     *   where: {
     *     // ... the filter for the ActivityTypes we want to count
     *   }
     * })
    **/
    count<T extends ActivityTypeCountArgs>(
      args?: Subset<T, ActivityTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityTypeAggregateArgs>(args: Subset<T, ActivityTypeAggregateArgs>): Prisma.PrismaPromise<GetActivityTypeAggregateType<T>>

    /**
     * Group by ActivityType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityTypeGroupByArgs['orderBy'] }
        : { orderBy?: ActivityTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityType model
   */
  readonly fields: ActivityTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends ActivityType$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, ActivityType$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subtypes<T extends ActivityType$subtypesArgs<ExtArgs> = {}>(args?: Subset<T, ActivityType$subtypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySubtypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityType model
   */
  interface ActivityTypeFieldRefs {
    readonly id: FieldRef<"ActivityType", 'String'>
    readonly code: FieldRef<"ActivityType", 'String'>
    readonly name: FieldRef<"ActivityType", 'String'>
    readonly description: FieldRef<"ActivityType", 'String'>
    readonly iconName: FieldRef<"ActivityType", 'String'>
    readonly imageUrl: FieldRef<"ActivityType", 'String'>
    readonly displayOrder: FieldRef<"ActivityType", 'Int'>
    readonly createdAt: FieldRef<"ActivityType", 'DateTime'>
    readonly updatedAt: FieldRef<"ActivityType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityType findUnique
   */
  export type ActivityTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where: ActivityTypeWhereUniqueInput
  }

  /**
   * ActivityType findUniqueOrThrow
   */
  export type ActivityTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where: ActivityTypeWhereUniqueInput
  }

  /**
   * ActivityType findFirst
   */
  export type ActivityTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityTypes.
     */
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }

  /**
   * ActivityType findFirstOrThrow
   */
  export type ActivityTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityType to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityTypes.
     */
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }

  /**
   * ActivityType findMany
   */
  export type ActivityTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter, which ActivityTypes to fetch.
     */
    where?: ActivityTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityTypes to fetch.
     */
    orderBy?: ActivityTypeOrderByWithRelationInput | ActivityTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityTypes.
     */
    cursor?: ActivityTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityTypes.
     */
    skip?: number
    distinct?: ActivityTypeScalarFieldEnum | ActivityTypeScalarFieldEnum[]
  }

  /**
   * ActivityType create
   */
  export type ActivityTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityType.
     */
    data: XOR<ActivityTypeCreateInput, ActivityTypeUncheckedCreateInput>
  }

  /**
   * ActivityType createMany
   */
  export type ActivityTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityTypes.
     */
    data: ActivityTypeCreateManyInput | ActivityTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityType createManyAndReturn
   */
  export type ActivityTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityTypes.
     */
    data: ActivityTypeCreateManyInput | ActivityTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityType update
   */
  export type ActivityTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityType.
     */
    data: XOR<ActivityTypeUpdateInput, ActivityTypeUncheckedUpdateInput>
    /**
     * Choose, which ActivityType to update.
     */
    where: ActivityTypeWhereUniqueInput
  }

  /**
   * ActivityType updateMany
   */
  export type ActivityTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityTypes.
     */
    data: XOR<ActivityTypeUpdateManyMutationInput, ActivityTypeUncheckedUpdateManyInput>
    /**
     * Filter which ActivityTypes to update
     */
    where?: ActivityTypeWhereInput
    /**
     * Limit how many ActivityTypes to update.
     */
    limit?: number
  }

  /**
   * ActivityType updateManyAndReturn
   */
  export type ActivityTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * The data used to update ActivityTypes.
     */
    data: XOR<ActivityTypeUpdateManyMutationInput, ActivityTypeUncheckedUpdateManyInput>
    /**
     * Filter which ActivityTypes to update
     */
    where?: ActivityTypeWhereInput
    /**
     * Limit how many ActivityTypes to update.
     */
    limit?: number
  }

  /**
   * ActivityType upsert
   */
  export type ActivityTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityType to update in case it exists.
     */
    where: ActivityTypeWhereUniqueInput
    /**
     * In case the ActivityType found by the `where` argument doesn't exist, create a new ActivityType with this data.
     */
    create: XOR<ActivityTypeCreateInput, ActivityTypeUncheckedCreateInput>
    /**
     * In case the ActivityType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityTypeUpdateInput, ActivityTypeUncheckedUpdateInput>
  }

  /**
   * ActivityType delete
   */
  export type ActivityTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
    /**
     * Filter which ActivityType to delete.
     */
    where: ActivityTypeWhereUniqueInput
  }

  /**
   * ActivityType deleteMany
   */
  export type ActivityTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityTypes to delete
     */
    where?: ActivityTypeWhereInput
    /**
     * Limit how many ActivityTypes to delete.
     */
    limit?: number
  }

  /**
   * ActivityType.activities
   */
  export type ActivityType$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * ActivityType.subtypes
   */
  export type ActivityType$subtypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivitySubtype
     */
    select?: ActivitySubtypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivitySubtype
     */
    omit?: ActivitySubtypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivitySubtypeInclude<ExtArgs> | null
    where?: ActivitySubtypeWhereInput
    orderBy?: ActivitySubtypeOrderByWithRelationInput | ActivitySubtypeOrderByWithRelationInput[]
    cursor?: ActivitySubtypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivitySubtypeScalarFieldEnum | ActivitySubtypeScalarFieldEnum[]
  }

  /**
   * ActivityType without action
   */
  export type ActivityTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityType
     */
    select?: ActivityTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityType
     */
    omit?: ActivityTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityTypeInclude<ExtArgs> | null
  }


  /**
   * Model Child
   */

  export type AggregateChild = {
    _count: ChildCountAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  export type ChildMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    dateOfBirth: Date | null
    gender: string | null
    avatarUrl: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    dateOfBirth: Date | null
    gender: string | null
    avatarUrl: string | null
    notes: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    dateOfBirth: number
    gender: number
    avatarUrl: number
    interests: number
    notes: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChildMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dateOfBirth?: true
    gender?: true
    avatarUrl?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dateOfBirth?: true
    gender?: true
    avatarUrl?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dateOfBirth?: true
    gender?: true
    avatarUrl?: true
    interests?: true
    notes?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChildAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Child to aggregate.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Children
    **/
    _count?: true | ChildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildMaxAggregateInputType
  }

  export type GetChildAggregateType<T extends ChildAggregateArgs> = {
        [P in keyof T & keyof AggregateChild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChild[P]>
      : GetScalarType<T[P], AggregateChild[P]>
  }




  export type ChildGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildWhereInput
    orderBy?: ChildOrderByWithAggregationInput | ChildOrderByWithAggregationInput[]
    by: ChildScalarFieldEnum[] | ChildScalarFieldEnum
    having?: ChildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildCountAggregateInputType | true
    _min?: ChildMinAggregateInputType
    _max?: ChildMaxAggregateInputType
  }

  export type ChildGroupByOutputType = {
    id: string
    userId: string
    name: string
    dateOfBirth: Date
    gender: string | null
    avatarUrl: string | null
    interests: string[]
    notes: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ChildCountAggregateOutputType | null
    _min: ChildMinAggregateOutputType | null
    _max: ChildMaxAggregateOutputType | null
  }

  type GetChildGroupByPayload<T extends ChildGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildGroupByOutputType[P]>
            : GetScalarType<T[P], ChildGroupByOutputType[P]>
        }
      >
    >


  export type ChildSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    avatarUrl?: boolean
    interests?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profiles?: boolean | Child$profilesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    childActivities?: boolean | Child$childActivitiesArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["child"]>

  export type ChildSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    avatarUrl?: boolean
    interests?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["child"]>

  export type ChildSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    avatarUrl?: boolean
    interests?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["child"]>

  export type ChildSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    avatarUrl?: boolean
    interests?: boolean
    notes?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChildOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "dateOfBirth" | "gender" | "avatarUrl" | "interests" | "notes" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["child"]>
  export type ChildInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profiles?: boolean | Child$profilesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    childActivities?: boolean | Child$childActivitiesArgs<ExtArgs>
    _count?: boolean | ChildCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChildIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChildIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChildPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Child"
    objects: {
      profiles: Prisma.$ActivityShareProfilePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      childActivities: Prisma.$ChildActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      dateOfBirth: Date
      gender: string | null
      avatarUrl: string | null
      interests: string[]
      notes: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["child"]>
    composites: {}
  }

  type ChildGetPayload<S extends boolean | null | undefined | ChildDefaultArgs> = $Result.GetResult<Prisma.$ChildPayload, S>

  type ChildCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChildFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChildCountAggregateInputType | true
    }

  export interface ChildDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Child'], meta: { name: 'Child' } }
    /**
     * Find zero or one Child that matches the filter.
     * @param {ChildFindUniqueArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChildFindUniqueArgs>(args: SelectSubset<T, ChildFindUniqueArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Child that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChildFindUniqueOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChildFindUniqueOrThrowArgs>(args: SelectSubset<T, ChildFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChildFindFirstArgs>(args?: SelectSubset<T, ChildFindFirstArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Child that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindFirstOrThrowArgs} args - Arguments to find a Child
     * @example
     * // Get one Child
     * const child = await prisma.child.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChildFindFirstOrThrowArgs>(args?: SelectSubset<T, ChildFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Children that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Children
     * const children = await prisma.child.findMany()
     * 
     * // Get first 10 Children
     * const children = await prisma.child.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childWithIdOnly = await prisma.child.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChildFindManyArgs>(args?: SelectSubset<T, ChildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Child.
     * @param {ChildCreateArgs} args - Arguments to create a Child.
     * @example
     * // Create one Child
     * const Child = await prisma.child.create({
     *   data: {
     *     // ... data to create a Child
     *   }
     * })
     * 
     */
    create<T extends ChildCreateArgs>(args: SelectSubset<T, ChildCreateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Children.
     * @param {ChildCreateManyArgs} args - Arguments to create many Children.
     * @example
     * // Create many Children
     * const child = await prisma.child.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChildCreateManyArgs>(args?: SelectSubset<T, ChildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Children and returns the data saved in the database.
     * @param {ChildCreateManyAndReturnArgs} args - Arguments to create many Children.
     * @example
     * // Create many Children
     * const child = await prisma.child.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Children and only return the `id`
     * const childWithIdOnly = await prisma.child.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChildCreateManyAndReturnArgs>(args?: SelectSubset<T, ChildCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Child.
     * @param {ChildDeleteArgs} args - Arguments to delete one Child.
     * @example
     * // Delete one Child
     * const Child = await prisma.child.delete({
     *   where: {
     *     // ... filter to delete one Child
     *   }
     * })
     * 
     */
    delete<T extends ChildDeleteArgs>(args: SelectSubset<T, ChildDeleteArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Child.
     * @param {ChildUpdateArgs} args - Arguments to update one Child.
     * @example
     * // Update one Child
     * const child = await prisma.child.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChildUpdateArgs>(args: SelectSubset<T, ChildUpdateArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Children.
     * @param {ChildDeleteManyArgs} args - Arguments to filter Children to delete.
     * @example
     * // Delete a few Children
     * const { count } = await prisma.child.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChildDeleteManyArgs>(args?: SelectSubset<T, ChildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Children
     * const child = await prisma.child.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChildUpdateManyArgs>(args: SelectSubset<T, ChildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Children and returns the data updated in the database.
     * @param {ChildUpdateManyAndReturnArgs} args - Arguments to update many Children.
     * @example
     * // Update many Children
     * const child = await prisma.child.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Children and only return the `id`
     * const childWithIdOnly = await prisma.child.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChildUpdateManyAndReturnArgs>(args: SelectSubset<T, ChildUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Child.
     * @param {ChildUpsertArgs} args - Arguments to update or create a Child.
     * @example
     * // Update or create a Child
     * const child = await prisma.child.upsert({
     *   create: {
     *     // ... data to create a Child
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Child we want to update
     *   }
     * })
     */
    upsert<T extends ChildUpsertArgs>(args: SelectSubset<T, ChildUpsertArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Children.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildCountArgs} args - Arguments to filter Children to count.
     * @example
     * // Count the number of Children
     * const count = await prisma.child.count({
     *   where: {
     *     // ... the filter for the Children we want to count
     *   }
     * })
    **/
    count<T extends ChildCountArgs>(
      args?: Subset<T, ChildCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildAggregateArgs>(args: Subset<T, ChildAggregateArgs>): Prisma.PrismaPromise<GetChildAggregateType<T>>

    /**
     * Group by Child.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildGroupByArgs['orderBy'] }
        : { orderBy?: ChildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Child model
   */
  readonly fields: ChildFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Child.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChildClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profiles<T extends Child$profilesArgs<ExtArgs> = {}>(args?: Subset<T, Child$profilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityShareProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    childActivities<T extends Child$childActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Child$childActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Child model
   */
  interface ChildFieldRefs {
    readonly id: FieldRef<"Child", 'String'>
    readonly userId: FieldRef<"Child", 'String'>
    readonly name: FieldRef<"Child", 'String'>
    readonly dateOfBirth: FieldRef<"Child", 'DateTime'>
    readonly gender: FieldRef<"Child", 'String'>
    readonly avatarUrl: FieldRef<"Child", 'String'>
    readonly interests: FieldRef<"Child", 'String[]'>
    readonly notes: FieldRef<"Child", 'String'>
    readonly isActive: FieldRef<"Child", 'Boolean'>
    readonly createdAt: FieldRef<"Child", 'DateTime'>
    readonly updatedAt: FieldRef<"Child", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Child findUnique
   */
  export type ChildFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findUniqueOrThrow
   */
  export type ChildFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child findFirst
   */
  export type ChildFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findFirstOrThrow
   */
  export type ChildFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Child to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Children.
     */
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child findMany
   */
  export type ChildFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter, which Children to fetch.
     */
    where?: ChildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Children to fetch.
     */
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Children.
     */
    cursor?: ChildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Children from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Children.
     */
    skip?: number
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * Child create
   */
  export type ChildCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to create a Child.
     */
    data: XOR<ChildCreateInput, ChildUncheckedCreateInput>
  }

  /**
   * Child createMany
   */
  export type ChildCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Children.
     */
    data: ChildCreateManyInput | ChildCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Child createManyAndReturn
   */
  export type ChildCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * The data used to create many Children.
     */
    data: ChildCreateManyInput | ChildCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Child update
   */
  export type ChildUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The data needed to update a Child.
     */
    data: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
    /**
     * Choose, which Child to update.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child updateMany
   */
  export type ChildUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Children.
     */
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyInput>
    /**
     * Filter which Children to update
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to update.
     */
    limit?: number
  }

  /**
   * Child updateManyAndReturn
   */
  export type ChildUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * The data used to update Children.
     */
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyInput>
    /**
     * Filter which Children to update
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Child upsert
   */
  export type ChildUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * The filter to search for the Child to update in case it exists.
     */
    where: ChildWhereUniqueInput
    /**
     * In case the Child found by the `where` argument doesn't exist, create a new Child with this data.
     */
    create: XOR<ChildCreateInput, ChildUncheckedCreateInput>
    /**
     * In case the Child was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChildUpdateInput, ChildUncheckedUpdateInput>
  }

  /**
   * Child delete
   */
  export type ChildDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    /**
     * Filter which Child to delete.
     */
    where: ChildWhereUniqueInput
  }

  /**
   * Child deleteMany
   */
  export type ChildDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Children to delete
     */
    where?: ChildWhereInput
    /**
     * Limit how many Children to delete.
     */
    limit?: number
  }

  /**
   * Child.profiles
   */
  export type Child$profilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShareProfile
     */
    select?: ActivityShareProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShareProfile
     */
    omit?: ActivityShareProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareProfileInclude<ExtArgs> | null
    where?: ActivityShareProfileWhereInput
    orderBy?: ActivityShareProfileOrderByWithRelationInput | ActivityShareProfileOrderByWithRelationInput[]
    cursor?: ActivityShareProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityShareProfileScalarFieldEnum | ActivityShareProfileScalarFieldEnum[]
  }

  /**
   * Child.childActivities
   */
  export type Child$childActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    where?: ChildActivityWhereInput
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    cursor?: ChildActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChildActivityScalarFieldEnum | ChildActivityScalarFieldEnum[]
  }

  /**
   * Child without action
   */
  export type ChildDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
  }


  /**
   * Model ChildActivity
   */

  export type AggregateChildActivity = {
    _count: ChildActivityCountAggregateOutputType | null
    _avg: ChildActivityAvgAggregateOutputType | null
    _sum: ChildActivitySumAggregateOutputType | null
    _min: ChildActivityMinAggregateOutputType | null
    _max: ChildActivityMaxAggregateOutputType | null
  }

  export type ChildActivityAvgAggregateOutputType = {
    rating: number | null
  }

  export type ChildActivitySumAggregateOutputType = {
    rating: number | null
  }

  export type ChildActivityMinAggregateOutputType = {
    id: string | null
    childId: string | null
    activityId: string | null
    status: string | null
    registeredAt: Date | null
    completedAt: Date | null
    notes: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildActivityMaxAggregateOutputType = {
    id: string | null
    childId: string | null
    activityId: string | null
    status: string | null
    registeredAt: Date | null
    completedAt: Date | null
    notes: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChildActivityCountAggregateOutputType = {
    id: number
    childId: number
    activityId: number
    status: number
    registeredAt: number
    completedAt: number
    notes: number
    rating: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChildActivityAvgAggregateInputType = {
    rating?: true
  }

  export type ChildActivitySumAggregateInputType = {
    rating?: true
  }

  export type ChildActivityMinAggregateInputType = {
    id?: true
    childId?: true
    activityId?: true
    status?: true
    registeredAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildActivityMaxAggregateInputType = {
    id?: true
    childId?: true
    activityId?: true
    status?: true
    registeredAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChildActivityCountAggregateInputType = {
    id?: true
    childId?: true
    activityId?: true
    status?: true
    registeredAt?: true
    completedAt?: true
    notes?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChildActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChildActivity to aggregate.
     */
    where?: ChildActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildActivities to fetch.
     */
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChildActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChildActivities
    **/
    _count?: true | ChildActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChildActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChildActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChildActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChildActivityMaxAggregateInputType
  }

  export type GetChildActivityAggregateType<T extends ChildActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateChildActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChildActivity[P]>
      : GetScalarType<T[P], AggregateChildActivity[P]>
  }




  export type ChildActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChildActivityWhereInput
    orderBy?: ChildActivityOrderByWithAggregationInput | ChildActivityOrderByWithAggregationInput[]
    by: ChildActivityScalarFieldEnum[] | ChildActivityScalarFieldEnum
    having?: ChildActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChildActivityCountAggregateInputType | true
    _avg?: ChildActivityAvgAggregateInputType
    _sum?: ChildActivitySumAggregateInputType
    _min?: ChildActivityMinAggregateInputType
    _max?: ChildActivityMaxAggregateInputType
  }

  export type ChildActivityGroupByOutputType = {
    id: string
    childId: string
    activityId: string
    status: string
    registeredAt: Date | null
    completedAt: Date | null
    notes: string | null
    rating: number | null
    createdAt: Date
    updatedAt: Date
    _count: ChildActivityCountAggregateOutputType | null
    _avg: ChildActivityAvgAggregateOutputType | null
    _sum: ChildActivitySumAggregateOutputType | null
    _min: ChildActivityMinAggregateOutputType | null
    _max: ChildActivityMaxAggregateOutputType | null
  }

  type GetChildActivityGroupByPayload<T extends ChildActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChildActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChildActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChildActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ChildActivityGroupByOutputType[P]>
        }
      >
    >


  export type ChildActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    activityId?: boolean
    status?: boolean
    registeredAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["childActivity"]>

  export type ChildActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    activityId?: boolean
    status?: boolean
    registeredAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["childActivity"]>

  export type ChildActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    childId?: boolean
    activityId?: boolean
    status?: boolean
    registeredAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["childActivity"]>

  export type ChildActivitySelectScalar = {
    id?: boolean
    childId?: boolean
    activityId?: boolean
    status?: boolean
    registeredAt?: boolean
    completedAt?: boolean
    notes?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChildActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "childId" | "activityId" | "status" | "registeredAt" | "completedAt" | "notes" | "rating" | "createdAt" | "updatedAt", ExtArgs["result"]["childActivity"]>
  export type ChildActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ChildActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }
  export type ChildActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    child?: boolean | ChildDefaultArgs<ExtArgs>
  }

  export type $ChildActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChildActivity"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      child: Prisma.$ChildPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      childId: string
      activityId: string
      status: string
      registeredAt: Date | null
      completedAt: Date | null
      notes: string | null
      rating: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["childActivity"]>
    composites: {}
  }

  type ChildActivityGetPayload<S extends boolean | null | undefined | ChildActivityDefaultArgs> = $Result.GetResult<Prisma.$ChildActivityPayload, S>

  type ChildActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChildActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChildActivityCountAggregateInputType | true
    }

  export interface ChildActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChildActivity'], meta: { name: 'ChildActivity' } }
    /**
     * Find zero or one ChildActivity that matches the filter.
     * @param {ChildActivityFindUniqueArgs} args - Arguments to find a ChildActivity
     * @example
     * // Get one ChildActivity
     * const childActivity = await prisma.childActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChildActivityFindUniqueArgs>(args: SelectSubset<T, ChildActivityFindUniqueArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChildActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChildActivityFindUniqueOrThrowArgs} args - Arguments to find a ChildActivity
     * @example
     * // Get one ChildActivity
     * const childActivity = await prisma.childActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChildActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ChildActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChildActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityFindFirstArgs} args - Arguments to find a ChildActivity
     * @example
     * // Get one ChildActivity
     * const childActivity = await prisma.childActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChildActivityFindFirstArgs>(args?: SelectSubset<T, ChildActivityFindFirstArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChildActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityFindFirstOrThrowArgs} args - Arguments to find a ChildActivity
     * @example
     * // Get one ChildActivity
     * const childActivity = await prisma.childActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChildActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ChildActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChildActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChildActivities
     * const childActivities = await prisma.childActivity.findMany()
     * 
     * // Get first 10 ChildActivities
     * const childActivities = await prisma.childActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const childActivityWithIdOnly = await prisma.childActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChildActivityFindManyArgs>(args?: SelectSubset<T, ChildActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChildActivity.
     * @param {ChildActivityCreateArgs} args - Arguments to create a ChildActivity.
     * @example
     * // Create one ChildActivity
     * const ChildActivity = await prisma.childActivity.create({
     *   data: {
     *     // ... data to create a ChildActivity
     *   }
     * })
     * 
     */
    create<T extends ChildActivityCreateArgs>(args: SelectSubset<T, ChildActivityCreateArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChildActivities.
     * @param {ChildActivityCreateManyArgs} args - Arguments to create many ChildActivities.
     * @example
     * // Create many ChildActivities
     * const childActivity = await prisma.childActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChildActivityCreateManyArgs>(args?: SelectSubset<T, ChildActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChildActivities and returns the data saved in the database.
     * @param {ChildActivityCreateManyAndReturnArgs} args - Arguments to create many ChildActivities.
     * @example
     * // Create many ChildActivities
     * const childActivity = await prisma.childActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChildActivities and only return the `id`
     * const childActivityWithIdOnly = await prisma.childActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChildActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ChildActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChildActivity.
     * @param {ChildActivityDeleteArgs} args - Arguments to delete one ChildActivity.
     * @example
     * // Delete one ChildActivity
     * const ChildActivity = await prisma.childActivity.delete({
     *   where: {
     *     // ... filter to delete one ChildActivity
     *   }
     * })
     * 
     */
    delete<T extends ChildActivityDeleteArgs>(args: SelectSubset<T, ChildActivityDeleteArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChildActivity.
     * @param {ChildActivityUpdateArgs} args - Arguments to update one ChildActivity.
     * @example
     * // Update one ChildActivity
     * const childActivity = await prisma.childActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChildActivityUpdateArgs>(args: SelectSubset<T, ChildActivityUpdateArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChildActivities.
     * @param {ChildActivityDeleteManyArgs} args - Arguments to filter ChildActivities to delete.
     * @example
     * // Delete a few ChildActivities
     * const { count } = await prisma.childActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChildActivityDeleteManyArgs>(args?: SelectSubset<T, ChildActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChildActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChildActivities
     * const childActivity = await prisma.childActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChildActivityUpdateManyArgs>(args: SelectSubset<T, ChildActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChildActivities and returns the data updated in the database.
     * @param {ChildActivityUpdateManyAndReturnArgs} args - Arguments to update many ChildActivities.
     * @example
     * // Update many ChildActivities
     * const childActivity = await prisma.childActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChildActivities and only return the `id`
     * const childActivityWithIdOnly = await prisma.childActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChildActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, ChildActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChildActivity.
     * @param {ChildActivityUpsertArgs} args - Arguments to update or create a ChildActivity.
     * @example
     * // Update or create a ChildActivity
     * const childActivity = await prisma.childActivity.upsert({
     *   create: {
     *     // ... data to create a ChildActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChildActivity we want to update
     *   }
     * })
     */
    upsert<T extends ChildActivityUpsertArgs>(args: SelectSubset<T, ChildActivityUpsertArgs<ExtArgs>>): Prisma__ChildActivityClient<$Result.GetResult<Prisma.$ChildActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChildActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityCountArgs} args - Arguments to filter ChildActivities to count.
     * @example
     * // Count the number of ChildActivities
     * const count = await prisma.childActivity.count({
     *   where: {
     *     // ... the filter for the ChildActivities we want to count
     *   }
     * })
    **/
    count<T extends ChildActivityCountArgs>(
      args?: Subset<T, ChildActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChildActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChildActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChildActivityAggregateArgs>(args: Subset<T, ChildActivityAggregateArgs>): Prisma.PrismaPromise<GetChildActivityAggregateType<T>>

    /**
     * Group by ChildActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChildActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChildActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChildActivityGroupByArgs['orderBy'] }
        : { orderBy?: ChildActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChildActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChildActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChildActivity model
   */
  readonly fields: ChildActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChildActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChildActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    child<T extends ChildDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChildDefaultArgs<ExtArgs>>): Prisma__ChildClient<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChildActivity model
   */
  interface ChildActivityFieldRefs {
    readonly id: FieldRef<"ChildActivity", 'String'>
    readonly childId: FieldRef<"ChildActivity", 'String'>
    readonly activityId: FieldRef<"ChildActivity", 'String'>
    readonly status: FieldRef<"ChildActivity", 'String'>
    readonly registeredAt: FieldRef<"ChildActivity", 'DateTime'>
    readonly completedAt: FieldRef<"ChildActivity", 'DateTime'>
    readonly notes: FieldRef<"ChildActivity", 'String'>
    readonly rating: FieldRef<"ChildActivity", 'Int'>
    readonly createdAt: FieldRef<"ChildActivity", 'DateTime'>
    readonly updatedAt: FieldRef<"ChildActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChildActivity findUnique
   */
  export type ChildActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter, which ChildActivity to fetch.
     */
    where: ChildActivityWhereUniqueInput
  }

  /**
   * ChildActivity findUniqueOrThrow
   */
  export type ChildActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter, which ChildActivity to fetch.
     */
    where: ChildActivityWhereUniqueInput
  }

  /**
   * ChildActivity findFirst
   */
  export type ChildActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter, which ChildActivity to fetch.
     */
    where?: ChildActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildActivities to fetch.
     */
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChildActivities.
     */
    cursor?: ChildActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChildActivities.
     */
    distinct?: ChildActivityScalarFieldEnum | ChildActivityScalarFieldEnum[]
  }

  /**
   * ChildActivity findFirstOrThrow
   */
  export type ChildActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter, which ChildActivity to fetch.
     */
    where?: ChildActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildActivities to fetch.
     */
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChildActivities.
     */
    cursor?: ChildActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChildActivities.
     */
    distinct?: ChildActivityScalarFieldEnum | ChildActivityScalarFieldEnum[]
  }

  /**
   * ChildActivity findMany
   */
  export type ChildActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter, which ChildActivities to fetch.
     */
    where?: ChildActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChildActivities to fetch.
     */
    orderBy?: ChildActivityOrderByWithRelationInput | ChildActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChildActivities.
     */
    cursor?: ChildActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChildActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChildActivities.
     */
    skip?: number
    distinct?: ChildActivityScalarFieldEnum | ChildActivityScalarFieldEnum[]
  }

  /**
   * ChildActivity create
   */
  export type ChildActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a ChildActivity.
     */
    data: XOR<ChildActivityCreateInput, ChildActivityUncheckedCreateInput>
  }

  /**
   * ChildActivity createMany
   */
  export type ChildActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChildActivities.
     */
    data: ChildActivityCreateManyInput | ChildActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChildActivity createManyAndReturn
   */
  export type ChildActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * The data used to create many ChildActivities.
     */
    data: ChildActivityCreateManyInput | ChildActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChildActivity update
   */
  export type ChildActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a ChildActivity.
     */
    data: XOR<ChildActivityUpdateInput, ChildActivityUncheckedUpdateInput>
    /**
     * Choose, which ChildActivity to update.
     */
    where: ChildActivityWhereUniqueInput
  }

  /**
   * ChildActivity updateMany
   */
  export type ChildActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChildActivities.
     */
    data: XOR<ChildActivityUpdateManyMutationInput, ChildActivityUncheckedUpdateManyInput>
    /**
     * Filter which ChildActivities to update
     */
    where?: ChildActivityWhereInput
    /**
     * Limit how many ChildActivities to update.
     */
    limit?: number
  }

  /**
   * ChildActivity updateManyAndReturn
   */
  export type ChildActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * The data used to update ChildActivities.
     */
    data: XOR<ChildActivityUpdateManyMutationInput, ChildActivityUncheckedUpdateManyInput>
    /**
     * Filter which ChildActivities to update
     */
    where?: ChildActivityWhereInput
    /**
     * Limit how many ChildActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChildActivity upsert
   */
  export type ChildActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the ChildActivity to update in case it exists.
     */
    where: ChildActivityWhereUniqueInput
    /**
     * In case the ChildActivity found by the `where` argument doesn't exist, create a new ChildActivity with this data.
     */
    create: XOR<ChildActivityCreateInput, ChildActivityUncheckedCreateInput>
    /**
     * In case the ChildActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChildActivityUpdateInput, ChildActivityUncheckedUpdateInput>
  }

  /**
   * ChildActivity delete
   */
  export type ChildActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
    /**
     * Filter which ChildActivity to delete.
     */
    where: ChildActivityWhereUniqueInput
  }

  /**
   * ChildActivity deleteMany
   */
  export type ChildActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChildActivities to delete
     */
    where?: ChildActivityWhereInput
    /**
     * Limit how many ChildActivities to delete.
     */
    limit?: number
  }

  /**
   * ChildActivity without action
   */
  export type ChildActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChildActivity
     */
    select?: ChildActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChildActivity
     */
    omit?: ChildActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildActivityInclude<ExtArgs> | null
  }


  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    activityId: string | null
    createdAt: Date | null
    notifyOnChange: boolean | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    activityId: string | null
    createdAt: Date | null
    notifyOnChange: boolean | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    userId: number
    activityId: number
    createdAt: number
    notifyOnChange: number
    _all: number
  }


  export type FavoriteMinAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    createdAt?: true
    notifyOnChange?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    createdAt?: true
    notifyOnChange?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    createdAt?: true
    notifyOnChange?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: string
    userId: string
    activityId: string
    createdAt: Date
    notifyOnChange: boolean
    _count: FavoriteCountAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    createdAt?: boolean
    notifyOnChange?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    createdAt?: boolean
    notifyOnChange?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    createdAt?: boolean
    notifyOnChange?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    id?: boolean
    userId?: boolean
    activityId?: boolean
    createdAt?: boolean
    notifyOnChange?: boolean
  }

  export type FavoriteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "activityId" | "createdAt" | "notifyOnChange", ExtArgs["result"]["favorite"]>
  export type FavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      activityId: string
      createdAt: Date
      notifyOnChange: boolean
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FavoriteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteFindUniqueArgs>(args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteFindFirstArgs>(args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteFindManyArgs>(args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends FavoriteCreateArgs>(args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Favorites.
     * @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteCreateManyArgs>(args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {FavoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends FavoriteDeleteArgs>(args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteUpdateArgs>(args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteDeleteManyArgs>(args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteUpdateManyArgs>(args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites and returns the data updated in the database.
     * @param {FavoriteUpdateManyAndReturnArgs} args - Arguments to update many Favorites.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FavoriteUpdateManyAndReturnArgs>(args: SelectSubset<T, FavoriteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteUpsertArgs>(args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Favorite model
   */
  interface FavoriteFieldRefs {
    readonly id: FieldRef<"Favorite", 'String'>
    readonly userId: FieldRef<"Favorite", 'String'>
    readonly activityId: FieldRef<"Favorite", 'String'>
    readonly createdAt: FieldRef<"Favorite", 'DateTime'>
    readonly notifyOnChange: FieldRef<"Favorite", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }

  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorite createManyAndReturn
   */
  export type FavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to update.
     */
    limit?: number
  }

  /**
   * Favorite updateManyAndReturn
   */
  export type FavoriteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }

  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
    /**
     * Limit how many Favorites to delete.
     */
    limit?: number
  }

  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
  }


  /**
   * Model Invitation
   */

  export type AggregateInvitation = {
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  export type InvitationMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    recipientEmail: string | null
    recipientUserId: string | null
    status: string | null
    message: string | null
    token: string | null
    expiresAt: Date | null
    acceptedAt: Date | null
    createdAt: Date | null
  }

  export type InvitationMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    recipientEmail: string | null
    recipientUserId: string | null
    status: string | null
    message: string | null
    token: string | null
    expiresAt: Date | null
    acceptedAt: Date | null
    createdAt: Date | null
  }

  export type InvitationCountAggregateOutputType = {
    id: number
    senderId: number
    recipientEmail: number
    recipientUserId: number
    status: number
    message: number
    token: number
    expiresAt: number
    acceptedAt: number
    createdAt: number
    _all: number
  }


  export type InvitationMinAggregateInputType = {
    id?: true
    senderId?: true
    recipientEmail?: true
    recipientUserId?: true
    status?: true
    message?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    createdAt?: true
  }

  export type InvitationMaxAggregateInputType = {
    id?: true
    senderId?: true
    recipientEmail?: true
    recipientUserId?: true
    status?: true
    message?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    createdAt?: true
  }

  export type InvitationCountAggregateInputType = {
    id?: true
    senderId?: true
    recipientEmail?: true
    recipientUserId?: true
    status?: true
    message?: true
    token?: true
    expiresAt?: true
    acceptedAt?: true
    createdAt?: true
    _all?: true
  }

  export type InvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitation to aggregate.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invitations
    **/
    _count?: true | InvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvitationMaxAggregateInputType
  }

  export type GetInvitationAggregateType<T extends InvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvitation[P]>
      : GetScalarType<T[P], AggregateInvitation[P]>
  }




  export type InvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithAggregationInput | InvitationOrderByWithAggregationInput[]
    by: InvitationScalarFieldEnum[] | InvitationScalarFieldEnum
    having?: InvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvitationCountAggregateInputType | true
    _min?: InvitationMinAggregateInputType
    _max?: InvitationMaxAggregateInputType
  }

  export type InvitationGroupByOutputType = {
    id: string
    senderId: string
    recipientEmail: string
    recipientUserId: string | null
    status: string
    message: string | null
    token: string
    expiresAt: Date
    acceptedAt: Date | null
    createdAt: Date
    _count: InvitationCountAggregateOutputType | null
    _min: InvitationMinAggregateOutputType | null
    _max: InvitationMaxAggregateOutputType | null
  }

  type GetInvitationGroupByPayload<T extends InvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvitationGroupByOutputType[P]>
            : GetScalarType<T[P], InvitationGroupByOutputType[P]>
        }
      >
    >


  export type InvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    recipientEmail?: boolean
    recipientUserId?: boolean
    status?: boolean
    message?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    createdAt?: boolean
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    recipientEmail?: boolean
    recipientUserId?: boolean
    status?: boolean
    message?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    createdAt?: boolean
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    recipientEmail?: boolean
    recipientUserId?: boolean
    status?: boolean
    message?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    createdAt?: boolean
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invitation"]>

  export type InvitationSelectScalar = {
    id?: boolean
    senderId?: boolean
    recipientEmail?: boolean
    recipientUserId?: boolean
    status?: boolean
    message?: boolean
    token?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    createdAt?: boolean
  }

  export type InvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "recipientEmail" | "recipientUserId" | "status" | "message" | "token" | "expiresAt" | "acceptedAt" | "createdAt", ExtArgs["result"]["invitation"]>
  export type InvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | Invitation$recipientArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invitation"
    objects: {
      recipient: Prisma.$UserPayload<ExtArgs> | null
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      recipientEmail: string
      recipientUserId: string | null
      status: string
      message: string | null
      token: string
      expiresAt: Date
      acceptedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["invitation"]>
    composites: {}
  }

  type InvitationGetPayload<S extends boolean | null | undefined | InvitationDefaultArgs> = $Result.GetResult<Prisma.$InvitationPayload, S>

  type InvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvitationCountAggregateInputType | true
    }

  export interface InvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invitation'], meta: { name: 'Invitation' } }
    /**
     * Find zero or one Invitation that matches the filter.
     * @param {InvitationFindUniqueArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvitationFindUniqueArgs>(args: SelectSubset<T, InvitationFindUniqueArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvitationFindUniqueOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, InvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvitationFindFirstArgs>(args?: SelectSubset<T, InvitationFindFirstArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindFirstOrThrowArgs} args - Arguments to find a Invitation
     * @example
     * // Get one Invitation
     * const invitation = await prisma.invitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, InvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invitations
     * const invitations = await prisma.invitation.findMany()
     * 
     * // Get first 10 Invitations
     * const invitations = await prisma.invitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invitationWithIdOnly = await prisma.invitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvitationFindManyArgs>(args?: SelectSubset<T, InvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invitation.
     * @param {InvitationCreateArgs} args - Arguments to create a Invitation.
     * @example
     * // Create one Invitation
     * const Invitation = await prisma.invitation.create({
     *   data: {
     *     // ... data to create a Invitation
     *   }
     * })
     * 
     */
    create<T extends InvitationCreateArgs>(args: SelectSubset<T, InvitationCreateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invitations.
     * @param {InvitationCreateManyArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvitationCreateManyArgs>(args?: SelectSubset<T, InvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invitations and returns the data saved in the database.
     * @param {InvitationCreateManyAndReturnArgs} args - Arguments to create many Invitations.
     * @example
     * // Create many Invitations
     * const invitation = await prisma.invitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, InvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invitation.
     * @param {InvitationDeleteArgs} args - Arguments to delete one Invitation.
     * @example
     * // Delete one Invitation
     * const Invitation = await prisma.invitation.delete({
     *   where: {
     *     // ... filter to delete one Invitation
     *   }
     * })
     * 
     */
    delete<T extends InvitationDeleteArgs>(args: SelectSubset<T, InvitationDeleteArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invitation.
     * @param {InvitationUpdateArgs} args - Arguments to update one Invitation.
     * @example
     * // Update one Invitation
     * const invitation = await prisma.invitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvitationUpdateArgs>(args: SelectSubset<T, InvitationUpdateArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invitations.
     * @param {InvitationDeleteManyArgs} args - Arguments to filter Invitations to delete.
     * @example
     * // Delete a few Invitations
     * const { count } = await prisma.invitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvitationDeleteManyArgs>(args?: SelectSubset<T, InvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvitationUpdateManyArgs>(args: SelectSubset<T, InvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invitations and returns the data updated in the database.
     * @param {InvitationUpdateManyAndReturnArgs} args - Arguments to update many Invitations.
     * @example
     * // Update many Invitations
     * const invitation = await prisma.invitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invitations and only return the `id`
     * const invitationWithIdOnly = await prisma.invitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, InvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invitation.
     * @param {InvitationUpsertArgs} args - Arguments to update or create a Invitation.
     * @example
     * // Update or create a Invitation
     * const invitation = await prisma.invitation.upsert({
     *   create: {
     *     // ... data to create a Invitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invitation we want to update
     *   }
     * })
     */
    upsert<T extends InvitationUpsertArgs>(args: SelectSubset<T, InvitationUpsertArgs<ExtArgs>>): Prisma__InvitationClient<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationCountArgs} args - Arguments to filter Invitations to count.
     * @example
     * // Count the number of Invitations
     * const count = await prisma.invitation.count({
     *   where: {
     *     // ... the filter for the Invitations we want to count
     *   }
     * })
    **/
    count<T extends InvitationCountArgs>(
      args?: Subset<T, InvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvitationAggregateArgs>(args: Subset<T, InvitationAggregateArgs>): Prisma.PrismaPromise<GetInvitationAggregateType<T>>

    /**
     * Group by Invitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvitationGroupByArgs['orderBy'] }
        : { orderBy?: InvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invitation model
   */
  readonly fields: InvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipient<T extends Invitation$recipientArgs<ExtArgs> = {}>(args?: Subset<T, Invitation$recipientArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invitation model
   */
  interface InvitationFieldRefs {
    readonly id: FieldRef<"Invitation", 'String'>
    readonly senderId: FieldRef<"Invitation", 'String'>
    readonly recipientEmail: FieldRef<"Invitation", 'String'>
    readonly recipientUserId: FieldRef<"Invitation", 'String'>
    readonly status: FieldRef<"Invitation", 'String'>
    readonly message: FieldRef<"Invitation", 'String'>
    readonly token: FieldRef<"Invitation", 'String'>
    readonly expiresAt: FieldRef<"Invitation", 'DateTime'>
    readonly acceptedAt: FieldRef<"Invitation", 'DateTime'>
    readonly createdAt: FieldRef<"Invitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invitation findUnique
   */
  export type InvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findUniqueOrThrow
   */
  export type InvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation findFirst
   */
  export type InvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findFirstOrThrow
   */
  export type InvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitation to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invitations.
     */
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation findMany
   */
  export type InvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter, which Invitations to fetch.
     */
    where?: InvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invitations to fetch.
     */
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invitations.
     */
    cursor?: InvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invitations.
     */
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * Invitation create
   */
  export type InvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a Invitation.
     */
    data: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
  }

  /**
   * Invitation createMany
   */
  export type InvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invitation createManyAndReturn
   */
  export type InvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to create many Invitations.
     */
    data: InvitationCreateManyInput | InvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation update
   */
  export type InvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a Invitation.
     */
    data: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
    /**
     * Choose, which Invitation to update.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation updateMany
   */
  export type InvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
  }

  /**
   * Invitation updateManyAndReturn
   */
  export type InvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * The data used to update Invitations.
     */
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyInput>
    /**
     * Filter which Invitations to update
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invitation upsert
   */
  export type InvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the Invitation to update in case it exists.
     */
    where: InvitationWhereUniqueInput
    /**
     * In case the Invitation found by the `where` argument doesn't exist, create a new Invitation with this data.
     */
    create: XOR<InvitationCreateInput, InvitationUncheckedCreateInput>
    /**
     * In case the Invitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvitationUpdateInput, InvitationUncheckedUpdateInput>
  }

  /**
   * Invitation delete
   */
  export type InvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    /**
     * Filter which Invitation to delete.
     */
    where: InvitationWhereUniqueInput
  }

  /**
   * Invitation deleteMany
   */
  export type InvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invitations to delete
     */
    where?: InvitationWhereInput
    /**
     * Limit how many Invitations to delete.
     */
    limit?: number
  }

  /**
   * Invitation.recipient
   */
  export type Invitation$recipientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Invitation without action
   */
  export type InvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
  }


  /**
   * Model City
   */

  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityMinAggregateOutputType = {
    id: string | null
    name: string | null
    province: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    province: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    name: number
    province: number
    country: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CityMinAggregateInputType = {
    id?: true
    name?: true
    province?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    name?: true
    province?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    name?: true
    province?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which City to aggregate.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
    orderBy?: CityOrderByWithAggregationInput | CityOrderByWithAggregationInput[]
    by: CityScalarFieldEnum[] | CityScalarFieldEnum
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }

  export type CityGroupByOutputType = {
    id: string
    name: string
    province: string
    country: string
    createdAt: Date
    updatedAt: Date
    _count: CityCountAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    province?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    locations?: boolean | City$locationsArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type CitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    province?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["city"]>

  export type CitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    province?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["city"]>

  export type CitySelectScalar = {
    id?: boolean
    name?: boolean
    province?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "province" | "country" | "createdAt" | "updatedAt", ExtArgs["result"]["city"]>
  export type CityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    locations?: boolean | City$locationsArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "City"
    objects: {
      locations: Prisma.$LocationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      province: string
      country: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["city"]>
    composites: {}
  }

  type CityGetPayload<S extends boolean | null | undefined | CityDefaultArgs> = $Result.GetResult<Prisma.$CityPayload, S>

  type CityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface CityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['City'], meta: { name: 'City' } }
    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CityFindUniqueArgs>(args: SelectSubset<T, CityFindUniqueArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one City that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(args: SelectSubset<T, CityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CityFindFirstArgs>(args?: SelectSubset<T, CityFindFirstArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(args?: SelectSubset<T, CityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CityFindManyArgs>(args?: SelectSubset<T, CityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
     */
    create<T extends CityCreateArgs>(args: SelectSubset<T, CityCreateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cities.
     * @param {CityCreateManyArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CityCreateManyArgs>(args?: SelectSubset<T, CityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cities and returns the data saved in the database.
     * @param {CityCreateManyAndReturnArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cities and only return the `id`
     * const cityWithIdOnly = await prisma.city.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CityCreateManyAndReturnArgs>(args?: SelectSubset<T, CityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
     */
    delete<T extends CityDeleteArgs>(args: SelectSubset<T, CityDeleteArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CityUpdateArgs>(args: SelectSubset<T, CityUpdateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CityDeleteManyArgs>(args?: SelectSubset<T, CityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CityUpdateManyArgs>(args: SelectSubset<T, CityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities and returns the data updated in the database.
     * @param {CityUpdateManyAndReturnArgs} args - Arguments to update many Cities.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cities and only return the `id`
     * const cityWithIdOnly = await prisma.city.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CityUpdateManyAndReturnArgs>(args: SelectSubset<T, CityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
     */
    upsert<T extends CityUpsertArgs>(args: SelectSubset<T, CityUpsertArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the City model
   */
  readonly fields: CityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    locations<T extends City$locationsArgs<ExtArgs> = {}>(args?: Subset<T, City$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the City model
   */
  interface CityFieldRefs {
    readonly id: FieldRef<"City", 'String'>
    readonly name: FieldRef<"City", 'String'>
    readonly province: FieldRef<"City", 'String'>
    readonly country: FieldRef<"City", 'String'>
    readonly createdAt: FieldRef<"City", 'DateTime'>
    readonly updatedAt: FieldRef<"City", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * City findUnique
   */
  export type CityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findUniqueOrThrow
   */
  export type CityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findFirst
   */
  export type CityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findFirstOrThrow
   */
  export type CityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findMany
   */
  export type CityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which Cities to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City create
   */
  export type CityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to create a City.
     */
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }

  /**
   * City createMany
   */
  export type CityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * City createManyAndReturn
   */
  export type CityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * City update
   */
  export type CityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to update a City.
     */
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City updateMany
   */
  export type CityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
    /**
     * Limit how many Cities to update.
     */
    limit?: number
  }

  /**
   * City updateManyAndReturn
   */
  export type CityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
    /**
     * Limit how many Cities to update.
     */
    limit?: number
  }

  /**
   * City upsert
   */
  export type CityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The filter to search for the City to update in case it exists.
     */
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     */
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }

  /**
   * City delete
   */
  export type CityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter which City to delete.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cities to delete
     */
    where?: CityWhereInput
    /**
     * Limit how many Cities to delete.
     */
    limit?: number
  }

  /**
   * City.locations
   */
  export type City$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    cursor?: LocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * City without action
   */
  export type CityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the City
     */
    omit?: CityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    cityId: string | null
    postalCode: string | null
    latitude: number | null
    longitude: number | null
    facility: string | null
    fullAddress: string | null
    mapUrl: string | null
    placeId: string | null
    phoneNumber: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    address: string | null
    cityId: string | null
    postalCode: string | null
    latitude: number | null
    longitude: number | null
    facility: string | null
    fullAddress: string | null
    mapUrl: string | null
    placeId: string | null
    phoneNumber: string | null
    website: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    cityId: number
    postalCode: number
    latitude: number
    longitude: number
    facility: number
    fullAddress: number
    mapUrl: number
    placeId: number
    phoneNumber: number
    website: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    cityId?: true
    postalCode?: true
    latitude?: true
    longitude?: true
    facility?: true
    fullAddress?: true
    mapUrl?: true
    placeId?: true
    phoneNumber?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    cityId?: true
    postalCode?: true
    latitude?: true
    longitude?: true
    facility?: true
    fullAddress?: true
    mapUrl?: true
    placeId?: true
    phoneNumber?: true
    website?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    cityId?: true
    postalCode?: true
    latitude?: true
    longitude?: true
    facility?: true
    fullAddress?: true
    mapUrl?: true
    placeId?: true
    phoneNumber?: true
    website?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: string
    name: string
    address: string | null
    cityId: string
    postalCode: string | null
    latitude: number | null
    longitude: number | null
    facility: string | null
    fullAddress: string | null
    mapUrl: string | null
    placeId: string | null
    phoneNumber: string | null
    website: string | null
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    cityId?: boolean
    postalCode?: boolean
    latitude?: boolean
    longitude?: boolean
    facility?: boolean
    fullAddress?: boolean
    mapUrl?: boolean
    placeId?: boolean
    phoneNumber?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    city?: boolean | CityDefaultArgs<ExtArgs>
    activities?: boolean | Location$activitiesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    cityId?: boolean
    postalCode?: boolean
    latitude?: boolean
    longitude?: boolean
    facility?: boolean
    fullAddress?: boolean
    mapUrl?: boolean
    placeId?: boolean
    phoneNumber?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    city?: boolean | CityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    cityId?: boolean
    postalCode?: boolean
    latitude?: boolean
    longitude?: boolean
    facility?: boolean
    fullAddress?: boolean
    mapUrl?: boolean
    placeId?: boolean
    phoneNumber?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    city?: boolean | CityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    cityId?: boolean
    postalCode?: boolean
    latitude?: boolean
    longitude?: boolean
    facility?: boolean
    fullAddress?: boolean
    mapUrl?: boolean
    placeId?: boolean
    phoneNumber?: boolean
    website?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "cityId" | "postalCode" | "latitude" | "longitude" | "facility" | "fullAddress" | "mapUrl" | "placeId" | "phoneNumber" | "website" | "createdAt" | "updatedAt", ExtArgs["result"]["location"]>
  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | CityDefaultArgs<ExtArgs>
    activities?: boolean | Location$activitiesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | CityDefaultArgs<ExtArgs>
  }
  export type LocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | CityDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      city: Prisma.$CityPayload<ExtArgs>
      activities: Prisma.$ActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      address: string | null
      cityId: string
      postalCode: string | null
      latitude: number | null
      longitude: number | null
      facility: string | null
      fullAddress: string | null
      mapUrl: string | null
      placeId: string | null
      phoneNumber: string | null
      website: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations and returns the data updated in the database.
     * @param {LocationUpdateManyAndReturnArgs} args - Arguments to update many Locations.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LocationUpdateManyAndReturnArgs>(args: SelectSubset<T, LocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    city<T extends CityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CityDefaultArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    activities<T extends Location$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Location$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'String'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly cityId: FieldRef<"Location", 'String'>
    readonly postalCode: FieldRef<"Location", 'String'>
    readonly latitude: FieldRef<"Location", 'Float'>
    readonly longitude: FieldRef<"Location", 'Float'>
    readonly facility: FieldRef<"Location", 'String'>
    readonly fullAddress: FieldRef<"Location", 'String'>
    readonly mapUrl: FieldRef<"Location", 'String'>
    readonly placeId: FieldRef<"Location", 'String'>
    readonly phoneNumber: FieldRef<"Location", 'String'>
    readonly website: FieldRef<"Location", 'String'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
  }

  /**
   * Location updateManyAndReturn
   */
  export type LocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
    /**
     * Limit how many Locations to delete.
     */
    limit?: number
  }

  /**
   * Location.activities
   */
  export type Location$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Location
     */
    omit?: LocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Provider
   */

  export type AggregateProvider = {
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  export type ProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    region: string | null
    platform: string | null
  }

  export type ProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    region: string | null
    platform: string | null
  }

  export type ProviderCountAggregateOutputType = {
    id: number
    name: number
    website: number
    scraperConfig: number
    isActive: number
    createdAt: number
    updatedAt: number
    region: number
    contactInfo: number
    platform: number
    _all: number
  }


  export type ProviderMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    region?: true
    platform?: true
  }

  export type ProviderMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    region?: true
    platform?: true
  }

  export type ProviderCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    scraperConfig?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    region?: true
    contactInfo?: true
    platform?: true
    _all?: true
  }

  export type ProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Provider to aggregate.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Providers
    **/
    _count?: true | ProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderMaxAggregateInputType
  }

  export type GetProviderAggregateType<T extends ProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvider[P]>
      : GetScalarType<T[P], AggregateProvider[P]>
  }




  export type ProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderWhereInput
    orderBy?: ProviderOrderByWithAggregationInput | ProviderOrderByWithAggregationInput[]
    by: ProviderScalarFieldEnum[] | ProviderScalarFieldEnum
    having?: ProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderCountAggregateInputType | true
    _min?: ProviderMinAggregateInputType
    _max?: ProviderMaxAggregateInputType
  }

  export type ProviderGroupByOutputType = {
    id: string
    name: string
    website: string
    scraperConfig: JsonValue
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    region: string | null
    contactInfo: JsonValue | null
    platform: string | null
    _count: ProviderCountAggregateOutputType | null
    _min: ProviderMinAggregateOutputType | null
    _max: ProviderMaxAggregateOutputType | null
  }

  type GetProviderGroupByPayload<T extends ProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderGroupByOutputType[P]>
        }
      >
    >


  export type ProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    scraperConfig?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean
    contactInfo?: boolean
    platform?: boolean
    activities?: boolean | Provider$activitiesArgs<ExtArgs>
    ProviderMetrics?: boolean | Provider$ProviderMetricsArgs<ExtArgs>
    ScrapeJob?: boolean | Provider$ScrapeJobArgs<ExtArgs>
    ScraperHealthCheck?: boolean | Provider$ScraperHealthCheckArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    scraperConfig?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean
    contactInfo?: boolean
    platform?: boolean
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    scraperConfig?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean
    contactInfo?: boolean
    platform?: boolean
  }, ExtArgs["result"]["provider"]>

  export type ProviderSelectScalar = {
    id?: boolean
    name?: boolean
    website?: boolean
    scraperConfig?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean
    contactInfo?: boolean
    platform?: boolean
  }

  export type ProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "website" | "scraperConfig" | "isActive" | "createdAt" | "updatedAt" | "region" | "contactInfo" | "platform", ExtArgs["result"]["provider"]>
  export type ProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | Provider$activitiesArgs<ExtArgs>
    ProviderMetrics?: boolean | Provider$ProviderMetricsArgs<ExtArgs>
    ScrapeJob?: boolean | Provider$ScrapeJobArgs<ExtArgs>
    ScraperHealthCheck?: boolean | Provider$ScraperHealthCheckArgs<ExtArgs>
    _count?: boolean | ProviderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Provider"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      ProviderMetrics: Prisma.$ProviderMetricsPayload<ExtArgs>[]
      ScrapeJob: Prisma.$ScrapeJobPayload<ExtArgs>[]
      ScraperHealthCheck: Prisma.$ScraperHealthCheckPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      website: string
      scraperConfig: Prisma.JsonValue
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      region: string | null
      contactInfo: Prisma.JsonValue | null
      platform: string | null
    }, ExtArgs["result"]["provider"]>
    composites: {}
  }

  type ProviderGetPayload<S extends boolean | null | undefined | ProviderDefaultArgs> = $Result.GetResult<Prisma.$ProviderPayload, S>

  type ProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProviderCountAggregateInputType | true
    }

  export interface ProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provider'], meta: { name: 'Provider' } }
    /**
     * Find zero or one Provider that matches the filter.
     * @param {ProviderFindUniqueArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProviderFindUniqueArgs>(args: SelectSubset<T, ProviderFindUniqueArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Provider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProviderFindUniqueOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, ProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProviderFindFirstArgs>(args?: SelectSubset<T, ProviderFindFirstArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Provider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindFirstOrThrowArgs} args - Arguments to find a Provider
     * @example
     * // Get one Provider
     * const provider = await prisma.provider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, ProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Providers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Providers
     * const providers = await prisma.provider.findMany()
     * 
     * // Get first 10 Providers
     * const providers = await prisma.provider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerWithIdOnly = await prisma.provider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProviderFindManyArgs>(args?: SelectSubset<T, ProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Provider.
     * @param {ProviderCreateArgs} args - Arguments to create a Provider.
     * @example
     * // Create one Provider
     * const Provider = await prisma.provider.create({
     *   data: {
     *     // ... data to create a Provider
     *   }
     * })
     * 
     */
    create<T extends ProviderCreateArgs>(args: SelectSubset<T, ProviderCreateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Providers.
     * @param {ProviderCreateManyArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProviderCreateManyArgs>(args?: SelectSubset<T, ProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Providers and returns the data saved in the database.
     * @param {ProviderCreateManyAndReturnArgs} args - Arguments to create many Providers.
     * @example
     * // Create many Providers
     * const provider = await prisma.provider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, ProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Provider.
     * @param {ProviderDeleteArgs} args - Arguments to delete one Provider.
     * @example
     * // Delete one Provider
     * const Provider = await prisma.provider.delete({
     *   where: {
     *     // ... filter to delete one Provider
     *   }
     * })
     * 
     */
    delete<T extends ProviderDeleteArgs>(args: SelectSubset<T, ProviderDeleteArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Provider.
     * @param {ProviderUpdateArgs} args - Arguments to update one Provider.
     * @example
     * // Update one Provider
     * const provider = await prisma.provider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProviderUpdateArgs>(args: SelectSubset<T, ProviderUpdateArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Providers.
     * @param {ProviderDeleteManyArgs} args - Arguments to filter Providers to delete.
     * @example
     * // Delete a few Providers
     * const { count } = await prisma.provider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProviderDeleteManyArgs>(args?: SelectSubset<T, ProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProviderUpdateManyArgs>(args: SelectSubset<T, ProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Providers and returns the data updated in the database.
     * @param {ProviderUpdateManyAndReturnArgs} args - Arguments to update many Providers.
     * @example
     * // Update many Providers
     * const provider = await prisma.provider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Providers and only return the `id`
     * const providerWithIdOnly = await prisma.provider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, ProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Provider.
     * @param {ProviderUpsertArgs} args - Arguments to update or create a Provider.
     * @example
     * // Update or create a Provider
     * const provider = await prisma.provider.upsert({
     *   create: {
     *     // ... data to create a Provider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Provider we want to update
     *   }
     * })
     */
    upsert<T extends ProviderUpsertArgs>(args: SelectSubset<T, ProviderUpsertArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Providers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderCountArgs} args - Arguments to filter Providers to count.
     * @example
     * // Count the number of Providers
     * const count = await prisma.provider.count({
     *   where: {
     *     // ... the filter for the Providers we want to count
     *   }
     * })
    **/
    count<T extends ProviderCountArgs>(
      args?: Subset<T, ProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderAggregateArgs>(args: Subset<T, ProviderAggregateArgs>): Prisma.PrismaPromise<GetProviderAggregateType<T>>

    /**
     * Group by Provider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderGroupByArgs['orderBy'] }
        : { orderBy?: ProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Provider model
   */
  readonly fields: ProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Provider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends Provider$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Provider$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProviderMetrics<T extends Provider$ProviderMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Provider$ProviderMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ScrapeJob<T extends Provider$ScrapeJobArgs<ExtArgs> = {}>(args?: Subset<T, Provider$ScrapeJobArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ScraperHealthCheck<T extends Provider$ScraperHealthCheckArgs<ExtArgs> = {}>(args?: Subset<T, Provider$ScraperHealthCheckArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Provider model
   */
  interface ProviderFieldRefs {
    readonly id: FieldRef<"Provider", 'String'>
    readonly name: FieldRef<"Provider", 'String'>
    readonly website: FieldRef<"Provider", 'String'>
    readonly scraperConfig: FieldRef<"Provider", 'Json'>
    readonly isActive: FieldRef<"Provider", 'Boolean'>
    readonly createdAt: FieldRef<"Provider", 'DateTime'>
    readonly updatedAt: FieldRef<"Provider", 'DateTime'>
    readonly region: FieldRef<"Provider", 'String'>
    readonly contactInfo: FieldRef<"Provider", 'Json'>
    readonly platform: FieldRef<"Provider", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Provider findUnique
   */
  export type ProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findUniqueOrThrow
   */
  export type ProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider findFirst
   */
  export type ProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findFirstOrThrow
   */
  export type ProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Provider to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Providers.
     */
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider findMany
   */
  export type ProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter, which Providers to fetch.
     */
    where?: ProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Providers to fetch.
     */
    orderBy?: ProviderOrderByWithRelationInput | ProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Providers.
     */
    cursor?: ProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Providers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Providers.
     */
    skip?: number
    distinct?: ProviderScalarFieldEnum | ProviderScalarFieldEnum[]
  }

  /**
   * Provider create
   */
  export type ProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a Provider.
     */
    data: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
  }

  /**
   * Provider createMany
   */
  export type ProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provider createManyAndReturn
   */
  export type ProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to create many Providers.
     */
    data: ProviderCreateManyInput | ProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Provider update
   */
  export type ProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a Provider.
     */
    data: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
    /**
     * Choose, which Provider to update.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider updateMany
   */
  export type ProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
  }

  /**
   * Provider updateManyAndReturn
   */
  export type ProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * The data used to update Providers.
     */
    data: XOR<ProviderUpdateManyMutationInput, ProviderUncheckedUpdateManyInput>
    /**
     * Filter which Providers to update
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to update.
     */
    limit?: number
  }

  /**
   * Provider upsert
   */
  export type ProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the Provider to update in case it exists.
     */
    where: ProviderWhereUniqueInput
    /**
     * In case the Provider found by the `where` argument doesn't exist, create a new Provider with this data.
     */
    create: XOR<ProviderCreateInput, ProviderUncheckedCreateInput>
    /**
     * In case the Provider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderUpdateInput, ProviderUncheckedUpdateInput>
  }

  /**
   * Provider delete
   */
  export type ProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
    /**
     * Filter which Provider to delete.
     */
    where: ProviderWhereUniqueInput
  }

  /**
   * Provider deleteMany
   */
  export type ProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Providers to delete
     */
    where?: ProviderWhereInput
    /**
     * Limit how many Providers to delete.
     */
    limit?: number
  }

  /**
   * Provider.activities
   */
  export type Provider$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Provider.ProviderMetrics
   */
  export type Provider$ProviderMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    where?: ProviderMetricsWhereInput
    orderBy?: ProviderMetricsOrderByWithRelationInput | ProviderMetricsOrderByWithRelationInput[]
    cursor?: ProviderMetricsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProviderMetricsScalarFieldEnum | ProviderMetricsScalarFieldEnum[]
  }

  /**
   * Provider.ScrapeJob
   */
  export type Provider$ScrapeJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    where?: ScrapeJobWhereInput
    orderBy?: ScrapeJobOrderByWithRelationInput | ScrapeJobOrderByWithRelationInput[]
    cursor?: ScrapeJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScrapeJobScalarFieldEnum | ScrapeJobScalarFieldEnum[]
  }

  /**
   * Provider.ScraperHealthCheck
   */
  export type Provider$ScraperHealthCheckArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    where?: ScraperHealthCheckWhereInput
    orderBy?: ScraperHealthCheckOrderByWithRelationInput | ScraperHealthCheckOrderByWithRelationInput[]
    cursor?: ScraperHealthCheckWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScraperHealthCheckScalarFieldEnum | ScraperHealthCheckScalarFieldEnum[]
  }

  /**
   * Provider without action
   */
  export type ProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Provider
     */
    select?: ProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Provider
     */
    omit?: ProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderInclude<ExtArgs> | null
  }


  /**
   * Model ProviderMetrics
   */

  export type AggregateProviderMetrics = {
    _count: ProviderMetricsCountAggregateOutputType | null
    _avg: ProviderMetricsAvgAggregateOutputType | null
    _sum: ProviderMetricsSumAggregateOutputType | null
    _min: ProviderMetricsMinAggregateOutputType | null
    _max: ProviderMetricsMaxAggregateOutputType | null
  }

  export type ProviderMetricsAvgAggregateOutputType = {
    activitiesFound: number | null
    activitiesProcessed: number | null
    dataQualityScore: number | null
    scrapeDuration: number | null
    memoryUsed: number | null
  }

  export type ProviderMetricsSumAggregateOutputType = {
    activitiesFound: number | null
    activitiesProcessed: number | null
    dataQualityScore: number | null
    scrapeDuration: number | null
    memoryUsed: bigint | null
  }

  export type ProviderMetricsMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    scrapeDate: Date | null
    activitiesFound: number | null
    activitiesProcessed: number | null
    dataQualityScore: number | null
    scrapeDuration: number | null
    memoryUsed: bigint | null
    createdAt: Date | null
  }

  export type ProviderMetricsMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    scrapeDate: Date | null
    activitiesFound: number | null
    activitiesProcessed: number | null
    dataQualityScore: number | null
    scrapeDuration: number | null
    memoryUsed: bigint | null
    createdAt: Date | null
  }

  export type ProviderMetricsCountAggregateOutputType = {
    id: number
    providerId: number
    scrapeDate: number
    activitiesFound: number
    activitiesProcessed: number
    dataQualityScore: number
    errors: number
    scrapeDuration: number
    memoryUsed: number
    createdAt: number
    _all: number
  }


  export type ProviderMetricsAvgAggregateInputType = {
    activitiesFound?: true
    activitiesProcessed?: true
    dataQualityScore?: true
    scrapeDuration?: true
    memoryUsed?: true
  }

  export type ProviderMetricsSumAggregateInputType = {
    activitiesFound?: true
    activitiesProcessed?: true
    dataQualityScore?: true
    scrapeDuration?: true
    memoryUsed?: true
  }

  export type ProviderMetricsMinAggregateInputType = {
    id?: true
    providerId?: true
    scrapeDate?: true
    activitiesFound?: true
    activitiesProcessed?: true
    dataQualityScore?: true
    scrapeDuration?: true
    memoryUsed?: true
    createdAt?: true
  }

  export type ProviderMetricsMaxAggregateInputType = {
    id?: true
    providerId?: true
    scrapeDate?: true
    activitiesFound?: true
    activitiesProcessed?: true
    dataQualityScore?: true
    scrapeDuration?: true
    memoryUsed?: true
    createdAt?: true
  }

  export type ProviderMetricsCountAggregateInputType = {
    id?: true
    providerId?: true
    scrapeDate?: true
    activitiesFound?: true
    activitiesProcessed?: true
    dataQualityScore?: true
    errors?: true
    scrapeDuration?: true
    memoryUsed?: true
    createdAt?: true
    _all?: true
  }

  export type ProviderMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderMetrics to aggregate.
     */
    where?: ProviderMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderMetrics to fetch.
     */
    orderBy?: ProviderMetricsOrderByWithRelationInput | ProviderMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProviderMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProviderMetrics
    **/
    _count?: true | ProviderMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProviderMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProviderMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProviderMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProviderMetricsMaxAggregateInputType
  }

  export type GetProviderMetricsAggregateType<T extends ProviderMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateProviderMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProviderMetrics[P]>
      : GetScalarType<T[P], AggregateProviderMetrics[P]>
  }




  export type ProviderMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProviderMetricsWhereInput
    orderBy?: ProviderMetricsOrderByWithAggregationInput | ProviderMetricsOrderByWithAggregationInput[]
    by: ProviderMetricsScalarFieldEnum[] | ProviderMetricsScalarFieldEnum
    having?: ProviderMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProviderMetricsCountAggregateInputType | true
    _avg?: ProviderMetricsAvgAggregateInputType
    _sum?: ProviderMetricsSumAggregateInputType
    _min?: ProviderMetricsMinAggregateInputType
    _max?: ProviderMetricsMaxAggregateInputType
  }

  export type ProviderMetricsGroupByOutputType = {
    id: string
    providerId: string
    scrapeDate: Date
    activitiesFound: number
    activitiesProcessed: number
    dataQualityScore: number | null
    errors: JsonValue | null
    scrapeDuration: number | null
    memoryUsed: bigint | null
    createdAt: Date
    _count: ProviderMetricsCountAggregateOutputType | null
    _avg: ProviderMetricsAvgAggregateOutputType | null
    _sum: ProviderMetricsSumAggregateOutputType | null
    _min: ProviderMetricsMinAggregateOutputType | null
    _max: ProviderMetricsMaxAggregateOutputType | null
  }

  type GetProviderMetricsGroupByPayload<T extends ProviderMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProviderMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProviderMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProviderMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], ProviderMetricsGroupByOutputType[P]>
        }
      >
    >


  export type ProviderMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    scrapeDate?: boolean
    activitiesFound?: boolean
    activitiesProcessed?: boolean
    dataQualityScore?: boolean
    errors?: boolean
    scrapeDuration?: boolean
    memoryUsed?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerMetrics"]>

  export type ProviderMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    scrapeDate?: boolean
    activitiesFound?: boolean
    activitiesProcessed?: boolean
    dataQualityScore?: boolean
    errors?: boolean
    scrapeDuration?: boolean
    memoryUsed?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerMetrics"]>

  export type ProviderMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    scrapeDate?: boolean
    activitiesFound?: boolean
    activitiesProcessed?: boolean
    dataQualityScore?: boolean
    errors?: boolean
    scrapeDuration?: boolean
    memoryUsed?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["providerMetrics"]>

  export type ProviderMetricsSelectScalar = {
    id?: boolean
    providerId?: boolean
    scrapeDate?: boolean
    activitiesFound?: boolean
    activitiesProcessed?: boolean
    dataQualityScore?: boolean
    errors?: boolean
    scrapeDuration?: boolean
    memoryUsed?: boolean
    createdAt?: boolean
  }

  export type ProviderMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "scrapeDate" | "activitiesFound" | "activitiesProcessed" | "dataQualityScore" | "errors" | "scrapeDuration" | "memoryUsed" | "createdAt", ExtArgs["result"]["providerMetrics"]>
  export type ProviderMetricsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ProviderMetricsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ProviderMetricsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $ProviderMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProviderMetrics"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      scrapeDate: Date
      activitiesFound: number
      activitiesProcessed: number
      dataQualityScore: number | null
      errors: Prisma.JsonValue | null
      scrapeDuration: number | null
      memoryUsed: bigint | null
      createdAt: Date
    }, ExtArgs["result"]["providerMetrics"]>
    composites: {}
  }

  type ProviderMetricsGetPayload<S extends boolean | null | undefined | ProviderMetricsDefaultArgs> = $Result.GetResult<Prisma.$ProviderMetricsPayload, S>

  type ProviderMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProviderMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProviderMetricsCountAggregateInputType | true
    }

  export interface ProviderMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProviderMetrics'], meta: { name: 'ProviderMetrics' } }
    /**
     * Find zero or one ProviderMetrics that matches the filter.
     * @param {ProviderMetricsFindUniqueArgs} args - Arguments to find a ProviderMetrics
     * @example
     * // Get one ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProviderMetricsFindUniqueArgs>(args: SelectSubset<T, ProviderMetricsFindUniqueArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProviderMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProviderMetricsFindUniqueOrThrowArgs} args - Arguments to find a ProviderMetrics
     * @example
     * // Get one ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProviderMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProviderMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProviderMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsFindFirstArgs} args - Arguments to find a ProviderMetrics
     * @example
     * // Get one ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProviderMetricsFindFirstArgs>(args?: SelectSubset<T, ProviderMetricsFindFirstArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProviderMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsFindFirstOrThrowArgs} args - Arguments to find a ProviderMetrics
     * @example
     * // Get one ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProviderMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProviderMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProviderMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findMany()
     * 
     * // Get first 10 ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const providerMetricsWithIdOnly = await prisma.providerMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProviderMetricsFindManyArgs>(args?: SelectSubset<T, ProviderMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProviderMetrics.
     * @param {ProviderMetricsCreateArgs} args - Arguments to create a ProviderMetrics.
     * @example
     * // Create one ProviderMetrics
     * const ProviderMetrics = await prisma.providerMetrics.create({
     *   data: {
     *     // ... data to create a ProviderMetrics
     *   }
     * })
     * 
     */
    create<T extends ProviderMetricsCreateArgs>(args: SelectSubset<T, ProviderMetricsCreateArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProviderMetrics.
     * @param {ProviderMetricsCreateManyArgs} args - Arguments to create many ProviderMetrics.
     * @example
     * // Create many ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProviderMetricsCreateManyArgs>(args?: SelectSubset<T, ProviderMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProviderMetrics and returns the data saved in the database.
     * @param {ProviderMetricsCreateManyAndReturnArgs} args - Arguments to create many ProviderMetrics.
     * @example
     * // Create many ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProviderMetrics and only return the `id`
     * const providerMetricsWithIdOnly = await prisma.providerMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProviderMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProviderMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProviderMetrics.
     * @param {ProviderMetricsDeleteArgs} args - Arguments to delete one ProviderMetrics.
     * @example
     * // Delete one ProviderMetrics
     * const ProviderMetrics = await prisma.providerMetrics.delete({
     *   where: {
     *     // ... filter to delete one ProviderMetrics
     *   }
     * })
     * 
     */
    delete<T extends ProviderMetricsDeleteArgs>(args: SelectSubset<T, ProviderMetricsDeleteArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProviderMetrics.
     * @param {ProviderMetricsUpdateArgs} args - Arguments to update one ProviderMetrics.
     * @example
     * // Update one ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProviderMetricsUpdateArgs>(args: SelectSubset<T, ProviderMetricsUpdateArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProviderMetrics.
     * @param {ProviderMetricsDeleteManyArgs} args - Arguments to filter ProviderMetrics to delete.
     * @example
     * // Delete a few ProviderMetrics
     * const { count } = await prisma.providerMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProviderMetricsDeleteManyArgs>(args?: SelectSubset<T, ProviderMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProviderMetricsUpdateManyArgs>(args: SelectSubset<T, ProviderMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProviderMetrics and returns the data updated in the database.
     * @param {ProviderMetricsUpdateManyAndReturnArgs} args - Arguments to update many ProviderMetrics.
     * @example
     * // Update many ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProviderMetrics and only return the `id`
     * const providerMetricsWithIdOnly = await prisma.providerMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProviderMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProviderMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProviderMetrics.
     * @param {ProviderMetricsUpsertArgs} args - Arguments to update or create a ProviderMetrics.
     * @example
     * // Update or create a ProviderMetrics
     * const providerMetrics = await prisma.providerMetrics.upsert({
     *   create: {
     *     // ... data to create a ProviderMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProviderMetrics we want to update
     *   }
     * })
     */
    upsert<T extends ProviderMetricsUpsertArgs>(args: SelectSubset<T, ProviderMetricsUpsertArgs<ExtArgs>>): Prisma__ProviderMetricsClient<$Result.GetResult<Prisma.$ProviderMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProviderMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsCountArgs} args - Arguments to filter ProviderMetrics to count.
     * @example
     * // Count the number of ProviderMetrics
     * const count = await prisma.providerMetrics.count({
     *   where: {
     *     // ... the filter for the ProviderMetrics we want to count
     *   }
     * })
    **/
    count<T extends ProviderMetricsCountArgs>(
      args?: Subset<T, ProviderMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProviderMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProviderMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProviderMetricsAggregateArgs>(args: Subset<T, ProviderMetricsAggregateArgs>): Prisma.PrismaPromise<GetProviderMetricsAggregateType<T>>

    /**
     * Group by ProviderMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProviderMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProviderMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProviderMetricsGroupByArgs['orderBy'] }
        : { orderBy?: ProviderMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProviderMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProviderMetrics model
   */
  readonly fields: ProviderMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProviderMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProviderMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProviderMetrics model
   */
  interface ProviderMetricsFieldRefs {
    readonly id: FieldRef<"ProviderMetrics", 'String'>
    readonly providerId: FieldRef<"ProviderMetrics", 'String'>
    readonly scrapeDate: FieldRef<"ProviderMetrics", 'DateTime'>
    readonly activitiesFound: FieldRef<"ProviderMetrics", 'Int'>
    readonly activitiesProcessed: FieldRef<"ProviderMetrics", 'Int'>
    readonly dataQualityScore: FieldRef<"ProviderMetrics", 'Float'>
    readonly errors: FieldRef<"ProviderMetrics", 'Json'>
    readonly scrapeDuration: FieldRef<"ProviderMetrics", 'Int'>
    readonly memoryUsed: FieldRef<"ProviderMetrics", 'BigInt'>
    readonly createdAt: FieldRef<"ProviderMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProviderMetrics findUnique
   */
  export type ProviderMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter, which ProviderMetrics to fetch.
     */
    where: ProviderMetricsWhereUniqueInput
  }

  /**
   * ProviderMetrics findUniqueOrThrow
   */
  export type ProviderMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter, which ProviderMetrics to fetch.
     */
    where: ProviderMetricsWhereUniqueInput
  }

  /**
   * ProviderMetrics findFirst
   */
  export type ProviderMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter, which ProviderMetrics to fetch.
     */
    where?: ProviderMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderMetrics to fetch.
     */
    orderBy?: ProviderMetricsOrderByWithRelationInput | ProviderMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderMetrics.
     */
    cursor?: ProviderMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderMetrics.
     */
    distinct?: ProviderMetricsScalarFieldEnum | ProviderMetricsScalarFieldEnum[]
  }

  /**
   * ProviderMetrics findFirstOrThrow
   */
  export type ProviderMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter, which ProviderMetrics to fetch.
     */
    where?: ProviderMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderMetrics to fetch.
     */
    orderBy?: ProviderMetricsOrderByWithRelationInput | ProviderMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProviderMetrics.
     */
    cursor?: ProviderMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProviderMetrics.
     */
    distinct?: ProviderMetricsScalarFieldEnum | ProviderMetricsScalarFieldEnum[]
  }

  /**
   * ProviderMetrics findMany
   */
  export type ProviderMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter, which ProviderMetrics to fetch.
     */
    where?: ProviderMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProviderMetrics to fetch.
     */
    orderBy?: ProviderMetricsOrderByWithRelationInput | ProviderMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProviderMetrics.
     */
    cursor?: ProviderMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProviderMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProviderMetrics.
     */
    skip?: number
    distinct?: ProviderMetricsScalarFieldEnum | ProviderMetricsScalarFieldEnum[]
  }

  /**
   * ProviderMetrics create
   */
  export type ProviderMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * The data needed to create a ProviderMetrics.
     */
    data: XOR<ProviderMetricsCreateInput, ProviderMetricsUncheckedCreateInput>
  }

  /**
   * ProviderMetrics createMany
   */
  export type ProviderMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProviderMetrics.
     */
    data: ProviderMetricsCreateManyInput | ProviderMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProviderMetrics createManyAndReturn
   */
  export type ProviderMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many ProviderMetrics.
     */
    data: ProviderMetricsCreateManyInput | ProviderMetricsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProviderMetrics update
   */
  export type ProviderMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * The data needed to update a ProviderMetrics.
     */
    data: XOR<ProviderMetricsUpdateInput, ProviderMetricsUncheckedUpdateInput>
    /**
     * Choose, which ProviderMetrics to update.
     */
    where: ProviderMetricsWhereUniqueInput
  }

  /**
   * ProviderMetrics updateMany
   */
  export type ProviderMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProviderMetrics.
     */
    data: XOR<ProviderMetricsUpdateManyMutationInput, ProviderMetricsUncheckedUpdateManyInput>
    /**
     * Filter which ProviderMetrics to update
     */
    where?: ProviderMetricsWhereInput
    /**
     * Limit how many ProviderMetrics to update.
     */
    limit?: number
  }

  /**
   * ProviderMetrics updateManyAndReturn
   */
  export type ProviderMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * The data used to update ProviderMetrics.
     */
    data: XOR<ProviderMetricsUpdateManyMutationInput, ProviderMetricsUncheckedUpdateManyInput>
    /**
     * Filter which ProviderMetrics to update
     */
    where?: ProviderMetricsWhereInput
    /**
     * Limit how many ProviderMetrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProviderMetrics upsert
   */
  export type ProviderMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * The filter to search for the ProviderMetrics to update in case it exists.
     */
    where: ProviderMetricsWhereUniqueInput
    /**
     * In case the ProviderMetrics found by the `where` argument doesn't exist, create a new ProviderMetrics with this data.
     */
    create: XOR<ProviderMetricsCreateInput, ProviderMetricsUncheckedCreateInput>
    /**
     * In case the ProviderMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProviderMetricsUpdateInput, ProviderMetricsUncheckedUpdateInput>
  }

  /**
   * ProviderMetrics delete
   */
  export type ProviderMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
    /**
     * Filter which ProviderMetrics to delete.
     */
    where: ProviderMetricsWhereUniqueInput
  }

  /**
   * ProviderMetrics deleteMany
   */
  export type ProviderMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProviderMetrics to delete
     */
    where?: ProviderMetricsWhereInput
    /**
     * Limit how many ProviderMetrics to delete.
     */
    limit?: number
  }

  /**
   * ProviderMetrics without action
   */
  export type ProviderMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProviderMetrics
     */
    select?: ProviderMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProviderMetrics
     */
    omit?: ProviderMetricsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProviderMetricsInclude<ExtArgs> | null
  }


  /**
   * Model ScrapeJob
   */

  export type AggregateScrapeJob = {
    _count: ScrapeJobCountAggregateOutputType | null
    _avg: ScrapeJobAvgAggregateOutputType | null
    _sum: ScrapeJobSumAggregateOutputType | null
    _min: ScrapeJobMinAggregateOutputType | null
    _max: ScrapeJobMaxAggregateOutputType | null
  }

  export type ScrapeJobAvgAggregateOutputType = {
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesRemoved: number | null
  }

  export type ScrapeJobSumAggregateOutputType = {
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesRemoved: number | null
  }

  export type ScrapeJobMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: $Enums.JobStatus | null
    startedAt: Date | null
    completedAt: Date | null
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesRemoved: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type ScrapeJobMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: $Enums.JobStatus | null
    startedAt: Date | null
    completedAt: Date | null
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesRemoved: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type ScrapeJobCountAggregateOutputType = {
    id: number
    providerId: number
    status: number
    startedAt: number
    completedAt: number
    activitiesFound: number
    activitiesCreated: number
    activitiesUpdated: number
    activitiesRemoved: number
    errorMessage: number
    errorDetails: number
    createdAt: number
    _all: number
  }


  export type ScrapeJobAvgAggregateInputType = {
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesRemoved?: true
  }

  export type ScrapeJobSumAggregateInputType = {
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesRemoved?: true
  }

  export type ScrapeJobMinAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesRemoved?: true
    errorMessage?: true
    createdAt?: true
  }

  export type ScrapeJobMaxAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesRemoved?: true
    errorMessage?: true
    createdAt?: true
  }

  export type ScrapeJobCountAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesRemoved?: true
    errorMessage?: true
    errorDetails?: true
    createdAt?: true
    _all?: true
  }

  export type ScrapeJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapeJob to aggregate.
     */
    where?: ScrapeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapeJobs to fetch.
     */
    orderBy?: ScrapeJobOrderByWithRelationInput | ScrapeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScrapeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScrapeJobs
    **/
    _count?: true | ScrapeJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScrapeJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScrapeJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScrapeJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScrapeJobMaxAggregateInputType
  }

  export type GetScrapeJobAggregateType<T extends ScrapeJobAggregateArgs> = {
        [P in keyof T & keyof AggregateScrapeJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScrapeJob[P]>
      : GetScalarType<T[P], AggregateScrapeJob[P]>
  }




  export type ScrapeJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScrapeJobWhereInput
    orderBy?: ScrapeJobOrderByWithAggregationInput | ScrapeJobOrderByWithAggregationInput[]
    by: ScrapeJobScalarFieldEnum[] | ScrapeJobScalarFieldEnum
    having?: ScrapeJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScrapeJobCountAggregateInputType | true
    _avg?: ScrapeJobAvgAggregateInputType
    _sum?: ScrapeJobSumAggregateInputType
    _min?: ScrapeJobMinAggregateInputType
    _max?: ScrapeJobMaxAggregateInputType
  }

  export type ScrapeJobGroupByOutputType = {
    id: string
    providerId: string
    status: $Enums.JobStatus
    startedAt: Date | null
    completedAt: Date | null
    activitiesFound: number
    activitiesCreated: number
    activitiesUpdated: number
    activitiesRemoved: number
    errorMessage: string | null
    errorDetails: JsonValue | null
    createdAt: Date
    _count: ScrapeJobCountAggregateOutputType | null
    _avg: ScrapeJobAvgAggregateOutputType | null
    _sum: ScrapeJobSumAggregateOutputType | null
    _min: ScrapeJobMinAggregateOutputType | null
    _max: ScrapeJobMaxAggregateOutputType | null
  }

  type GetScrapeJobGroupByPayload<T extends ScrapeJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScrapeJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScrapeJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScrapeJobGroupByOutputType[P]>
            : GetScalarType<T[P], ScrapeJobGroupByOutputType[P]>
        }
      >
    >


  export type ScrapeJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesRemoved?: boolean
    errorMessage?: boolean
    errorDetails?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scrapeJob"]>

  export type ScrapeJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesRemoved?: boolean
    errorMessage?: boolean
    errorDetails?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scrapeJob"]>

  export type ScrapeJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesRemoved?: boolean
    errorMessage?: boolean
    errorDetails?: boolean
    createdAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scrapeJob"]>

  export type ScrapeJobSelectScalar = {
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesRemoved?: boolean
    errorMessage?: boolean
    errorDetails?: boolean
    createdAt?: boolean
  }

  export type ScrapeJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "status" | "startedAt" | "completedAt" | "activitiesFound" | "activitiesCreated" | "activitiesUpdated" | "activitiesRemoved" | "errorMessage" | "errorDetails" | "createdAt", ExtArgs["result"]["scrapeJob"]>
  export type ScrapeJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ScrapeJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ScrapeJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $ScrapeJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScrapeJob"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      status: $Enums.JobStatus
      startedAt: Date | null
      completedAt: Date | null
      activitiesFound: number
      activitiesCreated: number
      activitiesUpdated: number
      activitiesRemoved: number
      errorMessage: string | null
      errorDetails: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["scrapeJob"]>
    composites: {}
  }

  type ScrapeJobGetPayload<S extends boolean | null | undefined | ScrapeJobDefaultArgs> = $Result.GetResult<Prisma.$ScrapeJobPayload, S>

  type ScrapeJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScrapeJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScrapeJobCountAggregateInputType | true
    }

  export interface ScrapeJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScrapeJob'], meta: { name: 'ScrapeJob' } }
    /**
     * Find zero or one ScrapeJob that matches the filter.
     * @param {ScrapeJobFindUniqueArgs} args - Arguments to find a ScrapeJob
     * @example
     * // Get one ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScrapeJobFindUniqueArgs>(args: SelectSubset<T, ScrapeJobFindUniqueArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScrapeJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScrapeJobFindUniqueOrThrowArgs} args - Arguments to find a ScrapeJob
     * @example
     * // Get one ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScrapeJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ScrapeJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScrapeJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobFindFirstArgs} args - Arguments to find a ScrapeJob
     * @example
     * // Get one ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScrapeJobFindFirstArgs>(args?: SelectSubset<T, ScrapeJobFindFirstArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScrapeJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobFindFirstOrThrowArgs} args - Arguments to find a ScrapeJob
     * @example
     * // Get one ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScrapeJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ScrapeJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScrapeJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScrapeJobs
     * const scrapeJobs = await prisma.scrapeJob.findMany()
     * 
     * // Get first 10 ScrapeJobs
     * const scrapeJobs = await prisma.scrapeJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scrapeJobWithIdOnly = await prisma.scrapeJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScrapeJobFindManyArgs>(args?: SelectSubset<T, ScrapeJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScrapeJob.
     * @param {ScrapeJobCreateArgs} args - Arguments to create a ScrapeJob.
     * @example
     * // Create one ScrapeJob
     * const ScrapeJob = await prisma.scrapeJob.create({
     *   data: {
     *     // ... data to create a ScrapeJob
     *   }
     * })
     * 
     */
    create<T extends ScrapeJobCreateArgs>(args: SelectSubset<T, ScrapeJobCreateArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScrapeJobs.
     * @param {ScrapeJobCreateManyArgs} args - Arguments to create many ScrapeJobs.
     * @example
     * // Create many ScrapeJobs
     * const scrapeJob = await prisma.scrapeJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScrapeJobCreateManyArgs>(args?: SelectSubset<T, ScrapeJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScrapeJobs and returns the data saved in the database.
     * @param {ScrapeJobCreateManyAndReturnArgs} args - Arguments to create many ScrapeJobs.
     * @example
     * // Create many ScrapeJobs
     * const scrapeJob = await prisma.scrapeJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScrapeJobs and only return the `id`
     * const scrapeJobWithIdOnly = await prisma.scrapeJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScrapeJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ScrapeJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScrapeJob.
     * @param {ScrapeJobDeleteArgs} args - Arguments to delete one ScrapeJob.
     * @example
     * // Delete one ScrapeJob
     * const ScrapeJob = await prisma.scrapeJob.delete({
     *   where: {
     *     // ... filter to delete one ScrapeJob
     *   }
     * })
     * 
     */
    delete<T extends ScrapeJobDeleteArgs>(args: SelectSubset<T, ScrapeJobDeleteArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScrapeJob.
     * @param {ScrapeJobUpdateArgs} args - Arguments to update one ScrapeJob.
     * @example
     * // Update one ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScrapeJobUpdateArgs>(args: SelectSubset<T, ScrapeJobUpdateArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScrapeJobs.
     * @param {ScrapeJobDeleteManyArgs} args - Arguments to filter ScrapeJobs to delete.
     * @example
     * // Delete a few ScrapeJobs
     * const { count } = await prisma.scrapeJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScrapeJobDeleteManyArgs>(args?: SelectSubset<T, ScrapeJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScrapeJobs
     * const scrapeJob = await prisma.scrapeJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScrapeJobUpdateManyArgs>(args: SelectSubset<T, ScrapeJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScrapeJobs and returns the data updated in the database.
     * @param {ScrapeJobUpdateManyAndReturnArgs} args - Arguments to update many ScrapeJobs.
     * @example
     * // Update many ScrapeJobs
     * const scrapeJob = await prisma.scrapeJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScrapeJobs and only return the `id`
     * const scrapeJobWithIdOnly = await prisma.scrapeJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScrapeJobUpdateManyAndReturnArgs>(args: SelectSubset<T, ScrapeJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScrapeJob.
     * @param {ScrapeJobUpsertArgs} args - Arguments to update or create a ScrapeJob.
     * @example
     * // Update or create a ScrapeJob
     * const scrapeJob = await prisma.scrapeJob.upsert({
     *   create: {
     *     // ... data to create a ScrapeJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScrapeJob we want to update
     *   }
     * })
     */
    upsert<T extends ScrapeJobUpsertArgs>(args: SelectSubset<T, ScrapeJobUpsertArgs<ExtArgs>>): Prisma__ScrapeJobClient<$Result.GetResult<Prisma.$ScrapeJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScrapeJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobCountArgs} args - Arguments to filter ScrapeJobs to count.
     * @example
     * // Count the number of ScrapeJobs
     * const count = await prisma.scrapeJob.count({
     *   where: {
     *     // ... the filter for the ScrapeJobs we want to count
     *   }
     * })
    **/
    count<T extends ScrapeJobCountArgs>(
      args?: Subset<T, ScrapeJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScrapeJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScrapeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScrapeJobAggregateArgs>(args: Subset<T, ScrapeJobAggregateArgs>): Prisma.PrismaPromise<GetScrapeJobAggregateType<T>>

    /**
     * Group by ScrapeJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScrapeJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScrapeJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScrapeJobGroupByArgs['orderBy'] }
        : { orderBy?: ScrapeJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScrapeJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScrapeJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScrapeJob model
   */
  readonly fields: ScrapeJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScrapeJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScrapeJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScrapeJob model
   */
  interface ScrapeJobFieldRefs {
    readonly id: FieldRef<"ScrapeJob", 'String'>
    readonly providerId: FieldRef<"ScrapeJob", 'String'>
    readonly status: FieldRef<"ScrapeJob", 'JobStatus'>
    readonly startedAt: FieldRef<"ScrapeJob", 'DateTime'>
    readonly completedAt: FieldRef<"ScrapeJob", 'DateTime'>
    readonly activitiesFound: FieldRef<"ScrapeJob", 'Int'>
    readonly activitiesCreated: FieldRef<"ScrapeJob", 'Int'>
    readonly activitiesUpdated: FieldRef<"ScrapeJob", 'Int'>
    readonly activitiesRemoved: FieldRef<"ScrapeJob", 'Int'>
    readonly errorMessage: FieldRef<"ScrapeJob", 'String'>
    readonly errorDetails: FieldRef<"ScrapeJob", 'Json'>
    readonly createdAt: FieldRef<"ScrapeJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScrapeJob findUnique
   */
  export type ScrapeJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapeJob to fetch.
     */
    where: ScrapeJobWhereUniqueInput
  }

  /**
   * ScrapeJob findUniqueOrThrow
   */
  export type ScrapeJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapeJob to fetch.
     */
    where: ScrapeJobWhereUniqueInput
  }

  /**
   * ScrapeJob findFirst
   */
  export type ScrapeJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapeJob to fetch.
     */
    where?: ScrapeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapeJobs to fetch.
     */
    orderBy?: ScrapeJobOrderByWithRelationInput | ScrapeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapeJobs.
     */
    cursor?: ScrapeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapeJobs.
     */
    distinct?: ScrapeJobScalarFieldEnum | ScrapeJobScalarFieldEnum[]
  }

  /**
   * ScrapeJob findFirstOrThrow
   */
  export type ScrapeJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapeJob to fetch.
     */
    where?: ScrapeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapeJobs to fetch.
     */
    orderBy?: ScrapeJobOrderByWithRelationInput | ScrapeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScrapeJobs.
     */
    cursor?: ScrapeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapeJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScrapeJobs.
     */
    distinct?: ScrapeJobScalarFieldEnum | ScrapeJobScalarFieldEnum[]
  }

  /**
   * ScrapeJob findMany
   */
  export type ScrapeJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter, which ScrapeJobs to fetch.
     */
    where?: ScrapeJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScrapeJobs to fetch.
     */
    orderBy?: ScrapeJobOrderByWithRelationInput | ScrapeJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScrapeJobs.
     */
    cursor?: ScrapeJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScrapeJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScrapeJobs.
     */
    skip?: number
    distinct?: ScrapeJobScalarFieldEnum | ScrapeJobScalarFieldEnum[]
  }

  /**
   * ScrapeJob create
   */
  export type ScrapeJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ScrapeJob.
     */
    data: XOR<ScrapeJobCreateInput, ScrapeJobUncheckedCreateInput>
  }

  /**
   * ScrapeJob createMany
   */
  export type ScrapeJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScrapeJobs.
     */
    data: ScrapeJobCreateManyInput | ScrapeJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScrapeJob createManyAndReturn
   */
  export type ScrapeJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * The data used to create many ScrapeJobs.
     */
    data: ScrapeJobCreateManyInput | ScrapeJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScrapeJob update
   */
  export type ScrapeJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ScrapeJob.
     */
    data: XOR<ScrapeJobUpdateInput, ScrapeJobUncheckedUpdateInput>
    /**
     * Choose, which ScrapeJob to update.
     */
    where: ScrapeJobWhereUniqueInput
  }

  /**
   * ScrapeJob updateMany
   */
  export type ScrapeJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScrapeJobs.
     */
    data: XOR<ScrapeJobUpdateManyMutationInput, ScrapeJobUncheckedUpdateManyInput>
    /**
     * Filter which ScrapeJobs to update
     */
    where?: ScrapeJobWhereInput
    /**
     * Limit how many ScrapeJobs to update.
     */
    limit?: number
  }

  /**
   * ScrapeJob updateManyAndReturn
   */
  export type ScrapeJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * The data used to update ScrapeJobs.
     */
    data: XOR<ScrapeJobUpdateManyMutationInput, ScrapeJobUncheckedUpdateManyInput>
    /**
     * Filter which ScrapeJobs to update
     */
    where?: ScrapeJobWhereInput
    /**
     * Limit how many ScrapeJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScrapeJob upsert
   */
  export type ScrapeJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ScrapeJob to update in case it exists.
     */
    where: ScrapeJobWhereUniqueInput
    /**
     * In case the ScrapeJob found by the `where` argument doesn't exist, create a new ScrapeJob with this data.
     */
    create: XOR<ScrapeJobCreateInput, ScrapeJobUncheckedCreateInput>
    /**
     * In case the ScrapeJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScrapeJobUpdateInput, ScrapeJobUncheckedUpdateInput>
  }

  /**
   * ScrapeJob delete
   */
  export type ScrapeJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
    /**
     * Filter which ScrapeJob to delete.
     */
    where: ScrapeJobWhereUniqueInput
  }

  /**
   * ScrapeJob deleteMany
   */
  export type ScrapeJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScrapeJobs to delete
     */
    where?: ScrapeJobWhereInput
    /**
     * Limit how many ScrapeJobs to delete.
     */
    limit?: number
  }

  /**
   * ScrapeJob without action
   */
  export type ScrapeJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScrapeJob
     */
    select?: ScrapeJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScrapeJob
     */
    omit?: ScrapeJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScrapeJobInclude<ExtArgs> | null
  }


  /**
   * Model ScraperHealthCheck
   */

  export type AggregateScraperHealthCheck = {
    _count: ScraperHealthCheckCountAggregateOutputType | null
    _min: ScraperHealthCheckMinAggregateOutputType | null
    _max: ScraperHealthCheckMaxAggregateOutputType | null
  }

  export type ScraperHealthCheckMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    message: string | null
    checkedAt: Date | null
    resolvedAt: Date | null
  }

  export type ScraperHealthCheckMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    message: string | null
    checkedAt: Date | null
    resolvedAt: Date | null
  }

  export type ScraperHealthCheckCountAggregateOutputType = {
    id: number
    providerId: number
    status: number
    message: number
    details: number
    checkedAt: number
    resolvedAt: number
    _all: number
  }


  export type ScraperHealthCheckMinAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    checkedAt?: true
    resolvedAt?: true
  }

  export type ScraperHealthCheckMaxAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    checkedAt?: true
    resolvedAt?: true
  }

  export type ScraperHealthCheckCountAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    message?: true
    details?: true
    checkedAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type ScraperHealthCheckAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperHealthCheck to aggregate.
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperHealthChecks to fetch.
     */
    orderBy?: ScraperHealthCheckOrderByWithRelationInput | ScraperHealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScraperHealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperHealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperHealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScraperHealthChecks
    **/
    _count?: true | ScraperHealthCheckCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScraperHealthCheckMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScraperHealthCheckMaxAggregateInputType
  }

  export type GetScraperHealthCheckAggregateType<T extends ScraperHealthCheckAggregateArgs> = {
        [P in keyof T & keyof AggregateScraperHealthCheck]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScraperHealthCheck[P]>
      : GetScalarType<T[P], AggregateScraperHealthCheck[P]>
  }




  export type ScraperHealthCheckGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScraperHealthCheckWhereInput
    orderBy?: ScraperHealthCheckOrderByWithAggregationInput | ScraperHealthCheckOrderByWithAggregationInput[]
    by: ScraperHealthCheckScalarFieldEnum[] | ScraperHealthCheckScalarFieldEnum
    having?: ScraperHealthCheckScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScraperHealthCheckCountAggregateInputType | true
    _min?: ScraperHealthCheckMinAggregateInputType
    _max?: ScraperHealthCheckMaxAggregateInputType
  }

  export type ScraperHealthCheckGroupByOutputType = {
    id: string
    providerId: string
    status: string
    message: string | null
    details: JsonValue | null
    checkedAt: Date
    resolvedAt: Date | null
    _count: ScraperHealthCheckCountAggregateOutputType | null
    _min: ScraperHealthCheckMinAggregateOutputType | null
    _max: ScraperHealthCheckMaxAggregateOutputType | null
  }

  type GetScraperHealthCheckGroupByPayload<T extends ScraperHealthCheckGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScraperHealthCheckGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScraperHealthCheckGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScraperHealthCheckGroupByOutputType[P]>
            : GetScalarType<T[P], ScraperHealthCheckGroupByOutputType[P]>
        }
      >
    >


  export type ScraperHealthCheckSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    details?: boolean
    checkedAt?: boolean
    resolvedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scraperHealthCheck"]>

  export type ScraperHealthCheckSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    details?: boolean
    checkedAt?: boolean
    resolvedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scraperHealthCheck"]>

  export type ScraperHealthCheckSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    details?: boolean
    checkedAt?: boolean
    resolvedAt?: boolean
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scraperHealthCheck"]>

  export type ScraperHealthCheckSelectScalar = {
    id?: boolean
    providerId?: boolean
    status?: boolean
    message?: boolean
    details?: boolean
    checkedAt?: boolean
    resolvedAt?: boolean
  }

  export type ScraperHealthCheckOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "status" | "message" | "details" | "checkedAt" | "resolvedAt", ExtArgs["result"]["scraperHealthCheck"]>
  export type ScraperHealthCheckInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ScraperHealthCheckIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }
  export type ScraperHealthCheckIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    provider?: boolean | ProviderDefaultArgs<ExtArgs>
  }

  export type $ScraperHealthCheckPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScraperHealthCheck"
    objects: {
      provider: Prisma.$ProviderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      status: string
      message: string | null
      details: Prisma.JsonValue | null
      checkedAt: Date
      resolvedAt: Date | null
    }, ExtArgs["result"]["scraperHealthCheck"]>
    composites: {}
  }

  type ScraperHealthCheckGetPayload<S extends boolean | null | undefined | ScraperHealthCheckDefaultArgs> = $Result.GetResult<Prisma.$ScraperHealthCheckPayload, S>

  type ScraperHealthCheckCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScraperHealthCheckFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScraperHealthCheckCountAggregateInputType | true
    }

  export interface ScraperHealthCheckDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScraperHealthCheck'], meta: { name: 'ScraperHealthCheck' } }
    /**
     * Find zero or one ScraperHealthCheck that matches the filter.
     * @param {ScraperHealthCheckFindUniqueArgs} args - Arguments to find a ScraperHealthCheck
     * @example
     * // Get one ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScraperHealthCheckFindUniqueArgs>(args: SelectSubset<T, ScraperHealthCheckFindUniqueArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScraperHealthCheck that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScraperHealthCheckFindUniqueOrThrowArgs} args - Arguments to find a ScraperHealthCheck
     * @example
     * // Get one ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScraperHealthCheckFindUniqueOrThrowArgs>(args: SelectSubset<T, ScraperHealthCheckFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScraperHealthCheck that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckFindFirstArgs} args - Arguments to find a ScraperHealthCheck
     * @example
     * // Get one ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScraperHealthCheckFindFirstArgs>(args?: SelectSubset<T, ScraperHealthCheckFindFirstArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScraperHealthCheck that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckFindFirstOrThrowArgs} args - Arguments to find a ScraperHealthCheck
     * @example
     * // Get one ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScraperHealthCheckFindFirstOrThrowArgs>(args?: SelectSubset<T, ScraperHealthCheckFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScraperHealthChecks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScraperHealthChecks
     * const scraperHealthChecks = await prisma.scraperHealthCheck.findMany()
     * 
     * // Get first 10 ScraperHealthChecks
     * const scraperHealthChecks = await prisma.scraperHealthCheck.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scraperHealthCheckWithIdOnly = await prisma.scraperHealthCheck.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScraperHealthCheckFindManyArgs>(args?: SelectSubset<T, ScraperHealthCheckFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScraperHealthCheck.
     * @param {ScraperHealthCheckCreateArgs} args - Arguments to create a ScraperHealthCheck.
     * @example
     * // Create one ScraperHealthCheck
     * const ScraperHealthCheck = await prisma.scraperHealthCheck.create({
     *   data: {
     *     // ... data to create a ScraperHealthCheck
     *   }
     * })
     * 
     */
    create<T extends ScraperHealthCheckCreateArgs>(args: SelectSubset<T, ScraperHealthCheckCreateArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScraperHealthChecks.
     * @param {ScraperHealthCheckCreateManyArgs} args - Arguments to create many ScraperHealthChecks.
     * @example
     * // Create many ScraperHealthChecks
     * const scraperHealthCheck = await prisma.scraperHealthCheck.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScraperHealthCheckCreateManyArgs>(args?: SelectSubset<T, ScraperHealthCheckCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScraperHealthChecks and returns the data saved in the database.
     * @param {ScraperHealthCheckCreateManyAndReturnArgs} args - Arguments to create many ScraperHealthChecks.
     * @example
     * // Create many ScraperHealthChecks
     * const scraperHealthCheck = await prisma.scraperHealthCheck.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScraperHealthChecks and only return the `id`
     * const scraperHealthCheckWithIdOnly = await prisma.scraperHealthCheck.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScraperHealthCheckCreateManyAndReturnArgs>(args?: SelectSubset<T, ScraperHealthCheckCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScraperHealthCheck.
     * @param {ScraperHealthCheckDeleteArgs} args - Arguments to delete one ScraperHealthCheck.
     * @example
     * // Delete one ScraperHealthCheck
     * const ScraperHealthCheck = await prisma.scraperHealthCheck.delete({
     *   where: {
     *     // ... filter to delete one ScraperHealthCheck
     *   }
     * })
     * 
     */
    delete<T extends ScraperHealthCheckDeleteArgs>(args: SelectSubset<T, ScraperHealthCheckDeleteArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScraperHealthCheck.
     * @param {ScraperHealthCheckUpdateArgs} args - Arguments to update one ScraperHealthCheck.
     * @example
     * // Update one ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScraperHealthCheckUpdateArgs>(args: SelectSubset<T, ScraperHealthCheckUpdateArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScraperHealthChecks.
     * @param {ScraperHealthCheckDeleteManyArgs} args - Arguments to filter ScraperHealthChecks to delete.
     * @example
     * // Delete a few ScraperHealthChecks
     * const { count } = await prisma.scraperHealthCheck.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScraperHealthCheckDeleteManyArgs>(args?: SelectSubset<T, ScraperHealthCheckDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScraperHealthChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScraperHealthChecks
     * const scraperHealthCheck = await prisma.scraperHealthCheck.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScraperHealthCheckUpdateManyArgs>(args: SelectSubset<T, ScraperHealthCheckUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScraperHealthChecks and returns the data updated in the database.
     * @param {ScraperHealthCheckUpdateManyAndReturnArgs} args - Arguments to update many ScraperHealthChecks.
     * @example
     * // Update many ScraperHealthChecks
     * const scraperHealthCheck = await prisma.scraperHealthCheck.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScraperHealthChecks and only return the `id`
     * const scraperHealthCheckWithIdOnly = await prisma.scraperHealthCheck.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScraperHealthCheckUpdateManyAndReturnArgs>(args: SelectSubset<T, ScraperHealthCheckUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScraperHealthCheck.
     * @param {ScraperHealthCheckUpsertArgs} args - Arguments to update or create a ScraperHealthCheck.
     * @example
     * // Update or create a ScraperHealthCheck
     * const scraperHealthCheck = await prisma.scraperHealthCheck.upsert({
     *   create: {
     *     // ... data to create a ScraperHealthCheck
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScraperHealthCheck we want to update
     *   }
     * })
     */
    upsert<T extends ScraperHealthCheckUpsertArgs>(args: SelectSubset<T, ScraperHealthCheckUpsertArgs<ExtArgs>>): Prisma__ScraperHealthCheckClient<$Result.GetResult<Prisma.$ScraperHealthCheckPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScraperHealthChecks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckCountArgs} args - Arguments to filter ScraperHealthChecks to count.
     * @example
     * // Count the number of ScraperHealthChecks
     * const count = await prisma.scraperHealthCheck.count({
     *   where: {
     *     // ... the filter for the ScraperHealthChecks we want to count
     *   }
     * })
    **/
    count<T extends ScraperHealthCheckCountArgs>(
      args?: Subset<T, ScraperHealthCheckCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScraperHealthCheckCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScraperHealthCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScraperHealthCheckAggregateArgs>(args: Subset<T, ScraperHealthCheckAggregateArgs>): Prisma.PrismaPromise<GetScraperHealthCheckAggregateType<T>>

    /**
     * Group by ScraperHealthCheck.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperHealthCheckGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScraperHealthCheckGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScraperHealthCheckGroupByArgs['orderBy'] }
        : { orderBy?: ScraperHealthCheckGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScraperHealthCheckGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScraperHealthCheckGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScraperHealthCheck model
   */
  readonly fields: ScraperHealthCheckFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScraperHealthCheck.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScraperHealthCheckClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    provider<T extends ProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProviderDefaultArgs<ExtArgs>>): Prisma__ProviderClient<$Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScraperHealthCheck model
   */
  interface ScraperHealthCheckFieldRefs {
    readonly id: FieldRef<"ScraperHealthCheck", 'String'>
    readonly providerId: FieldRef<"ScraperHealthCheck", 'String'>
    readonly status: FieldRef<"ScraperHealthCheck", 'String'>
    readonly message: FieldRef<"ScraperHealthCheck", 'String'>
    readonly details: FieldRef<"ScraperHealthCheck", 'Json'>
    readonly checkedAt: FieldRef<"ScraperHealthCheck", 'DateTime'>
    readonly resolvedAt: FieldRef<"ScraperHealthCheck", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScraperHealthCheck findUnique
   */
  export type ScraperHealthCheckFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which ScraperHealthCheck to fetch.
     */
    where: ScraperHealthCheckWhereUniqueInput
  }

  /**
   * ScraperHealthCheck findUniqueOrThrow
   */
  export type ScraperHealthCheckFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which ScraperHealthCheck to fetch.
     */
    where: ScraperHealthCheckWhereUniqueInput
  }

  /**
   * ScraperHealthCheck findFirst
   */
  export type ScraperHealthCheckFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which ScraperHealthCheck to fetch.
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperHealthChecks to fetch.
     */
    orderBy?: ScraperHealthCheckOrderByWithRelationInput | ScraperHealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperHealthChecks.
     */
    cursor?: ScraperHealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperHealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperHealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperHealthChecks.
     */
    distinct?: ScraperHealthCheckScalarFieldEnum | ScraperHealthCheckScalarFieldEnum[]
  }

  /**
   * ScraperHealthCheck findFirstOrThrow
   */
  export type ScraperHealthCheckFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which ScraperHealthCheck to fetch.
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperHealthChecks to fetch.
     */
    orderBy?: ScraperHealthCheckOrderByWithRelationInput | ScraperHealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperHealthChecks.
     */
    cursor?: ScraperHealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperHealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperHealthChecks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperHealthChecks.
     */
    distinct?: ScraperHealthCheckScalarFieldEnum | ScraperHealthCheckScalarFieldEnum[]
  }

  /**
   * ScraperHealthCheck findMany
   */
  export type ScraperHealthCheckFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter, which ScraperHealthChecks to fetch.
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperHealthChecks to fetch.
     */
    orderBy?: ScraperHealthCheckOrderByWithRelationInput | ScraperHealthCheckOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScraperHealthChecks.
     */
    cursor?: ScraperHealthCheckWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperHealthChecks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperHealthChecks.
     */
    skip?: number
    distinct?: ScraperHealthCheckScalarFieldEnum | ScraperHealthCheckScalarFieldEnum[]
  }

  /**
   * ScraperHealthCheck create
   */
  export type ScraperHealthCheckCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * The data needed to create a ScraperHealthCheck.
     */
    data: XOR<ScraperHealthCheckCreateInput, ScraperHealthCheckUncheckedCreateInput>
  }

  /**
   * ScraperHealthCheck createMany
   */
  export type ScraperHealthCheckCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScraperHealthChecks.
     */
    data: ScraperHealthCheckCreateManyInput | ScraperHealthCheckCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScraperHealthCheck createManyAndReturn
   */
  export type ScraperHealthCheckCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * The data used to create many ScraperHealthChecks.
     */
    data: ScraperHealthCheckCreateManyInput | ScraperHealthCheckCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScraperHealthCheck update
   */
  export type ScraperHealthCheckUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * The data needed to update a ScraperHealthCheck.
     */
    data: XOR<ScraperHealthCheckUpdateInput, ScraperHealthCheckUncheckedUpdateInput>
    /**
     * Choose, which ScraperHealthCheck to update.
     */
    where: ScraperHealthCheckWhereUniqueInput
  }

  /**
   * ScraperHealthCheck updateMany
   */
  export type ScraperHealthCheckUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScraperHealthChecks.
     */
    data: XOR<ScraperHealthCheckUpdateManyMutationInput, ScraperHealthCheckUncheckedUpdateManyInput>
    /**
     * Filter which ScraperHealthChecks to update
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * Limit how many ScraperHealthChecks to update.
     */
    limit?: number
  }

  /**
   * ScraperHealthCheck updateManyAndReturn
   */
  export type ScraperHealthCheckUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * The data used to update ScraperHealthChecks.
     */
    data: XOR<ScraperHealthCheckUpdateManyMutationInput, ScraperHealthCheckUncheckedUpdateManyInput>
    /**
     * Filter which ScraperHealthChecks to update
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * Limit how many ScraperHealthChecks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScraperHealthCheck upsert
   */
  export type ScraperHealthCheckUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * The filter to search for the ScraperHealthCheck to update in case it exists.
     */
    where: ScraperHealthCheckWhereUniqueInput
    /**
     * In case the ScraperHealthCheck found by the `where` argument doesn't exist, create a new ScraperHealthCheck with this data.
     */
    create: XOR<ScraperHealthCheckCreateInput, ScraperHealthCheckUncheckedCreateInput>
    /**
     * In case the ScraperHealthCheck was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScraperHealthCheckUpdateInput, ScraperHealthCheckUncheckedUpdateInput>
  }

  /**
   * ScraperHealthCheck delete
   */
  export type ScraperHealthCheckDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
    /**
     * Filter which ScraperHealthCheck to delete.
     */
    where: ScraperHealthCheckWhereUniqueInput
  }

  /**
   * ScraperHealthCheck deleteMany
   */
  export type ScraperHealthCheckDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperHealthChecks to delete
     */
    where?: ScraperHealthCheckWhereInput
    /**
     * Limit how many ScraperHealthChecks to delete.
     */
    limit?: number
  }

  /**
   * ScraperHealthCheck without action
   */
  export type ScraperHealthCheckDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperHealthCheck
     */
    select?: ScraperHealthCheckSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperHealthCheck
     */
    omit?: ScraperHealthCheckOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScraperHealthCheckInclude<ExtArgs> | null
  }


  /**
   * Model ScraperRun
   */

  export type AggregateScraperRun = {
    _count: ScraperRunCountAggregateOutputType | null
    _avg: ScraperRunAvgAggregateOutputType | null
    _sum: ScraperRunSumAggregateOutputType | null
    _min: ScraperRunMinAggregateOutputType | null
    _max: ScraperRunMaxAggregateOutputType | null
  }

  export type ScraperRunAvgAggregateOutputType = {
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesDeactivated: number | null
    activitiesPurged: number | null
  }

  export type ScraperRunSumAggregateOutputType = {
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesDeactivated: number | null
    activitiesPurged: number | null
  }

  export type ScraperRunMinAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesDeactivated: number | null
    activitiesPurged: number | null
    errorMessage: string | null
  }

  export type ScraperRunMaxAggregateOutputType = {
    id: string | null
    providerId: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    activitiesFound: number | null
    activitiesCreated: number | null
    activitiesUpdated: number | null
    activitiesDeactivated: number | null
    activitiesPurged: number | null
    errorMessage: string | null
  }

  export type ScraperRunCountAggregateOutputType = {
    id: number
    providerId: number
    status: number
    startedAt: number
    completedAt: number
    activitiesFound: number
    activitiesCreated: number
    activitiesUpdated: number
    activitiesDeactivated: number
    activitiesPurged: number
    errorMessage: number
    logs: number
    _all: number
  }


  export type ScraperRunAvgAggregateInputType = {
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesDeactivated?: true
    activitiesPurged?: true
  }

  export type ScraperRunSumAggregateInputType = {
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesDeactivated?: true
    activitiesPurged?: true
  }

  export type ScraperRunMinAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesDeactivated?: true
    activitiesPurged?: true
    errorMessage?: true
  }

  export type ScraperRunMaxAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesDeactivated?: true
    activitiesPurged?: true
    errorMessage?: true
  }

  export type ScraperRunCountAggregateInputType = {
    id?: true
    providerId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    activitiesFound?: true
    activitiesCreated?: true
    activitiesUpdated?: true
    activitiesDeactivated?: true
    activitiesPurged?: true
    errorMessage?: true
    logs?: true
    _all?: true
  }

  export type ScraperRunAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperRun to aggregate.
     */
    where?: ScraperRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperRuns to fetch.
     */
    orderBy?: ScraperRunOrderByWithRelationInput | ScraperRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScraperRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScraperRuns
    **/
    _count?: true | ScraperRunCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScraperRunAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScraperRunSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScraperRunMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScraperRunMaxAggregateInputType
  }

  export type GetScraperRunAggregateType<T extends ScraperRunAggregateArgs> = {
        [P in keyof T & keyof AggregateScraperRun]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScraperRun[P]>
      : GetScalarType<T[P], AggregateScraperRun[P]>
  }




  export type ScraperRunGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScraperRunWhereInput
    orderBy?: ScraperRunOrderByWithAggregationInput | ScraperRunOrderByWithAggregationInput[]
    by: ScraperRunScalarFieldEnum[] | ScraperRunScalarFieldEnum
    having?: ScraperRunScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScraperRunCountAggregateInputType | true
    _avg?: ScraperRunAvgAggregateInputType
    _sum?: ScraperRunSumAggregateInputType
    _min?: ScraperRunMinAggregateInputType
    _max?: ScraperRunMaxAggregateInputType
  }

  export type ScraperRunGroupByOutputType = {
    id: string
    providerId: string
    status: string
    startedAt: Date
    completedAt: Date | null
    activitiesFound: number
    activitiesCreated: number
    activitiesUpdated: number
    activitiesDeactivated: number
    activitiesPurged: number
    errorMessage: string | null
    logs: JsonValue | null
    _count: ScraperRunCountAggregateOutputType | null
    _avg: ScraperRunAvgAggregateOutputType | null
    _sum: ScraperRunSumAggregateOutputType | null
    _min: ScraperRunMinAggregateOutputType | null
    _max: ScraperRunMaxAggregateOutputType | null
  }

  type GetScraperRunGroupByPayload<T extends ScraperRunGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScraperRunGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScraperRunGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScraperRunGroupByOutputType[P]>
            : GetScalarType<T[P], ScraperRunGroupByOutputType[P]>
        }
      >
    >


  export type ScraperRunSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesDeactivated?: boolean
    activitiesPurged?: boolean
    errorMessage?: boolean
    logs?: boolean
  }, ExtArgs["result"]["scraperRun"]>

  export type ScraperRunSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesDeactivated?: boolean
    activitiesPurged?: boolean
    errorMessage?: boolean
    logs?: boolean
  }, ExtArgs["result"]["scraperRun"]>

  export type ScraperRunSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesDeactivated?: boolean
    activitiesPurged?: boolean
    errorMessage?: boolean
    logs?: boolean
  }, ExtArgs["result"]["scraperRun"]>

  export type ScraperRunSelectScalar = {
    id?: boolean
    providerId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    activitiesFound?: boolean
    activitiesCreated?: boolean
    activitiesUpdated?: boolean
    activitiesDeactivated?: boolean
    activitiesPurged?: boolean
    errorMessage?: boolean
    logs?: boolean
  }

  export type ScraperRunOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "providerId" | "status" | "startedAt" | "completedAt" | "activitiesFound" | "activitiesCreated" | "activitiesUpdated" | "activitiesDeactivated" | "activitiesPurged" | "errorMessage" | "logs", ExtArgs["result"]["scraperRun"]>

  export type $ScraperRunPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScraperRun"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      providerId: string
      status: string
      startedAt: Date
      completedAt: Date | null
      activitiesFound: number
      activitiesCreated: number
      activitiesUpdated: number
      activitiesDeactivated: number
      activitiesPurged: number
      errorMessage: string | null
      logs: Prisma.JsonValue | null
    }, ExtArgs["result"]["scraperRun"]>
    composites: {}
  }

  type ScraperRunGetPayload<S extends boolean | null | undefined | ScraperRunDefaultArgs> = $Result.GetResult<Prisma.$ScraperRunPayload, S>

  type ScraperRunCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScraperRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScraperRunCountAggregateInputType | true
    }

  export interface ScraperRunDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScraperRun'], meta: { name: 'ScraperRun' } }
    /**
     * Find zero or one ScraperRun that matches the filter.
     * @param {ScraperRunFindUniqueArgs} args - Arguments to find a ScraperRun
     * @example
     * // Get one ScraperRun
     * const scraperRun = await prisma.scraperRun.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScraperRunFindUniqueArgs>(args: SelectSubset<T, ScraperRunFindUniqueArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScraperRun that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScraperRunFindUniqueOrThrowArgs} args - Arguments to find a ScraperRun
     * @example
     * // Get one ScraperRun
     * const scraperRun = await prisma.scraperRun.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScraperRunFindUniqueOrThrowArgs>(args: SelectSubset<T, ScraperRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScraperRun that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunFindFirstArgs} args - Arguments to find a ScraperRun
     * @example
     * // Get one ScraperRun
     * const scraperRun = await prisma.scraperRun.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScraperRunFindFirstArgs>(args?: SelectSubset<T, ScraperRunFindFirstArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScraperRun that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunFindFirstOrThrowArgs} args - Arguments to find a ScraperRun
     * @example
     * // Get one ScraperRun
     * const scraperRun = await prisma.scraperRun.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScraperRunFindFirstOrThrowArgs>(args?: SelectSubset<T, ScraperRunFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScraperRuns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScraperRuns
     * const scraperRuns = await prisma.scraperRun.findMany()
     * 
     * // Get first 10 ScraperRuns
     * const scraperRuns = await prisma.scraperRun.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scraperRunWithIdOnly = await prisma.scraperRun.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScraperRunFindManyArgs>(args?: SelectSubset<T, ScraperRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScraperRun.
     * @param {ScraperRunCreateArgs} args - Arguments to create a ScraperRun.
     * @example
     * // Create one ScraperRun
     * const ScraperRun = await prisma.scraperRun.create({
     *   data: {
     *     // ... data to create a ScraperRun
     *   }
     * })
     * 
     */
    create<T extends ScraperRunCreateArgs>(args: SelectSubset<T, ScraperRunCreateArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScraperRuns.
     * @param {ScraperRunCreateManyArgs} args - Arguments to create many ScraperRuns.
     * @example
     * // Create many ScraperRuns
     * const scraperRun = await prisma.scraperRun.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScraperRunCreateManyArgs>(args?: SelectSubset<T, ScraperRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScraperRuns and returns the data saved in the database.
     * @param {ScraperRunCreateManyAndReturnArgs} args - Arguments to create many ScraperRuns.
     * @example
     * // Create many ScraperRuns
     * const scraperRun = await prisma.scraperRun.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScraperRuns and only return the `id`
     * const scraperRunWithIdOnly = await prisma.scraperRun.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScraperRunCreateManyAndReturnArgs>(args?: SelectSubset<T, ScraperRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScraperRun.
     * @param {ScraperRunDeleteArgs} args - Arguments to delete one ScraperRun.
     * @example
     * // Delete one ScraperRun
     * const ScraperRun = await prisma.scraperRun.delete({
     *   where: {
     *     // ... filter to delete one ScraperRun
     *   }
     * })
     * 
     */
    delete<T extends ScraperRunDeleteArgs>(args: SelectSubset<T, ScraperRunDeleteArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScraperRun.
     * @param {ScraperRunUpdateArgs} args - Arguments to update one ScraperRun.
     * @example
     * // Update one ScraperRun
     * const scraperRun = await prisma.scraperRun.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScraperRunUpdateArgs>(args: SelectSubset<T, ScraperRunUpdateArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScraperRuns.
     * @param {ScraperRunDeleteManyArgs} args - Arguments to filter ScraperRuns to delete.
     * @example
     * // Delete a few ScraperRuns
     * const { count } = await prisma.scraperRun.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScraperRunDeleteManyArgs>(args?: SelectSubset<T, ScraperRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScraperRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScraperRuns
     * const scraperRun = await prisma.scraperRun.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScraperRunUpdateManyArgs>(args: SelectSubset<T, ScraperRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScraperRuns and returns the data updated in the database.
     * @param {ScraperRunUpdateManyAndReturnArgs} args - Arguments to update many ScraperRuns.
     * @example
     * // Update many ScraperRuns
     * const scraperRun = await prisma.scraperRun.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScraperRuns and only return the `id`
     * const scraperRunWithIdOnly = await prisma.scraperRun.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScraperRunUpdateManyAndReturnArgs>(args: SelectSubset<T, ScraperRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScraperRun.
     * @param {ScraperRunUpsertArgs} args - Arguments to update or create a ScraperRun.
     * @example
     * // Update or create a ScraperRun
     * const scraperRun = await prisma.scraperRun.upsert({
     *   create: {
     *     // ... data to create a ScraperRun
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScraperRun we want to update
     *   }
     * })
     */
    upsert<T extends ScraperRunUpsertArgs>(args: SelectSubset<T, ScraperRunUpsertArgs<ExtArgs>>): Prisma__ScraperRunClient<$Result.GetResult<Prisma.$ScraperRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScraperRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunCountArgs} args - Arguments to filter ScraperRuns to count.
     * @example
     * // Count the number of ScraperRuns
     * const count = await prisma.scraperRun.count({
     *   where: {
     *     // ... the filter for the ScraperRuns we want to count
     *   }
     * })
    **/
    count<T extends ScraperRunCountArgs>(
      args?: Subset<T, ScraperRunCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScraperRunCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScraperRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScraperRunAggregateArgs>(args: Subset<T, ScraperRunAggregateArgs>): Prisma.PrismaPromise<GetScraperRunAggregateType<T>>

    /**
     * Group by ScraperRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScraperRunGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScraperRunGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScraperRunGroupByArgs['orderBy'] }
        : { orderBy?: ScraperRunGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScraperRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScraperRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScraperRun model
   */
  readonly fields: ScraperRunFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScraperRun.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScraperRunClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScraperRun model
   */
  interface ScraperRunFieldRefs {
    readonly id: FieldRef<"ScraperRun", 'String'>
    readonly providerId: FieldRef<"ScraperRun", 'String'>
    readonly status: FieldRef<"ScraperRun", 'String'>
    readonly startedAt: FieldRef<"ScraperRun", 'DateTime'>
    readonly completedAt: FieldRef<"ScraperRun", 'DateTime'>
    readonly activitiesFound: FieldRef<"ScraperRun", 'Int'>
    readonly activitiesCreated: FieldRef<"ScraperRun", 'Int'>
    readonly activitiesUpdated: FieldRef<"ScraperRun", 'Int'>
    readonly activitiesDeactivated: FieldRef<"ScraperRun", 'Int'>
    readonly activitiesPurged: FieldRef<"ScraperRun", 'Int'>
    readonly errorMessage: FieldRef<"ScraperRun", 'String'>
    readonly logs: FieldRef<"ScraperRun", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ScraperRun findUnique
   */
  export type ScraperRunFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter, which ScraperRun to fetch.
     */
    where: ScraperRunWhereUniqueInput
  }

  /**
   * ScraperRun findUniqueOrThrow
   */
  export type ScraperRunFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter, which ScraperRun to fetch.
     */
    where: ScraperRunWhereUniqueInput
  }

  /**
   * ScraperRun findFirst
   */
  export type ScraperRunFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter, which ScraperRun to fetch.
     */
    where?: ScraperRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperRuns to fetch.
     */
    orderBy?: ScraperRunOrderByWithRelationInput | ScraperRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperRuns.
     */
    cursor?: ScraperRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperRuns.
     */
    distinct?: ScraperRunScalarFieldEnum | ScraperRunScalarFieldEnum[]
  }

  /**
   * ScraperRun findFirstOrThrow
   */
  export type ScraperRunFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter, which ScraperRun to fetch.
     */
    where?: ScraperRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperRuns to fetch.
     */
    orderBy?: ScraperRunOrderByWithRelationInput | ScraperRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScraperRuns.
     */
    cursor?: ScraperRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScraperRuns.
     */
    distinct?: ScraperRunScalarFieldEnum | ScraperRunScalarFieldEnum[]
  }

  /**
   * ScraperRun findMany
   */
  export type ScraperRunFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter, which ScraperRuns to fetch.
     */
    where?: ScraperRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScraperRuns to fetch.
     */
    orderBy?: ScraperRunOrderByWithRelationInput | ScraperRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScraperRuns.
     */
    cursor?: ScraperRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScraperRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScraperRuns.
     */
    skip?: number
    distinct?: ScraperRunScalarFieldEnum | ScraperRunScalarFieldEnum[]
  }

  /**
   * ScraperRun create
   */
  export type ScraperRunCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * The data needed to create a ScraperRun.
     */
    data: XOR<ScraperRunCreateInput, ScraperRunUncheckedCreateInput>
  }

  /**
   * ScraperRun createMany
   */
  export type ScraperRunCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScraperRuns.
     */
    data: ScraperRunCreateManyInput | ScraperRunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScraperRun createManyAndReturn
   */
  export type ScraperRunCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * The data used to create many ScraperRuns.
     */
    data: ScraperRunCreateManyInput | ScraperRunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScraperRun update
   */
  export type ScraperRunUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * The data needed to update a ScraperRun.
     */
    data: XOR<ScraperRunUpdateInput, ScraperRunUncheckedUpdateInput>
    /**
     * Choose, which ScraperRun to update.
     */
    where: ScraperRunWhereUniqueInput
  }

  /**
   * ScraperRun updateMany
   */
  export type ScraperRunUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScraperRuns.
     */
    data: XOR<ScraperRunUpdateManyMutationInput, ScraperRunUncheckedUpdateManyInput>
    /**
     * Filter which ScraperRuns to update
     */
    where?: ScraperRunWhereInput
    /**
     * Limit how many ScraperRuns to update.
     */
    limit?: number
  }

  /**
   * ScraperRun updateManyAndReturn
   */
  export type ScraperRunUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * The data used to update ScraperRuns.
     */
    data: XOR<ScraperRunUpdateManyMutationInput, ScraperRunUncheckedUpdateManyInput>
    /**
     * Filter which ScraperRuns to update
     */
    where?: ScraperRunWhereInput
    /**
     * Limit how many ScraperRuns to update.
     */
    limit?: number
  }

  /**
   * ScraperRun upsert
   */
  export type ScraperRunUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * The filter to search for the ScraperRun to update in case it exists.
     */
    where: ScraperRunWhereUniqueInput
    /**
     * In case the ScraperRun found by the `where` argument doesn't exist, create a new ScraperRun with this data.
     */
    create: XOR<ScraperRunCreateInput, ScraperRunUncheckedCreateInput>
    /**
     * In case the ScraperRun was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScraperRunUpdateInput, ScraperRunUncheckedUpdateInput>
  }

  /**
   * ScraperRun delete
   */
  export type ScraperRunDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
    /**
     * Filter which ScraperRun to delete.
     */
    where: ScraperRunWhereUniqueInput
  }

  /**
   * ScraperRun deleteMany
   */
  export type ScraperRunDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScraperRuns to delete
     */
    where?: ScraperRunWhereInput
    /**
     * Limit how many ScraperRuns to delete.
     */
    limit?: number
  }

  /**
   * ScraperRun without action
   */
  export type ScraperRunDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScraperRun
     */
    select?: ScraperRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScraperRun
     */
    omit?: ScraperRunOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordHash: string | null
    phoneNumber: string | null
    isVerified: boolean | null
    verificationToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordHash: string | null
    phoneNumber: string | null
    isVerified: boolean | null
    verificationToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    preferences: number
    createdAt: number
    updatedAt: number
    passwordHash: number
    phoneNumber: number
    isVerified: number
    verificationToken: number
    resetToken: number
    resetTokenExpiry: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    passwordHash?: true
    phoneNumber?: true
    isVerified?: true
    verificationToken?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    passwordHash?: true
    phoneNumber?: true
    isVerified?: true
    verificationToken?: true
    resetToken?: true
    resetTokenExpiry?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    passwordHash?: true
    phoneNumber?: true
    isVerified?: true
    verificationToken?: true
    resetToken?: true
    resetTokenExpiry?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    preferences: JsonValue
    createdAt: Date
    updatedAt: Date
    passwordHash: string
    phoneNumber: string | null
    isVerified: boolean
    verificationToken: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordHash?: boolean
    phoneNumber?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    sharedWithMe?: boolean | User$sharedWithMeArgs<ExtArgs>
    myShares?: boolean | User$mySharesArgs<ExtArgs>
    children?: boolean | User$childrenArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    receivedInvitations?: boolean | User$receivedInvitationsArgs<ExtArgs>
    sentInvitations?: boolean | User$sentInvitationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordHash?: boolean
    phoneNumber?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordHash?: boolean
    phoneNumber?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordHash?: boolean
    phoneNumber?: boolean
    isVerified?: boolean
    verificationToken?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "preferences" | "createdAt" | "updatedAt" | "passwordHash" | "phoneNumber" | "isVerified" | "verificationToken" | "resetToken" | "resetTokenExpiry", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sharedWithMe?: boolean | User$sharedWithMeArgs<ExtArgs>
    myShares?: boolean | User$mySharesArgs<ExtArgs>
    children?: boolean | User$childrenArgs<ExtArgs>
    favorites?: boolean | User$favoritesArgs<ExtArgs>
    receivedInvitations?: boolean | User$receivedInvitationsArgs<ExtArgs>
    sentInvitations?: boolean | User$sentInvitationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sharedWithMe: Prisma.$ActivitySharePayload<ExtArgs>[]
      myShares: Prisma.$ActivitySharePayload<ExtArgs>[]
      children: Prisma.$ChildPayload<ExtArgs>[]
      favorites: Prisma.$FavoritePayload<ExtArgs>[]
      receivedInvitations: Prisma.$InvitationPayload<ExtArgs>[]
      sentInvitations: Prisma.$InvitationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      preferences: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      passwordHash: string
      phoneNumber: string | null
      isVerified: boolean
      verificationToken: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sharedWithMe<T extends User$sharedWithMeArgs<ExtArgs> = {}>(args?: Subset<T, User$sharedWithMeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    myShares<T extends User$mySharesArgs<ExtArgs> = {}>(args?: Subset<T, User$mySharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivitySharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    children<T extends User$childrenArgs<ExtArgs> = {}>(args?: Subset<T, User$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favorites<T extends User$favoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedInvitations<T extends User$receivedInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentInvitations<T extends User$sentInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly preferences: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly verificationToken: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sharedWithMe
   */
  export type User$sharedWithMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    where?: ActivityShareWhereInput
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    cursor?: ActivityShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityShareScalarFieldEnum | ActivityShareScalarFieldEnum[]
  }

  /**
   * User.myShares
   */
  export type User$mySharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityShare
     */
    select?: ActivityShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityShare
     */
    omit?: ActivityShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityShareInclude<ExtArgs> | null
    where?: ActivityShareWhereInput
    orderBy?: ActivityShareOrderByWithRelationInput | ActivityShareOrderByWithRelationInput[]
    cursor?: ActivityShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityShareScalarFieldEnum | ActivityShareScalarFieldEnum[]
  }

  /**
   * User.children
   */
  export type User$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Child
     */
    select?: ChildSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Child
     */
    omit?: ChildOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChildInclude<ExtArgs> | null
    where?: ChildWhereInput
    orderBy?: ChildOrderByWithRelationInput | ChildOrderByWithRelationInput[]
    cursor?: ChildWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChildScalarFieldEnum | ChildScalarFieldEnum[]
  }

  /**
   * User.favorites
   */
  export type User$favoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Favorite
     */
    omit?: FavoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * User.receivedInvitations
   */
  export type User$receivedInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * User.sentInvitations
   */
  export type User$sentInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invitation
     */
    select?: InvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invitation
     */
    omit?: InvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvitationInclude<ExtArgs> | null
    where?: InvitationWhereInput
    orderBy?: InvitationOrderByWithRelationInput | InvitationOrderByWithRelationInput[]
    cursor?: InvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvitationScalarFieldEnum | InvitationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    ageMin: number | null
    ageMax: number | null
    displayOrder: number | null
  }

  export type CategorySumAggregateOutputType = {
    ageMin: number | null
    ageMax: number | null
    displayOrder: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ageMin: number | null
    ageMax: number | null
    requiresParent: boolean | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    ageMin: number | null
    ageMax: number | null
    requiresParent: boolean | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ageMin: number
    ageMax: number
    requiresParent: number
    displayOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    ageMin?: true
    ageMax?: true
    displayOrder?: true
  }

  export type CategorySumAggregateInputType = {
    ageMin?: true
    ageMax?: true
    displayOrder?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ageMin?: true
    ageMax?: true
    requiresParent?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ageMin?: true
    ageMax?: true
    requiresParent?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ageMin?: true
    ageMax?: true
    requiresParent?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    ageMin: number | null
    ageMax: number | null
    requiresParent: boolean
    displayOrder: number
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ageMin?: boolean
    ageMax?: boolean
    requiresParent?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activities?: boolean | Category$activitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ageMin?: boolean
    ageMax?: boolean
    requiresParent?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ageMin?: boolean
    ageMax?: boolean
    requiresParent?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    ageMin?: boolean
    ageMax?: boolean
    requiresParent?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "ageMin" | "ageMax" | "requiresParent" | "displayOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | Category$activitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      activities: Prisma.$ActivityCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      ageMin: number | null
      ageMax: number | null
      requiresParent: boolean
      displayOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends Category$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Category$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly ageMin: FieldRef<"Category", 'Int'>
    readonly ageMax: FieldRef<"Category", 'Int'>
    readonly requiresParent: FieldRef<"Category", 'Boolean'>
    readonly displayOrder: FieldRef<"Category", 'Int'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.activities
   */
  export type Category$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    where?: ActivityCategoryWhereInput
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    cursor?: ActivityCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityCategoryScalarFieldEnum | ActivityCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model ActivityCategory
   */

  export type AggregateActivityCategory = {
    _count: ActivityCategoryCountAggregateOutputType | null
    _min: ActivityCategoryMinAggregateOutputType | null
    _max: ActivityCategoryMaxAggregateOutputType | null
  }

  export type ActivityCategoryMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type ActivityCategoryMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    categoryId: string | null
    createdAt: Date | null
  }

  export type ActivityCategoryCountAggregateOutputType = {
    id: number
    activityId: number
    categoryId: number
    createdAt: number
    _all: number
  }


  export type ActivityCategoryMinAggregateInputType = {
    id?: true
    activityId?: true
    categoryId?: true
    createdAt?: true
  }

  export type ActivityCategoryMaxAggregateInputType = {
    id?: true
    activityId?: true
    categoryId?: true
    createdAt?: true
  }

  export type ActivityCategoryCountAggregateInputType = {
    id?: true
    activityId?: true
    categoryId?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityCategory to aggregate.
     */
    where?: ActivityCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityCategories to fetch.
     */
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityCategories
    **/
    _count?: true | ActivityCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityCategoryMaxAggregateInputType
  }

  export type GetActivityCategoryAggregateType<T extends ActivityCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityCategory[P]>
      : GetScalarType<T[P], AggregateActivityCategory[P]>
  }




  export type ActivityCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityCategoryWhereInput
    orderBy?: ActivityCategoryOrderByWithAggregationInput | ActivityCategoryOrderByWithAggregationInput[]
    by: ActivityCategoryScalarFieldEnum[] | ActivityCategoryScalarFieldEnum
    having?: ActivityCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCategoryCountAggregateInputType | true
    _min?: ActivityCategoryMinAggregateInputType
    _max?: ActivityCategoryMaxAggregateInputType
  }

  export type ActivityCategoryGroupByOutputType = {
    id: string
    activityId: string
    categoryId: string
    createdAt: Date
    _count: ActivityCategoryCountAggregateOutputType | null
    _min: ActivityCategoryMinAggregateOutputType | null
    _max: ActivityCategoryMaxAggregateOutputType | null
  }

  type GetActivityCategoryGroupByPayload<T extends ActivityCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ActivityCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityCategory"]>

  export type ActivityCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityCategory"]>

  export type ActivityCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    categoryId?: boolean
    createdAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityCategory"]>

  export type ActivityCategorySelectScalar = {
    id?: boolean
    activityId?: boolean
    categoryId?: boolean
    createdAt?: boolean
  }

  export type ActivityCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "categoryId" | "createdAt", ExtArgs["result"]["activityCategory"]>
  export type ActivityCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type ActivityCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type ActivityCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $ActivityCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityCategory"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      categoryId: string
      createdAt: Date
    }, ExtArgs["result"]["activityCategory"]>
    composites: {}
  }

  type ActivityCategoryGetPayload<S extends boolean | null | undefined | ActivityCategoryDefaultArgs> = $Result.GetResult<Prisma.$ActivityCategoryPayload, S>

  type ActivityCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCategoryCountAggregateInputType | true
    }

  export interface ActivityCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityCategory'], meta: { name: 'ActivityCategory' } }
    /**
     * Find zero or one ActivityCategory that matches the filter.
     * @param {ActivityCategoryFindUniqueArgs} args - Arguments to find a ActivityCategory
     * @example
     * // Get one ActivityCategory
     * const activityCategory = await prisma.activityCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityCategoryFindUniqueArgs>(args: SelectSubset<T, ActivityCategoryFindUniqueArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityCategoryFindUniqueOrThrowArgs} args - Arguments to find a ActivityCategory
     * @example
     * // Get one ActivityCategory
     * const activityCategory = await prisma.activityCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryFindFirstArgs} args - Arguments to find a ActivityCategory
     * @example
     * // Get one ActivityCategory
     * const activityCategory = await prisma.activityCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityCategoryFindFirstArgs>(args?: SelectSubset<T, ActivityCategoryFindFirstArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryFindFirstOrThrowArgs} args - Arguments to find a ActivityCategory
     * @example
     * // Get one ActivityCategory
     * const activityCategory = await prisma.activityCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityCategories
     * const activityCategories = await prisma.activityCategory.findMany()
     * 
     * // Get first 10 ActivityCategories
     * const activityCategories = await prisma.activityCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityCategoryWithIdOnly = await prisma.activityCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityCategoryFindManyArgs>(args?: SelectSubset<T, ActivityCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityCategory.
     * @param {ActivityCategoryCreateArgs} args - Arguments to create a ActivityCategory.
     * @example
     * // Create one ActivityCategory
     * const ActivityCategory = await prisma.activityCategory.create({
     *   data: {
     *     // ... data to create a ActivityCategory
     *   }
     * })
     * 
     */
    create<T extends ActivityCategoryCreateArgs>(args: SelectSubset<T, ActivityCategoryCreateArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityCategories.
     * @param {ActivityCategoryCreateManyArgs} args - Arguments to create many ActivityCategories.
     * @example
     * // Create many ActivityCategories
     * const activityCategory = await prisma.activityCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCategoryCreateManyArgs>(args?: SelectSubset<T, ActivityCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityCategories and returns the data saved in the database.
     * @param {ActivityCategoryCreateManyAndReturnArgs} args - Arguments to create many ActivityCategories.
     * @example
     * // Create many ActivityCategories
     * const activityCategory = await prisma.activityCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityCategories and only return the `id`
     * const activityCategoryWithIdOnly = await prisma.activityCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityCategory.
     * @param {ActivityCategoryDeleteArgs} args - Arguments to delete one ActivityCategory.
     * @example
     * // Delete one ActivityCategory
     * const ActivityCategory = await prisma.activityCategory.delete({
     *   where: {
     *     // ... filter to delete one ActivityCategory
     *   }
     * })
     * 
     */
    delete<T extends ActivityCategoryDeleteArgs>(args: SelectSubset<T, ActivityCategoryDeleteArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityCategory.
     * @param {ActivityCategoryUpdateArgs} args - Arguments to update one ActivityCategory.
     * @example
     * // Update one ActivityCategory
     * const activityCategory = await prisma.activityCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityCategoryUpdateArgs>(args: SelectSubset<T, ActivityCategoryUpdateArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityCategories.
     * @param {ActivityCategoryDeleteManyArgs} args - Arguments to filter ActivityCategories to delete.
     * @example
     * // Delete a few ActivityCategories
     * const { count } = await prisma.activityCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityCategoryDeleteManyArgs>(args?: SelectSubset<T, ActivityCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityCategories
     * const activityCategory = await prisma.activityCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityCategoryUpdateManyArgs>(args: SelectSubset<T, ActivityCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityCategories and returns the data updated in the database.
     * @param {ActivityCategoryUpdateManyAndReturnArgs} args - Arguments to update many ActivityCategories.
     * @example
     * // Update many ActivityCategories
     * const activityCategory = await prisma.activityCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityCategories and only return the `id`
     * const activityCategoryWithIdOnly = await prisma.activityCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityCategory.
     * @param {ActivityCategoryUpsertArgs} args - Arguments to update or create a ActivityCategory.
     * @example
     * // Update or create a ActivityCategory
     * const activityCategory = await prisma.activityCategory.upsert({
     *   create: {
     *     // ... data to create a ActivityCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityCategory we want to update
     *   }
     * })
     */
    upsert<T extends ActivityCategoryUpsertArgs>(args: SelectSubset<T, ActivityCategoryUpsertArgs<ExtArgs>>): Prisma__ActivityCategoryClient<$Result.GetResult<Prisma.$ActivityCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryCountArgs} args - Arguments to filter ActivityCategories to count.
     * @example
     * // Count the number of ActivityCategories
     * const count = await prisma.activityCategory.count({
     *   where: {
     *     // ... the filter for the ActivityCategories we want to count
     *   }
     * })
    **/
    count<T extends ActivityCategoryCountArgs>(
      args?: Subset<T, ActivityCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityCategoryAggregateArgs>(args: Subset<T, ActivityCategoryAggregateArgs>): Prisma.PrismaPromise<GetActivityCategoryAggregateType<T>>

    /**
     * Group by ActivityCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ActivityCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityCategory model
   */
  readonly fields: ActivityCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityCategory model
   */
  interface ActivityCategoryFieldRefs {
    readonly id: FieldRef<"ActivityCategory", 'String'>
    readonly activityId: FieldRef<"ActivityCategory", 'String'>
    readonly categoryId: FieldRef<"ActivityCategory", 'String'>
    readonly createdAt: FieldRef<"ActivityCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityCategory findUnique
   */
  export type ActivityCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityCategory to fetch.
     */
    where: ActivityCategoryWhereUniqueInput
  }

  /**
   * ActivityCategory findUniqueOrThrow
   */
  export type ActivityCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityCategory to fetch.
     */
    where: ActivityCategoryWhereUniqueInput
  }

  /**
   * ActivityCategory findFirst
   */
  export type ActivityCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityCategory to fetch.
     */
    where?: ActivityCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityCategories to fetch.
     */
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityCategories.
     */
    cursor?: ActivityCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityCategories.
     */
    distinct?: ActivityCategoryScalarFieldEnum | ActivityCategoryScalarFieldEnum[]
  }

  /**
   * ActivityCategory findFirstOrThrow
   */
  export type ActivityCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityCategory to fetch.
     */
    where?: ActivityCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityCategories to fetch.
     */
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityCategories.
     */
    cursor?: ActivityCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityCategories.
     */
    distinct?: ActivityCategoryScalarFieldEnum | ActivityCategoryScalarFieldEnum[]
  }

  /**
   * ActivityCategory findMany
   */
  export type ActivityCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityCategories to fetch.
     */
    where?: ActivityCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityCategories to fetch.
     */
    orderBy?: ActivityCategoryOrderByWithRelationInput | ActivityCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityCategories.
     */
    cursor?: ActivityCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityCategories.
     */
    skip?: number
    distinct?: ActivityCategoryScalarFieldEnum | ActivityCategoryScalarFieldEnum[]
  }

  /**
   * ActivityCategory create
   */
  export type ActivityCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityCategory.
     */
    data: XOR<ActivityCategoryCreateInput, ActivityCategoryUncheckedCreateInput>
  }

  /**
   * ActivityCategory createMany
   */
  export type ActivityCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityCategories.
     */
    data: ActivityCategoryCreateManyInput | ActivityCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityCategory createManyAndReturn
   */
  export type ActivityCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityCategories.
     */
    data: ActivityCategoryCreateManyInput | ActivityCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityCategory update
   */
  export type ActivityCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityCategory.
     */
    data: XOR<ActivityCategoryUpdateInput, ActivityCategoryUncheckedUpdateInput>
    /**
     * Choose, which ActivityCategory to update.
     */
    where: ActivityCategoryWhereUniqueInput
  }

  /**
   * ActivityCategory updateMany
   */
  export type ActivityCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityCategories.
     */
    data: XOR<ActivityCategoryUpdateManyMutationInput, ActivityCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityCategories to update
     */
    where?: ActivityCategoryWhereInput
    /**
     * Limit how many ActivityCategories to update.
     */
    limit?: number
  }

  /**
   * ActivityCategory updateManyAndReturn
   */
  export type ActivityCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ActivityCategories.
     */
    data: XOR<ActivityCategoryUpdateManyMutationInput, ActivityCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityCategories to update
     */
    where?: ActivityCategoryWhereInput
    /**
     * Limit how many ActivityCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityCategory upsert
   */
  export type ActivityCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityCategory to update in case it exists.
     */
    where: ActivityCategoryWhereUniqueInput
    /**
     * In case the ActivityCategory found by the `where` argument doesn't exist, create a new ActivityCategory with this data.
     */
    create: XOR<ActivityCategoryCreateInput, ActivityCategoryUncheckedCreateInput>
    /**
     * In case the ActivityCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityCategoryUpdateInput, ActivityCategoryUncheckedUpdateInput>
  }

  /**
   * ActivityCategory delete
   */
  export type ActivityCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
    /**
     * Filter which ActivityCategory to delete.
     */
    where: ActivityCategoryWhereUniqueInput
  }

  /**
   * ActivityCategory deleteMany
   */
  export type ActivityCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityCategories to delete
     */
    where?: ActivityCategoryWhereInput
    /**
     * Limit how many ActivityCategories to delete.
     */
    limit?: number
  }

  /**
   * ActivityCategory without action
   */
  export type ActivityCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCategory
     */
    select?: ActivityCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityCategory
     */
    omit?: ActivityCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityCategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    externalId: 'externalId',
    name: 'name',
    category: 'category',
    subcategory: 'subcategory',
    description: 'description',
    schedule: 'schedule',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd',
    registrationDate: 'registrationDate',
    ageMin: 'ageMin',
    ageMax: 'ageMax',
    cost: 'cost',
    spotsAvailable: 'spotsAvailable',
    totalSpots: 'totalSpots',
    locationId: 'locationId',
    registrationUrl: 'registrationUrl',
    courseId: 'courseId',
    isActive: 'isActive',
    isUpdated: 'isUpdated',
    lastSeenAt: 'lastSeenAt',
    rawData: 'rawData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    dayOfWeek: 'dayOfWeek',
    registrationEndDate: 'registrationEndDate',
    registrationEndTime: 'registrationEndTime',
    costIncludesTax: 'costIncludesTax',
    taxAmount: 'taxAmount',
    startTime: 'startTime',
    endTime: 'endTime',
    courseDetails: 'courseDetails',
    dates: 'dates',
    registrationStatus: 'registrationStatus',
    registrationButtonText: 'registrationButtonText',
    detailUrl: 'detailUrl',
    instructor: 'instructor',
    hasMultipleSessions: 'hasMultipleSessions',
    sessionCount: 'sessionCount',
    hasPrerequisites: 'hasPrerequisites',
    fullDescription: 'fullDescription',
    whatToBring: 'whatToBring',
    prerequisites: 'prerequisites',
    directRegistrationUrl: 'directRegistrationUrl',
    contactInfo: 'contactInfo',
    activitySubtypeId: 'activitySubtypeId',
    activityTypeId: 'activityTypeId'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const ActivityHistoryScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    changeType: 'changeType',
    previousData: 'previousData',
    newData: 'newData',
    changedFields: 'changedFields',
    createdAt: 'createdAt'
  };

  export type ActivityHistoryScalarFieldEnum = (typeof ActivityHistoryScalarFieldEnum)[keyof typeof ActivityHistoryScalarFieldEnum]


  export const ActivityPrerequisiteScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    name: 'name',
    description: 'description',
    url: 'url',
    courseId: 'courseId',
    isRequired: 'isRequired',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActivityPrerequisiteScalarFieldEnum = (typeof ActivityPrerequisiteScalarFieldEnum)[keyof typeof ActivityPrerequisiteScalarFieldEnum]


  export const ActivitySessionScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    sessionNumber: 'sessionNumber',
    date: 'date',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    location: 'location',
    subLocation: 'subLocation',
    instructor: 'instructor',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActivitySessionScalarFieldEnum = (typeof ActivitySessionScalarFieldEnum)[keyof typeof ActivitySessionScalarFieldEnum]


  export const ActivityShareScalarFieldEnum: {
    id: 'id',
    sharingUserId: 'sharingUserId',
    sharedWithUserId: 'sharedWithUserId',
    permissionLevel: 'permissionLevel',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActivityShareScalarFieldEnum = (typeof ActivityShareScalarFieldEnum)[keyof typeof ActivityShareScalarFieldEnum]


  export const ActivityShareProfileScalarFieldEnum: {
    id: 'id',
    activityShareId: 'activityShareId',
    childId: 'childId',
    canViewInterested: 'canViewInterested',
    canViewRegistered: 'canViewRegistered',
    canViewCompleted: 'canViewCompleted',
    canViewNotes: 'canViewNotes',
    createdAt: 'createdAt'
  };

  export type ActivityShareProfileScalarFieldEnum = (typeof ActivityShareProfileScalarFieldEnum)[keyof typeof ActivityShareProfileScalarFieldEnum]


  export const ActivitySubtypeScalarFieldEnum: {
    id: 'id',
    activityTypeId: 'activityTypeId',
    code: 'code',
    name: 'name',
    description: 'description',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    displayOrder: 'displayOrder'
  };

  export type ActivitySubtypeScalarFieldEnum = (typeof ActivitySubtypeScalarFieldEnum)[keyof typeof ActivitySubtypeScalarFieldEnum]


  export const ActivityTypeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    iconName: 'iconName',
    imageUrl: 'imageUrl',
    displayOrder: 'displayOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ActivityTypeScalarFieldEnum = (typeof ActivityTypeScalarFieldEnum)[keyof typeof ActivityTypeScalarFieldEnum]


  export const ChildScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    avatarUrl: 'avatarUrl',
    interests: 'interests',
    notes: 'notes',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChildScalarFieldEnum = (typeof ChildScalarFieldEnum)[keyof typeof ChildScalarFieldEnum]


  export const ChildActivityScalarFieldEnum: {
    id: 'id',
    childId: 'childId',
    activityId: 'activityId',
    status: 'status',
    registeredAt: 'registeredAt',
    completedAt: 'completedAt',
    notes: 'notes',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChildActivityScalarFieldEnum = (typeof ChildActivityScalarFieldEnum)[keyof typeof ChildActivityScalarFieldEnum]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    activityId: 'activityId',
    createdAt: 'createdAt',
    notifyOnChange: 'notifyOnChange'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const InvitationScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    recipientEmail: 'recipientEmail',
    recipientUserId: 'recipientUserId',
    status: 'status',
    message: 'message',
    token: 'token',
    expiresAt: 'expiresAt',
    acceptedAt: 'acceptedAt',
    createdAt: 'createdAt'
  };

  export type InvitationScalarFieldEnum = (typeof InvitationScalarFieldEnum)[keyof typeof InvitationScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    province: 'province',
    country: 'country',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    cityId: 'cityId',
    postalCode: 'postalCode',
    latitude: 'latitude',
    longitude: 'longitude',
    facility: 'facility',
    fullAddress: 'fullAddress',
    mapUrl: 'mapUrl',
    placeId: 'placeId',
    phoneNumber: 'phoneNumber',
    website: 'website',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const ProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    scraperConfig: 'scraperConfig',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    region: 'region',
    contactInfo: 'contactInfo',
    platform: 'platform'
  };

  export type ProviderScalarFieldEnum = (typeof ProviderScalarFieldEnum)[keyof typeof ProviderScalarFieldEnum]


  export const ProviderMetricsScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    scrapeDate: 'scrapeDate',
    activitiesFound: 'activitiesFound',
    activitiesProcessed: 'activitiesProcessed',
    dataQualityScore: 'dataQualityScore',
    errors: 'errors',
    scrapeDuration: 'scrapeDuration',
    memoryUsed: 'memoryUsed',
    createdAt: 'createdAt'
  };

  export type ProviderMetricsScalarFieldEnum = (typeof ProviderMetricsScalarFieldEnum)[keyof typeof ProviderMetricsScalarFieldEnum]


  export const ScrapeJobScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    activitiesFound: 'activitiesFound',
    activitiesCreated: 'activitiesCreated',
    activitiesUpdated: 'activitiesUpdated',
    activitiesRemoved: 'activitiesRemoved',
    errorMessage: 'errorMessage',
    errorDetails: 'errorDetails',
    createdAt: 'createdAt'
  };

  export type ScrapeJobScalarFieldEnum = (typeof ScrapeJobScalarFieldEnum)[keyof typeof ScrapeJobScalarFieldEnum]


  export const ScraperHealthCheckScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    status: 'status',
    message: 'message',
    details: 'details',
    checkedAt: 'checkedAt',
    resolvedAt: 'resolvedAt'
  };

  export type ScraperHealthCheckScalarFieldEnum = (typeof ScraperHealthCheckScalarFieldEnum)[keyof typeof ScraperHealthCheckScalarFieldEnum]


  export const ScraperRunScalarFieldEnum: {
    id: 'id',
    providerId: 'providerId',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    activitiesFound: 'activitiesFound',
    activitiesCreated: 'activitiesCreated',
    activitiesUpdated: 'activitiesUpdated',
    activitiesDeactivated: 'activitiesDeactivated',
    activitiesPurged: 'activitiesPurged',
    errorMessage: 'errorMessage',
    logs: 'logs'
  };

  export type ScraperRunScalarFieldEnum = (typeof ScraperRunScalarFieldEnum)[keyof typeof ScraperRunScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    passwordHash: 'passwordHash',
    phoneNumber: 'phoneNumber',
    isVerified: 'isVerified',
    verificationToken: 'verificationToken',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ageMin: 'ageMin',
    ageMax: 'ageMax',
    requiresParent: 'requiresParent',
    displayOrder: 'displayOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ActivityCategoryScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    categoryId: 'categoryId',
    createdAt: 'createdAt'
  };

  export type ActivityCategoryScalarFieldEnum = (typeof ActivityCategoryScalarFieldEnum)[keyof typeof ActivityCategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    providerId?: StringFilter<"Activity"> | string
    externalId?: StringFilter<"Activity"> | string
    name?: StringFilter<"Activity"> | string
    category?: StringFilter<"Activity"> | string
    subcategory?: StringNullableFilter<"Activity"> | string | null
    description?: StringNullableFilter<"Activity"> | string | null
    schedule?: StringNullableFilter<"Activity"> | string | null
    dateStart?: DateTimeNullableFilter<"Activity"> | Date | string | null
    dateEnd?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    ageMin?: IntNullableFilter<"Activity"> | number | null
    ageMax?: IntNullableFilter<"Activity"> | number | null
    cost?: FloatFilter<"Activity"> | number
    spotsAvailable?: IntNullableFilter<"Activity"> | number | null
    totalSpots?: IntNullableFilter<"Activity"> | number | null
    locationId?: StringNullableFilter<"Activity"> | string | null
    registrationUrl?: StringNullableFilter<"Activity"> | string | null
    courseId?: StringNullableFilter<"Activity"> | string | null
    isActive?: BoolFilter<"Activity"> | boolean
    isUpdated?: BoolFilter<"Activity"> | boolean
    lastSeenAt?: DateTimeFilter<"Activity"> | Date | string
    rawData?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    dayOfWeek?: StringNullableListFilter<"Activity">
    registrationEndDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationEndTime?: StringNullableFilter<"Activity"> | string | null
    costIncludesTax?: BoolFilter<"Activity"> | boolean
    taxAmount?: FloatNullableFilter<"Activity"> | number | null
    startTime?: StringNullableFilter<"Activity"> | string | null
    endTime?: StringNullableFilter<"Activity"> | string | null
    courseDetails?: StringNullableFilter<"Activity"> | string | null
    dates?: StringNullableFilter<"Activity"> | string | null
    registrationStatus?: StringNullableFilter<"Activity"> | string | null
    registrationButtonText?: StringNullableFilter<"Activity"> | string | null
    detailUrl?: StringNullableFilter<"Activity"> | string | null
    instructor?: StringNullableFilter<"Activity"> | string | null
    hasMultipleSessions?: BoolFilter<"Activity"> | boolean
    sessionCount?: IntFilter<"Activity"> | number
    hasPrerequisites?: BoolFilter<"Activity"> | boolean
    fullDescription?: StringNullableFilter<"Activity"> | string | null
    whatToBring?: StringNullableFilter<"Activity"> | string | null
    prerequisites?: StringNullableFilter<"Activity"> | string | null
    directRegistrationUrl?: StringNullableFilter<"Activity"> | string | null
    contactInfo?: StringNullableFilter<"Activity"> | string | null
    activitySubtypeId?: StringNullableFilter<"Activity"> | string | null
    activityTypeId?: StringNullableFilter<"Activity"> | string | null
    activitySubtype?: XOR<ActivitySubtypeNullableScalarRelationFilter, ActivitySubtypeWhereInput> | null
    activityType?: XOR<ActivityTypeNullableScalarRelationFilter, ActivityTypeWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    prerequisitesList?: ActivityPrerequisiteListRelationFilter
    sessions?: ActivitySessionListRelationFilter
    childActivities?: ChildActivityListRelationFilter
    favorites?: FavoriteListRelationFilter
    categories?: ActivityCategoryListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    dateStart?: SortOrderInput | SortOrder
    dateEnd?: SortOrderInput | SortOrder
    registrationDate?: SortOrderInput | SortOrder
    ageMin?: SortOrderInput | SortOrder
    ageMax?: SortOrderInput | SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrderInput | SortOrder
    totalSpots?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    registrationUrl?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isUpdated?: SortOrder
    lastSeenAt?: SortOrder
    rawData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dayOfWeek?: SortOrder
    registrationEndDate?: SortOrderInput | SortOrder
    registrationEndTime?: SortOrderInput | SortOrder
    costIncludesTax?: SortOrder
    taxAmount?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    courseDetails?: SortOrderInput | SortOrder
    dates?: SortOrderInput | SortOrder
    registrationStatus?: SortOrderInput | SortOrder
    registrationButtonText?: SortOrderInput | SortOrder
    detailUrl?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    hasMultipleSessions?: SortOrder
    sessionCount?: SortOrder
    hasPrerequisites?: SortOrder
    fullDescription?: SortOrderInput | SortOrder
    whatToBring?: SortOrderInput | SortOrder
    prerequisites?: SortOrderInput | SortOrder
    directRegistrationUrl?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    activitySubtypeId?: SortOrderInput | SortOrder
    activityTypeId?: SortOrderInput | SortOrder
    activitySubtype?: ActivitySubtypeOrderByWithRelationInput
    activityType?: ActivityTypeOrderByWithRelationInput
    location?: LocationOrderByWithRelationInput
    provider?: ProviderOrderByWithRelationInput
    prerequisitesList?: ActivityPrerequisiteOrderByRelationAggregateInput
    sessions?: ActivitySessionOrderByRelationAggregateInput
    childActivities?: ChildActivityOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
    categories?: ActivityCategoryOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    providerId_externalId?: ActivityProviderIdExternalIdCompoundUniqueInput
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    providerId?: StringFilter<"Activity"> | string
    externalId?: StringFilter<"Activity"> | string
    name?: StringFilter<"Activity"> | string
    category?: StringFilter<"Activity"> | string
    subcategory?: StringNullableFilter<"Activity"> | string | null
    description?: StringNullableFilter<"Activity"> | string | null
    schedule?: StringNullableFilter<"Activity"> | string | null
    dateStart?: DateTimeNullableFilter<"Activity"> | Date | string | null
    dateEnd?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    ageMin?: IntNullableFilter<"Activity"> | number | null
    ageMax?: IntNullableFilter<"Activity"> | number | null
    cost?: FloatFilter<"Activity"> | number
    spotsAvailable?: IntNullableFilter<"Activity"> | number | null
    totalSpots?: IntNullableFilter<"Activity"> | number | null
    locationId?: StringNullableFilter<"Activity"> | string | null
    registrationUrl?: StringNullableFilter<"Activity"> | string | null
    courseId?: StringNullableFilter<"Activity"> | string | null
    isActive?: BoolFilter<"Activity"> | boolean
    isUpdated?: BoolFilter<"Activity"> | boolean
    lastSeenAt?: DateTimeFilter<"Activity"> | Date | string
    rawData?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    dayOfWeek?: StringNullableListFilter<"Activity">
    registrationEndDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationEndTime?: StringNullableFilter<"Activity"> | string | null
    costIncludesTax?: BoolFilter<"Activity"> | boolean
    taxAmount?: FloatNullableFilter<"Activity"> | number | null
    startTime?: StringNullableFilter<"Activity"> | string | null
    endTime?: StringNullableFilter<"Activity"> | string | null
    courseDetails?: StringNullableFilter<"Activity"> | string | null
    dates?: StringNullableFilter<"Activity"> | string | null
    registrationStatus?: StringNullableFilter<"Activity"> | string | null
    registrationButtonText?: StringNullableFilter<"Activity"> | string | null
    detailUrl?: StringNullableFilter<"Activity"> | string | null
    instructor?: StringNullableFilter<"Activity"> | string | null
    hasMultipleSessions?: BoolFilter<"Activity"> | boolean
    sessionCount?: IntFilter<"Activity"> | number
    hasPrerequisites?: BoolFilter<"Activity"> | boolean
    fullDescription?: StringNullableFilter<"Activity"> | string | null
    whatToBring?: StringNullableFilter<"Activity"> | string | null
    prerequisites?: StringNullableFilter<"Activity"> | string | null
    directRegistrationUrl?: StringNullableFilter<"Activity"> | string | null
    contactInfo?: StringNullableFilter<"Activity"> | string | null
    activitySubtypeId?: StringNullableFilter<"Activity"> | string | null
    activityTypeId?: StringNullableFilter<"Activity"> | string | null
    activitySubtype?: XOR<ActivitySubtypeNullableScalarRelationFilter, ActivitySubtypeWhereInput> | null
    activityType?: XOR<ActivityTypeNullableScalarRelationFilter, ActivityTypeWhereInput> | null
    location?: XOR<LocationNullableScalarRelationFilter, LocationWhereInput> | null
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
    prerequisitesList?: ActivityPrerequisiteListRelationFilter
    sessions?: ActivitySessionListRelationFilter
    childActivities?: ChildActivityListRelationFilter
    favorites?: FavoriteListRelationFilter
    categories?: ActivityCategoryListRelationFilter
  }, "id" | "providerId_externalId">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    schedule?: SortOrderInput | SortOrder
    dateStart?: SortOrderInput | SortOrder
    dateEnd?: SortOrderInput | SortOrder
    registrationDate?: SortOrderInput | SortOrder
    ageMin?: SortOrderInput | SortOrder
    ageMax?: SortOrderInput | SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrderInput | SortOrder
    totalSpots?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    registrationUrl?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    isUpdated?: SortOrder
    lastSeenAt?: SortOrder
    rawData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dayOfWeek?: SortOrder
    registrationEndDate?: SortOrderInput | SortOrder
    registrationEndTime?: SortOrderInput | SortOrder
    costIncludesTax?: SortOrder
    taxAmount?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    courseDetails?: SortOrderInput | SortOrder
    dates?: SortOrderInput | SortOrder
    registrationStatus?: SortOrderInput | SortOrder
    registrationButtonText?: SortOrderInput | SortOrder
    detailUrl?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    hasMultipleSessions?: SortOrder
    sessionCount?: SortOrder
    hasPrerequisites?: SortOrder
    fullDescription?: SortOrderInput | SortOrder
    whatToBring?: SortOrderInput | SortOrder
    prerequisites?: SortOrderInput | SortOrder
    directRegistrationUrl?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    activitySubtypeId?: SortOrderInput | SortOrder
    activityTypeId?: SortOrderInput | SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    providerId?: StringWithAggregatesFilter<"Activity"> | string
    externalId?: StringWithAggregatesFilter<"Activity"> | string
    name?: StringWithAggregatesFilter<"Activity"> | string
    category?: StringWithAggregatesFilter<"Activity"> | string
    subcategory?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    description?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    schedule?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    dateStart?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    dateEnd?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    registrationDate?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    ageMin?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    ageMax?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    cost?: FloatWithAggregatesFilter<"Activity"> | number
    spotsAvailable?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    totalSpots?: IntNullableWithAggregatesFilter<"Activity"> | number | null
    locationId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    registrationUrl?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    courseId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    isActive?: BoolWithAggregatesFilter<"Activity"> | boolean
    isUpdated?: BoolWithAggregatesFilter<"Activity"> | boolean
    lastSeenAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    rawData?: JsonNullableWithAggregatesFilter<"Activity">
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    dayOfWeek?: StringNullableListFilter<"Activity">
    registrationEndDate?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
    registrationEndTime?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    costIncludesTax?: BoolWithAggregatesFilter<"Activity"> | boolean
    taxAmount?: FloatNullableWithAggregatesFilter<"Activity"> | number | null
    startTime?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    endTime?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    courseDetails?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    dates?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    registrationStatus?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    registrationButtonText?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    detailUrl?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    instructor?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    hasMultipleSessions?: BoolWithAggregatesFilter<"Activity"> | boolean
    sessionCount?: IntWithAggregatesFilter<"Activity"> | number
    hasPrerequisites?: BoolWithAggregatesFilter<"Activity"> | boolean
    fullDescription?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    whatToBring?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    prerequisites?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    directRegistrationUrl?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    contactInfo?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    activitySubtypeId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    activityTypeId?: StringNullableWithAggregatesFilter<"Activity"> | string | null
  }

  export type ActivityHistoryWhereInput = {
    AND?: ActivityHistoryWhereInput | ActivityHistoryWhereInput[]
    OR?: ActivityHistoryWhereInput[]
    NOT?: ActivityHistoryWhereInput | ActivityHistoryWhereInput[]
    id?: StringFilter<"ActivityHistory"> | string
    activityId?: StringFilter<"ActivityHistory"> | string
    changeType?: StringFilter<"ActivityHistory"> | string
    previousData?: JsonNullableFilter<"ActivityHistory">
    newData?: JsonNullableFilter<"ActivityHistory">
    changedFields?: StringNullableListFilter<"ActivityHistory">
    createdAt?: DateTimeFilter<"ActivityHistory"> | Date | string
  }

  export type ActivityHistoryOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    changeType?: SortOrder
    previousData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    changedFields?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityHistoryWhereInput | ActivityHistoryWhereInput[]
    OR?: ActivityHistoryWhereInput[]
    NOT?: ActivityHistoryWhereInput | ActivityHistoryWhereInput[]
    activityId?: StringFilter<"ActivityHistory"> | string
    changeType?: StringFilter<"ActivityHistory"> | string
    previousData?: JsonNullableFilter<"ActivityHistory">
    newData?: JsonNullableFilter<"ActivityHistory">
    changedFields?: StringNullableListFilter<"ActivityHistory">
    createdAt?: DateTimeFilter<"ActivityHistory"> | Date | string
  }, "id">

  export type ActivityHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    changeType?: SortOrder
    previousData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    changedFields?: SortOrder
    createdAt?: SortOrder
    _count?: ActivityHistoryCountOrderByAggregateInput
    _max?: ActivityHistoryMaxOrderByAggregateInput
    _min?: ActivityHistoryMinOrderByAggregateInput
  }

  export type ActivityHistoryScalarWhereWithAggregatesInput = {
    AND?: ActivityHistoryScalarWhereWithAggregatesInput | ActivityHistoryScalarWhereWithAggregatesInput[]
    OR?: ActivityHistoryScalarWhereWithAggregatesInput[]
    NOT?: ActivityHistoryScalarWhereWithAggregatesInput | ActivityHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityHistory"> | string
    activityId?: StringWithAggregatesFilter<"ActivityHistory"> | string
    changeType?: StringWithAggregatesFilter<"ActivityHistory"> | string
    previousData?: JsonNullableWithAggregatesFilter<"ActivityHistory">
    newData?: JsonNullableWithAggregatesFilter<"ActivityHistory">
    changedFields?: StringNullableListFilter<"ActivityHistory">
    createdAt?: DateTimeWithAggregatesFilter<"ActivityHistory"> | Date | string
  }

  export type ActivityPrerequisiteWhereInput = {
    AND?: ActivityPrerequisiteWhereInput | ActivityPrerequisiteWhereInput[]
    OR?: ActivityPrerequisiteWhereInput[]
    NOT?: ActivityPrerequisiteWhereInput | ActivityPrerequisiteWhereInput[]
    id?: StringFilter<"ActivityPrerequisite"> | string
    activityId?: StringFilter<"ActivityPrerequisite"> | string
    name?: StringFilter<"ActivityPrerequisite"> | string
    description?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    url?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    courseId?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    isRequired?: BoolFilter<"ActivityPrerequisite"> | boolean
    createdAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type ActivityPrerequisiteOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivityPrerequisiteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityPrerequisiteWhereInput | ActivityPrerequisiteWhereInput[]
    OR?: ActivityPrerequisiteWhereInput[]
    NOT?: ActivityPrerequisiteWhereInput | ActivityPrerequisiteWhereInput[]
    activityId?: StringFilter<"ActivityPrerequisite"> | string
    name?: StringFilter<"ActivityPrerequisite"> | string
    description?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    url?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    courseId?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    isRequired?: BoolFilter<"ActivityPrerequisite"> | boolean
    createdAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type ActivityPrerequisiteOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActivityPrerequisiteCountOrderByAggregateInput
    _max?: ActivityPrerequisiteMaxOrderByAggregateInput
    _min?: ActivityPrerequisiteMinOrderByAggregateInput
  }

  export type ActivityPrerequisiteScalarWhereWithAggregatesInput = {
    AND?: ActivityPrerequisiteScalarWhereWithAggregatesInput | ActivityPrerequisiteScalarWhereWithAggregatesInput[]
    OR?: ActivityPrerequisiteScalarWhereWithAggregatesInput[]
    NOT?: ActivityPrerequisiteScalarWhereWithAggregatesInput | ActivityPrerequisiteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityPrerequisite"> | string
    activityId?: StringWithAggregatesFilter<"ActivityPrerequisite"> | string
    name?: StringWithAggregatesFilter<"ActivityPrerequisite"> | string
    description?: StringNullableWithAggregatesFilter<"ActivityPrerequisite"> | string | null
    url?: StringNullableWithAggregatesFilter<"ActivityPrerequisite"> | string | null
    courseId?: StringNullableWithAggregatesFilter<"ActivityPrerequisite"> | string | null
    isRequired?: BoolWithAggregatesFilter<"ActivityPrerequisite"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ActivityPrerequisite"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivityPrerequisite"> | Date | string
  }

  export type ActivitySessionWhereInput = {
    AND?: ActivitySessionWhereInput | ActivitySessionWhereInput[]
    OR?: ActivitySessionWhereInput[]
    NOT?: ActivitySessionWhereInput | ActivitySessionWhereInput[]
    id?: StringFilter<"ActivitySession"> | string
    activityId?: StringFilter<"ActivitySession"> | string
    sessionNumber?: IntNullableFilter<"ActivitySession"> | number | null
    date?: StringNullableFilter<"ActivitySession"> | string | null
    dayOfWeek?: StringNullableFilter<"ActivitySession"> | string | null
    startTime?: StringNullableFilter<"ActivitySession"> | string | null
    endTime?: StringNullableFilter<"ActivitySession"> | string | null
    location?: StringNullableFilter<"ActivitySession"> | string | null
    subLocation?: StringNullableFilter<"ActivitySession"> | string | null
    instructor?: StringNullableFilter<"ActivitySession"> | string | null
    notes?: StringNullableFilter<"ActivitySession"> | string | null
    createdAt?: DateTimeFilter<"ActivitySession"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySession"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type ActivitySessionOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    sessionNumber?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    dayOfWeek?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    subLocation?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivitySessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivitySessionWhereInput | ActivitySessionWhereInput[]
    OR?: ActivitySessionWhereInput[]
    NOT?: ActivitySessionWhereInput | ActivitySessionWhereInput[]
    activityId?: StringFilter<"ActivitySession"> | string
    sessionNumber?: IntNullableFilter<"ActivitySession"> | number | null
    date?: StringNullableFilter<"ActivitySession"> | string | null
    dayOfWeek?: StringNullableFilter<"ActivitySession"> | string | null
    startTime?: StringNullableFilter<"ActivitySession"> | string | null
    endTime?: StringNullableFilter<"ActivitySession"> | string | null
    location?: StringNullableFilter<"ActivitySession"> | string | null
    subLocation?: StringNullableFilter<"ActivitySession"> | string | null
    instructor?: StringNullableFilter<"ActivitySession"> | string | null
    notes?: StringNullableFilter<"ActivitySession"> | string | null
    createdAt?: DateTimeFilter<"ActivitySession"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySession"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type ActivitySessionOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    sessionNumber?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    dayOfWeek?: SortOrderInput | SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    subLocation?: SortOrderInput | SortOrder
    instructor?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActivitySessionCountOrderByAggregateInput
    _avg?: ActivitySessionAvgOrderByAggregateInput
    _max?: ActivitySessionMaxOrderByAggregateInput
    _min?: ActivitySessionMinOrderByAggregateInput
    _sum?: ActivitySessionSumOrderByAggregateInput
  }

  export type ActivitySessionScalarWhereWithAggregatesInput = {
    AND?: ActivitySessionScalarWhereWithAggregatesInput | ActivitySessionScalarWhereWithAggregatesInput[]
    OR?: ActivitySessionScalarWhereWithAggregatesInput[]
    NOT?: ActivitySessionScalarWhereWithAggregatesInput | ActivitySessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivitySession"> | string
    activityId?: StringWithAggregatesFilter<"ActivitySession"> | string
    sessionNumber?: IntNullableWithAggregatesFilter<"ActivitySession"> | number | null
    date?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    dayOfWeek?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    startTime?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    endTime?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    location?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    subLocation?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    instructor?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    notes?: StringNullableWithAggregatesFilter<"ActivitySession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ActivitySession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivitySession"> | Date | string
  }

  export type ActivityShareWhereInput = {
    AND?: ActivityShareWhereInput | ActivityShareWhereInput[]
    OR?: ActivityShareWhereInput[]
    NOT?: ActivityShareWhereInput | ActivityShareWhereInput[]
    id?: StringFilter<"ActivityShare"> | string
    sharingUserId?: StringFilter<"ActivityShare"> | string
    sharedWithUserId?: StringFilter<"ActivityShare"> | string
    permissionLevel?: StringFilter<"ActivityShare"> | string
    expiresAt?: DateTimeNullableFilter<"ActivityShare"> | Date | string | null
    isActive?: BoolFilter<"ActivityShare"> | boolean
    createdAt?: DateTimeFilter<"ActivityShare"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityShare"> | Date | string
    sharedWithUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    sharingUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    profiles?: ActivityShareProfileListRelationFilter
  }

  export type ActivityShareOrderByWithRelationInput = {
    id?: SortOrder
    sharingUserId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sharedWithUser?: UserOrderByWithRelationInput
    sharingUser?: UserOrderByWithRelationInput
    profiles?: ActivityShareProfileOrderByRelationAggregateInput
  }

  export type ActivityShareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sharingUserId_sharedWithUserId?: ActivityShareSharingUserIdSharedWithUserIdCompoundUniqueInput
    AND?: ActivityShareWhereInput | ActivityShareWhereInput[]
    OR?: ActivityShareWhereInput[]
    NOT?: ActivityShareWhereInput | ActivityShareWhereInput[]
    sharingUserId?: StringFilter<"ActivityShare"> | string
    sharedWithUserId?: StringFilter<"ActivityShare"> | string
    permissionLevel?: StringFilter<"ActivityShare"> | string
    expiresAt?: DateTimeNullableFilter<"ActivityShare"> | Date | string | null
    isActive?: BoolFilter<"ActivityShare"> | boolean
    createdAt?: DateTimeFilter<"ActivityShare"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityShare"> | Date | string
    sharedWithUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    sharingUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    profiles?: ActivityShareProfileListRelationFilter
  }, "id" | "sharingUserId_sharedWithUserId">

  export type ActivityShareOrderByWithAggregationInput = {
    id?: SortOrder
    sharingUserId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActivityShareCountOrderByAggregateInput
    _max?: ActivityShareMaxOrderByAggregateInput
    _min?: ActivityShareMinOrderByAggregateInput
  }

  export type ActivityShareScalarWhereWithAggregatesInput = {
    AND?: ActivityShareScalarWhereWithAggregatesInput | ActivityShareScalarWhereWithAggregatesInput[]
    OR?: ActivityShareScalarWhereWithAggregatesInput[]
    NOT?: ActivityShareScalarWhereWithAggregatesInput | ActivityShareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityShare"> | string
    sharingUserId?: StringWithAggregatesFilter<"ActivityShare"> | string
    sharedWithUserId?: StringWithAggregatesFilter<"ActivityShare"> | string
    permissionLevel?: StringWithAggregatesFilter<"ActivityShare"> | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ActivityShare"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"ActivityShare"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ActivityShare"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivityShare"> | Date | string
  }

  export type ActivityShareProfileWhereInput = {
    AND?: ActivityShareProfileWhereInput | ActivityShareProfileWhereInput[]
    OR?: ActivityShareProfileWhereInput[]
    NOT?: ActivityShareProfileWhereInput | ActivityShareProfileWhereInput[]
    id?: StringFilter<"ActivityShareProfile"> | string
    activityShareId?: StringFilter<"ActivityShareProfile"> | string
    childId?: StringFilter<"ActivityShareProfile"> | string
    canViewInterested?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewRegistered?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewCompleted?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewNotes?: BoolFilter<"ActivityShareProfile"> | boolean
    createdAt?: DateTimeFilter<"ActivityShareProfile"> | Date | string
    activityShare?: XOR<ActivityShareScalarRelationFilter, ActivityShareWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }

  export type ActivityShareProfileOrderByWithRelationInput = {
    id?: SortOrder
    activityShareId?: SortOrder
    childId?: SortOrder
    canViewInterested?: SortOrder
    canViewRegistered?: SortOrder
    canViewCompleted?: SortOrder
    canViewNotes?: SortOrder
    createdAt?: SortOrder
    activityShare?: ActivityShareOrderByWithRelationInput
    child?: ChildOrderByWithRelationInput
  }

  export type ActivityShareProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    activityShareId_childId?: ActivityShareProfileActivityShareIdChildIdCompoundUniqueInput
    AND?: ActivityShareProfileWhereInput | ActivityShareProfileWhereInput[]
    OR?: ActivityShareProfileWhereInput[]
    NOT?: ActivityShareProfileWhereInput | ActivityShareProfileWhereInput[]
    activityShareId?: StringFilter<"ActivityShareProfile"> | string
    childId?: StringFilter<"ActivityShareProfile"> | string
    canViewInterested?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewRegistered?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewCompleted?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewNotes?: BoolFilter<"ActivityShareProfile"> | boolean
    createdAt?: DateTimeFilter<"ActivityShareProfile"> | Date | string
    activityShare?: XOR<ActivityShareScalarRelationFilter, ActivityShareWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }, "id" | "activityShareId_childId">

  export type ActivityShareProfileOrderByWithAggregationInput = {
    id?: SortOrder
    activityShareId?: SortOrder
    childId?: SortOrder
    canViewInterested?: SortOrder
    canViewRegistered?: SortOrder
    canViewCompleted?: SortOrder
    canViewNotes?: SortOrder
    createdAt?: SortOrder
    _count?: ActivityShareProfileCountOrderByAggregateInput
    _max?: ActivityShareProfileMaxOrderByAggregateInput
    _min?: ActivityShareProfileMinOrderByAggregateInput
  }

  export type ActivityShareProfileScalarWhereWithAggregatesInput = {
    AND?: ActivityShareProfileScalarWhereWithAggregatesInput | ActivityShareProfileScalarWhereWithAggregatesInput[]
    OR?: ActivityShareProfileScalarWhereWithAggregatesInput[]
    NOT?: ActivityShareProfileScalarWhereWithAggregatesInput | ActivityShareProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityShareProfile"> | string
    activityShareId?: StringWithAggregatesFilter<"ActivityShareProfile"> | string
    childId?: StringWithAggregatesFilter<"ActivityShareProfile"> | string
    canViewInterested?: BoolWithAggregatesFilter<"ActivityShareProfile"> | boolean
    canViewRegistered?: BoolWithAggregatesFilter<"ActivityShareProfile"> | boolean
    canViewCompleted?: BoolWithAggregatesFilter<"ActivityShareProfile"> | boolean
    canViewNotes?: BoolWithAggregatesFilter<"ActivityShareProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ActivityShareProfile"> | Date | string
  }

  export type ActivitySubtypeWhereInput = {
    AND?: ActivitySubtypeWhereInput | ActivitySubtypeWhereInput[]
    OR?: ActivitySubtypeWhereInput[]
    NOT?: ActivitySubtypeWhereInput | ActivitySubtypeWhereInput[]
    id?: StringFilter<"ActivitySubtype"> | string
    activityTypeId?: StringFilter<"ActivitySubtype"> | string
    code?: StringFilter<"ActivitySubtype"> | string
    name?: StringFilter<"ActivitySubtype"> | string
    description?: StringNullableFilter<"ActivitySubtype"> | string | null
    imageUrl?: StringNullableFilter<"ActivitySubtype"> | string | null
    createdAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    displayOrder?: IntFilter<"ActivitySubtype"> | number
    activities?: ActivityListRelationFilter
    activityType?: XOR<ActivityTypeScalarRelationFilter, ActivityTypeWhereInput>
  }

  export type ActivitySubtypeOrderByWithRelationInput = {
    id?: SortOrder
    activityTypeId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    activityType?: ActivityTypeOrderByWithRelationInput
  }

  export type ActivitySubtypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    activityTypeId_code?: ActivitySubtypeActivityTypeIdCodeCompoundUniqueInput
    AND?: ActivitySubtypeWhereInput | ActivitySubtypeWhereInput[]
    OR?: ActivitySubtypeWhereInput[]
    NOT?: ActivitySubtypeWhereInput | ActivitySubtypeWhereInput[]
    activityTypeId?: StringFilter<"ActivitySubtype"> | string
    code?: StringFilter<"ActivitySubtype"> | string
    name?: StringFilter<"ActivitySubtype"> | string
    description?: StringNullableFilter<"ActivitySubtype"> | string | null
    imageUrl?: StringNullableFilter<"ActivitySubtype"> | string | null
    createdAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    displayOrder?: IntFilter<"ActivitySubtype"> | number
    activities?: ActivityListRelationFilter
    activityType?: XOR<ActivityTypeScalarRelationFilter, ActivityTypeWhereInput>
  }, "id" | "activityTypeId_code">

  export type ActivitySubtypeOrderByWithAggregationInput = {
    id?: SortOrder
    activityTypeId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
    _count?: ActivitySubtypeCountOrderByAggregateInput
    _avg?: ActivitySubtypeAvgOrderByAggregateInput
    _max?: ActivitySubtypeMaxOrderByAggregateInput
    _min?: ActivitySubtypeMinOrderByAggregateInput
    _sum?: ActivitySubtypeSumOrderByAggregateInput
  }

  export type ActivitySubtypeScalarWhereWithAggregatesInput = {
    AND?: ActivitySubtypeScalarWhereWithAggregatesInput | ActivitySubtypeScalarWhereWithAggregatesInput[]
    OR?: ActivitySubtypeScalarWhereWithAggregatesInput[]
    NOT?: ActivitySubtypeScalarWhereWithAggregatesInput | ActivitySubtypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivitySubtype"> | string
    activityTypeId?: StringWithAggregatesFilter<"ActivitySubtype"> | string
    code?: StringWithAggregatesFilter<"ActivitySubtype"> | string
    name?: StringWithAggregatesFilter<"ActivitySubtype"> | string
    description?: StringNullableWithAggregatesFilter<"ActivitySubtype"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"ActivitySubtype"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ActivitySubtype"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivitySubtype"> | Date | string
    displayOrder?: IntWithAggregatesFilter<"ActivitySubtype"> | number
  }

  export type ActivityTypeWhereInput = {
    AND?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    OR?: ActivityTypeWhereInput[]
    NOT?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    id?: StringFilter<"ActivityType"> | string
    code?: StringFilter<"ActivityType"> | string
    name?: StringFilter<"ActivityType"> | string
    description?: StringNullableFilter<"ActivityType"> | string | null
    iconName?: StringNullableFilter<"ActivityType"> | string | null
    imageUrl?: StringNullableFilter<"ActivityType"> | string | null
    displayOrder?: IntFilter<"ActivityType"> | number
    createdAt?: DateTimeFilter<"ActivityType"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityType"> | Date | string
    activities?: ActivityListRelationFilter
    subtypes?: ActivitySubtypeListRelationFilter
  }

  export type ActivityTypeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    iconName?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    subtypes?: ActivitySubtypeOrderByRelationAggregateInput
  }

  export type ActivityTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    OR?: ActivityTypeWhereInput[]
    NOT?: ActivityTypeWhereInput | ActivityTypeWhereInput[]
    name?: StringFilter<"ActivityType"> | string
    description?: StringNullableFilter<"ActivityType"> | string | null
    iconName?: StringNullableFilter<"ActivityType"> | string | null
    imageUrl?: StringNullableFilter<"ActivityType"> | string | null
    displayOrder?: IntFilter<"ActivityType"> | number
    createdAt?: DateTimeFilter<"ActivityType"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityType"> | Date | string
    activities?: ActivityListRelationFilter
    subtypes?: ActivitySubtypeListRelationFilter
  }, "id" | "code">

  export type ActivityTypeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    iconName?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ActivityTypeCountOrderByAggregateInput
    _avg?: ActivityTypeAvgOrderByAggregateInput
    _max?: ActivityTypeMaxOrderByAggregateInput
    _min?: ActivityTypeMinOrderByAggregateInput
    _sum?: ActivityTypeSumOrderByAggregateInput
  }

  export type ActivityTypeScalarWhereWithAggregatesInput = {
    AND?: ActivityTypeScalarWhereWithAggregatesInput | ActivityTypeScalarWhereWithAggregatesInput[]
    OR?: ActivityTypeScalarWhereWithAggregatesInput[]
    NOT?: ActivityTypeScalarWhereWithAggregatesInput | ActivityTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityType"> | string
    code?: StringWithAggregatesFilter<"ActivityType"> | string
    name?: StringWithAggregatesFilter<"ActivityType"> | string
    description?: StringNullableWithAggregatesFilter<"ActivityType"> | string | null
    iconName?: StringNullableWithAggregatesFilter<"ActivityType"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"ActivityType"> | string | null
    displayOrder?: IntWithAggregatesFilter<"ActivityType"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ActivityType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActivityType"> | Date | string
  }

  export type ChildWhereInput = {
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    id?: StringFilter<"Child"> | string
    userId?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    dateOfBirth?: DateTimeFilter<"Child"> | Date | string
    gender?: StringNullableFilter<"Child"> | string | null
    avatarUrl?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    notes?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    profiles?: ActivityShareProfileListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    childActivities?: ChildActivityListRelationFilter
  }

  export type ChildOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    interests?: SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profiles?: ActivityShareProfileOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    childActivities?: ChildActivityOrderByRelationAggregateInput
  }

  export type ChildWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChildWhereInput | ChildWhereInput[]
    OR?: ChildWhereInput[]
    NOT?: ChildWhereInput | ChildWhereInput[]
    userId?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    dateOfBirth?: DateTimeFilter<"Child"> | Date | string
    gender?: StringNullableFilter<"Child"> | string | null
    avatarUrl?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    notes?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
    profiles?: ActivityShareProfileListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    childActivities?: ChildActivityListRelationFilter
  }, "id">

  export type ChildOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    interests?: SortOrder
    notes?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChildCountOrderByAggregateInput
    _max?: ChildMaxOrderByAggregateInput
    _min?: ChildMinOrderByAggregateInput
  }

  export type ChildScalarWhereWithAggregatesInput = {
    AND?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    OR?: ChildScalarWhereWithAggregatesInput[]
    NOT?: ChildScalarWhereWithAggregatesInput | ChildScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Child"> | string
    userId?: StringWithAggregatesFilter<"Child"> | string
    name?: StringWithAggregatesFilter<"Child"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"Child"> | Date | string
    gender?: StringNullableWithAggregatesFilter<"Child"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    notes?: StringNullableWithAggregatesFilter<"Child"> | string | null
    isActive?: BoolWithAggregatesFilter<"Child"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Child"> | Date | string
  }

  export type ChildActivityWhereInput = {
    AND?: ChildActivityWhereInput | ChildActivityWhereInput[]
    OR?: ChildActivityWhereInput[]
    NOT?: ChildActivityWhereInput | ChildActivityWhereInput[]
    id?: StringFilter<"ChildActivity"> | string
    childId?: StringFilter<"ChildActivity"> | string
    activityId?: StringFilter<"ChildActivity"> | string
    status?: StringFilter<"ChildActivity"> | string
    registeredAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    notes?: StringNullableFilter<"ChildActivity"> | string | null
    rating?: IntNullableFilter<"ChildActivity"> | number | null
    createdAt?: DateTimeFilter<"ChildActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ChildActivity"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }

  export type ChildActivityOrderByWithRelationInput = {
    id?: SortOrder
    childId?: SortOrder
    activityId?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    child?: ChildOrderByWithRelationInput
  }

  export type ChildActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    childId_activityId?: ChildActivityChildIdActivityIdCompoundUniqueInput
    AND?: ChildActivityWhereInput | ChildActivityWhereInput[]
    OR?: ChildActivityWhereInput[]
    NOT?: ChildActivityWhereInput | ChildActivityWhereInput[]
    childId?: StringFilter<"ChildActivity"> | string
    activityId?: StringFilter<"ChildActivity"> | string
    status?: StringFilter<"ChildActivity"> | string
    registeredAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    notes?: StringNullableFilter<"ChildActivity"> | string | null
    rating?: IntNullableFilter<"ChildActivity"> | number | null
    createdAt?: DateTimeFilter<"ChildActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ChildActivity"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    child?: XOR<ChildScalarRelationFilter, ChildWhereInput>
  }, "id" | "childId_activityId">

  export type ChildActivityOrderByWithAggregationInput = {
    id?: SortOrder
    childId?: SortOrder
    activityId?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChildActivityCountOrderByAggregateInput
    _avg?: ChildActivityAvgOrderByAggregateInput
    _max?: ChildActivityMaxOrderByAggregateInput
    _min?: ChildActivityMinOrderByAggregateInput
    _sum?: ChildActivitySumOrderByAggregateInput
  }

  export type ChildActivityScalarWhereWithAggregatesInput = {
    AND?: ChildActivityScalarWhereWithAggregatesInput | ChildActivityScalarWhereWithAggregatesInput[]
    OR?: ChildActivityScalarWhereWithAggregatesInput[]
    NOT?: ChildActivityScalarWhereWithAggregatesInput | ChildActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChildActivity"> | string
    childId?: StringWithAggregatesFilter<"ChildActivity"> | string
    activityId?: StringWithAggregatesFilter<"ChildActivity"> | string
    status?: StringWithAggregatesFilter<"ChildActivity"> | string
    registeredAt?: DateTimeNullableWithAggregatesFilter<"ChildActivity"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ChildActivity"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"ChildActivity"> | string | null
    rating?: IntNullableWithAggregatesFilter<"ChildActivity"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ChildActivity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChildActivity"> | Date | string
  }

  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    activityId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    notifyOnChange?: BoolFilter<"Favorite"> | boolean
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    createdAt?: SortOrder
    notifyOnChange?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_activityId?: FavoriteUserIdActivityIdCompoundUniqueInput
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    userId?: StringFilter<"Favorite"> | string
    activityId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    notifyOnChange?: BoolFilter<"Favorite"> | boolean
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_activityId">

  export type FavoriteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    createdAt?: SortOrder
    notifyOnChange?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Favorite"> | string
    userId?: StringWithAggregatesFilter<"Favorite"> | string
    activityId?: StringWithAggregatesFilter<"Favorite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Favorite"> | Date | string
    notifyOnChange?: BoolWithAggregatesFilter<"Favorite"> | boolean
  }

  export type InvitationWhereInput = {
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    id?: StringFilter<"Invitation"> | string
    senderId?: StringFilter<"Invitation"> | string
    recipientEmail?: StringFilter<"Invitation"> | string
    recipientUserId?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    message?: StringNullableFilter<"Invitation"> | string | null
    token?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    recipient?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InvitationOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientEmail?: SortOrder
    recipientUserId?: SortOrderInput | SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    recipient?: UserOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type InvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: InvitationWhereInput | InvitationWhereInput[]
    OR?: InvitationWhereInput[]
    NOT?: InvitationWhereInput | InvitationWhereInput[]
    senderId?: StringFilter<"Invitation"> | string
    recipientEmail?: StringFilter<"Invitation"> | string
    recipientUserId?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    message?: StringNullableFilter<"Invitation"> | string | null
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
    recipient?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type InvitationOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientEmail?: SortOrder
    recipientUserId?: SortOrderInput | SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: InvitationCountOrderByAggregateInput
    _max?: InvitationMaxOrderByAggregateInput
    _min?: InvitationMinOrderByAggregateInput
  }

  export type InvitationScalarWhereWithAggregatesInput = {
    AND?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    OR?: InvitationScalarWhereWithAggregatesInput[]
    NOT?: InvitationScalarWhereWithAggregatesInput | InvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invitation"> | string
    senderId?: StringWithAggregatesFilter<"Invitation"> | string
    recipientEmail?: StringWithAggregatesFilter<"Invitation"> | string
    recipientUserId?: StringNullableWithAggregatesFilter<"Invitation"> | string | null
    status?: StringWithAggregatesFilter<"Invitation"> | string
    message?: StringNullableWithAggregatesFilter<"Invitation"> | string | null
    token?: StringWithAggregatesFilter<"Invitation"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"Invitation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Invitation"> | Date | string
  }

  export type CityWhereInput = {
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    id?: StringFilter<"City"> | string
    name?: StringFilter<"City"> | string
    province?: StringFilter<"City"> | string
    country?: StringFilter<"City"> | string
    createdAt?: DateTimeFilter<"City"> | Date | string
    updatedAt?: DateTimeFilter<"City"> | Date | string
    locations?: LocationListRelationFilter
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    province?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    locations?: LocationOrderByRelationAggregateInput
  }

  export type CityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_province_country?: CityNameProvinceCountryCompoundUniqueInput
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    name?: StringFilter<"City"> | string
    province?: StringFilter<"City"> | string
    country?: StringFilter<"City"> | string
    createdAt?: DateTimeFilter<"City"> | Date | string
    updatedAt?: DateTimeFilter<"City"> | Date | string
    locations?: LocationListRelationFilter
  }, "id" | "name_province_country">

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    province?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CityCountOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    OR?: CityScalarWhereWithAggregatesInput[]
    NOT?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"City"> | string
    name?: StringWithAggregatesFilter<"City"> | string
    province?: StringWithAggregatesFilter<"City"> | string
    country?: StringWithAggregatesFilter<"City"> | string
    createdAt?: DateTimeWithAggregatesFilter<"City"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"City"> | Date | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    cityId?: StringFilter<"Location"> | string
    postalCode?: StringNullableFilter<"Location"> | string | null
    latitude?: FloatNullableFilter<"Location"> | number | null
    longitude?: FloatNullableFilter<"Location"> | number | null
    facility?: StringNullableFilter<"Location"> | string | null
    fullAddress?: StringNullableFilter<"Location"> | string | null
    mapUrl?: StringNullableFilter<"Location"> | string | null
    placeId?: StringNullableFilter<"Location"> | string | null
    phoneNumber?: StringNullableFilter<"Location"> | string | null
    website?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    city?: XOR<CityScalarRelationFilter, CityWhereInput>
    activities?: ActivityListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    cityId?: SortOrder
    postalCode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    facility?: SortOrderInput | SortOrder
    fullAddress?: SortOrderInput | SortOrder
    mapUrl?: SortOrderInput | SortOrder
    placeId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: CityOrderByWithRelationInput
    activities?: ActivityOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_address_cityId?: LocationNameAddressCityIdCompoundUniqueInput
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    cityId?: StringFilter<"Location"> | string
    postalCode?: StringNullableFilter<"Location"> | string | null
    latitude?: FloatNullableFilter<"Location"> | number | null
    longitude?: FloatNullableFilter<"Location"> | number | null
    facility?: StringNullableFilter<"Location"> | string | null
    fullAddress?: StringNullableFilter<"Location"> | string | null
    mapUrl?: StringNullableFilter<"Location"> | string | null
    placeId?: StringNullableFilter<"Location"> | string | null
    phoneNumber?: StringNullableFilter<"Location"> | string | null
    website?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    city?: XOR<CityScalarRelationFilter, CityWhereInput>
    activities?: ActivityListRelationFilter
  }, "id" | "name_address_cityId">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrderInput | SortOrder
    cityId?: SortOrder
    postalCode?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    facility?: SortOrderInput | SortOrder
    fullAddress?: SortOrderInput | SortOrder
    mapUrl?: SortOrderInput | SortOrder
    placeId?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Location"> | string
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringNullableWithAggregatesFilter<"Location"> | string | null
    cityId?: StringWithAggregatesFilter<"Location"> | string
    postalCode?: StringNullableWithAggregatesFilter<"Location"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"Location"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Location"> | number | null
    facility?: StringNullableWithAggregatesFilter<"Location"> | string | null
    fullAddress?: StringNullableWithAggregatesFilter<"Location"> | string | null
    mapUrl?: StringNullableWithAggregatesFilter<"Location"> | string | null
    placeId?: StringNullableWithAggregatesFilter<"Location"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Location"> | string | null
    website?: StringNullableWithAggregatesFilter<"Location"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type ProviderWhereInput = {
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    id?: StringFilter<"Provider"> | string
    name?: StringFilter<"Provider"> | string
    website?: StringFilter<"Provider"> | string
    scraperConfig?: JsonFilter<"Provider">
    isActive?: BoolFilter<"Provider"> | boolean
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    region?: StringNullableFilter<"Provider"> | string | null
    contactInfo?: JsonNullableFilter<"Provider">
    platform?: StringNullableFilter<"Provider"> | string | null
    activities?: ActivityListRelationFilter
    ProviderMetrics?: ProviderMetricsListRelationFilter
    ScrapeJob?: ScrapeJobListRelationFilter
    ScraperHealthCheck?: ScraperHealthCheckListRelationFilter
  }

  export type ProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    scraperConfig?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    platform?: SortOrderInput | SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    ProviderMetrics?: ProviderMetricsOrderByRelationAggregateInput
    ScrapeJob?: ScrapeJobOrderByRelationAggregateInput
    ScraperHealthCheck?: ScraperHealthCheckOrderByRelationAggregateInput
  }

  export type ProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ProviderWhereInput | ProviderWhereInput[]
    OR?: ProviderWhereInput[]
    NOT?: ProviderWhereInput | ProviderWhereInput[]
    website?: StringFilter<"Provider"> | string
    scraperConfig?: JsonFilter<"Provider">
    isActive?: BoolFilter<"Provider"> | boolean
    createdAt?: DateTimeFilter<"Provider"> | Date | string
    updatedAt?: DateTimeFilter<"Provider"> | Date | string
    region?: StringNullableFilter<"Provider"> | string | null
    contactInfo?: JsonNullableFilter<"Provider">
    platform?: StringNullableFilter<"Provider"> | string | null
    activities?: ActivityListRelationFilter
    ProviderMetrics?: ProviderMetricsListRelationFilter
    ScrapeJob?: ScrapeJobListRelationFilter
    ScraperHealthCheck?: ScraperHealthCheckListRelationFilter
  }, "id" | "name">

  export type ProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    scraperConfig?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    platform?: SortOrderInput | SortOrder
    _count?: ProviderCountOrderByAggregateInput
    _max?: ProviderMaxOrderByAggregateInput
    _min?: ProviderMinOrderByAggregateInput
  }

  export type ProviderScalarWhereWithAggregatesInput = {
    AND?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    OR?: ProviderScalarWhereWithAggregatesInput[]
    NOT?: ProviderScalarWhereWithAggregatesInput | ProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Provider"> | string
    name?: StringWithAggregatesFilter<"Provider"> | string
    website?: StringWithAggregatesFilter<"Provider"> | string
    scraperConfig?: JsonWithAggregatesFilter<"Provider">
    isActive?: BoolWithAggregatesFilter<"Provider"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Provider"> | Date | string
    region?: StringNullableWithAggregatesFilter<"Provider"> | string | null
    contactInfo?: JsonNullableWithAggregatesFilter<"Provider">
    platform?: StringNullableWithAggregatesFilter<"Provider"> | string | null
  }

  export type ProviderMetricsWhereInput = {
    AND?: ProviderMetricsWhereInput | ProviderMetricsWhereInput[]
    OR?: ProviderMetricsWhereInput[]
    NOT?: ProviderMetricsWhereInput | ProviderMetricsWhereInput[]
    id?: StringFilter<"ProviderMetrics"> | string
    providerId?: StringFilter<"ProviderMetrics"> | string
    scrapeDate?: DateTimeFilter<"ProviderMetrics"> | Date | string
    activitiesFound?: IntFilter<"ProviderMetrics"> | number
    activitiesProcessed?: IntFilter<"ProviderMetrics"> | number
    dataQualityScore?: FloatNullableFilter<"ProviderMetrics"> | number | null
    errors?: JsonNullableFilter<"ProviderMetrics">
    scrapeDuration?: IntNullableFilter<"ProviderMetrics"> | number | null
    memoryUsed?: BigIntNullableFilter<"ProviderMetrics"> | bigint | number | null
    createdAt?: DateTimeFilter<"ProviderMetrics"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }

  export type ProviderMetricsOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    scrapeDate?: SortOrder
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    scrapeDuration?: SortOrderInput | SortOrder
    memoryUsed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    provider?: ProviderOrderByWithRelationInput
  }

  export type ProviderMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProviderMetricsWhereInput | ProviderMetricsWhereInput[]
    OR?: ProviderMetricsWhereInput[]
    NOT?: ProviderMetricsWhereInput | ProviderMetricsWhereInput[]
    providerId?: StringFilter<"ProviderMetrics"> | string
    scrapeDate?: DateTimeFilter<"ProviderMetrics"> | Date | string
    activitiesFound?: IntFilter<"ProviderMetrics"> | number
    activitiesProcessed?: IntFilter<"ProviderMetrics"> | number
    dataQualityScore?: FloatNullableFilter<"ProviderMetrics"> | number | null
    errors?: JsonNullableFilter<"ProviderMetrics">
    scrapeDuration?: IntNullableFilter<"ProviderMetrics"> | number | null
    memoryUsed?: BigIntNullableFilter<"ProviderMetrics"> | bigint | number | null
    createdAt?: DateTimeFilter<"ProviderMetrics"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }, "id">

  export type ProviderMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    scrapeDate?: SortOrder
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    scrapeDuration?: SortOrderInput | SortOrder
    memoryUsed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProviderMetricsCountOrderByAggregateInput
    _avg?: ProviderMetricsAvgOrderByAggregateInput
    _max?: ProviderMetricsMaxOrderByAggregateInput
    _min?: ProviderMetricsMinOrderByAggregateInput
    _sum?: ProviderMetricsSumOrderByAggregateInput
  }

  export type ProviderMetricsScalarWhereWithAggregatesInput = {
    AND?: ProviderMetricsScalarWhereWithAggregatesInput | ProviderMetricsScalarWhereWithAggregatesInput[]
    OR?: ProviderMetricsScalarWhereWithAggregatesInput[]
    NOT?: ProviderMetricsScalarWhereWithAggregatesInput | ProviderMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProviderMetrics"> | string
    providerId?: StringWithAggregatesFilter<"ProviderMetrics"> | string
    scrapeDate?: DateTimeWithAggregatesFilter<"ProviderMetrics"> | Date | string
    activitiesFound?: IntWithAggregatesFilter<"ProviderMetrics"> | number
    activitiesProcessed?: IntWithAggregatesFilter<"ProviderMetrics"> | number
    dataQualityScore?: FloatNullableWithAggregatesFilter<"ProviderMetrics"> | number | null
    errors?: JsonNullableWithAggregatesFilter<"ProviderMetrics">
    scrapeDuration?: IntNullableWithAggregatesFilter<"ProviderMetrics"> | number | null
    memoryUsed?: BigIntNullableWithAggregatesFilter<"ProviderMetrics"> | bigint | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ProviderMetrics"> | Date | string
  }

  export type ScrapeJobWhereInput = {
    AND?: ScrapeJobWhereInput | ScrapeJobWhereInput[]
    OR?: ScrapeJobWhereInput[]
    NOT?: ScrapeJobWhereInput | ScrapeJobWhereInput[]
    id?: StringFilter<"ScrapeJob"> | string
    providerId?: StringFilter<"ScrapeJob"> | string
    status?: EnumJobStatusFilter<"ScrapeJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    activitiesFound?: IntFilter<"ScrapeJob"> | number
    activitiesCreated?: IntFilter<"ScrapeJob"> | number
    activitiesUpdated?: IntFilter<"ScrapeJob"> | number
    activitiesRemoved?: IntFilter<"ScrapeJob"> | number
    errorMessage?: StringNullableFilter<"ScrapeJob"> | string | null
    errorDetails?: JsonNullableFilter<"ScrapeJob">
    createdAt?: DateTimeFilter<"ScrapeJob"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }

  export type ScrapeJobOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    provider?: ProviderOrderByWithRelationInput
  }

  export type ScrapeJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScrapeJobWhereInput | ScrapeJobWhereInput[]
    OR?: ScrapeJobWhereInput[]
    NOT?: ScrapeJobWhereInput | ScrapeJobWhereInput[]
    providerId?: StringFilter<"ScrapeJob"> | string
    status?: EnumJobStatusFilter<"ScrapeJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    activitiesFound?: IntFilter<"ScrapeJob"> | number
    activitiesCreated?: IntFilter<"ScrapeJob"> | number
    activitiesUpdated?: IntFilter<"ScrapeJob"> | number
    activitiesRemoved?: IntFilter<"ScrapeJob"> | number
    errorMessage?: StringNullableFilter<"ScrapeJob"> | string | null
    errorDetails?: JsonNullableFilter<"ScrapeJob">
    createdAt?: DateTimeFilter<"ScrapeJob"> | Date | string
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }, "id">

  export type ScrapeJobOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ScrapeJobCountOrderByAggregateInput
    _avg?: ScrapeJobAvgOrderByAggregateInput
    _max?: ScrapeJobMaxOrderByAggregateInput
    _min?: ScrapeJobMinOrderByAggregateInput
    _sum?: ScrapeJobSumOrderByAggregateInput
  }

  export type ScrapeJobScalarWhereWithAggregatesInput = {
    AND?: ScrapeJobScalarWhereWithAggregatesInput | ScrapeJobScalarWhereWithAggregatesInput[]
    OR?: ScrapeJobScalarWhereWithAggregatesInput[]
    NOT?: ScrapeJobScalarWhereWithAggregatesInput | ScrapeJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScrapeJob"> | string
    providerId?: StringWithAggregatesFilter<"ScrapeJob"> | string
    status?: EnumJobStatusWithAggregatesFilter<"ScrapeJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableWithAggregatesFilter<"ScrapeJob"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ScrapeJob"> | Date | string | null
    activitiesFound?: IntWithAggregatesFilter<"ScrapeJob"> | number
    activitiesCreated?: IntWithAggregatesFilter<"ScrapeJob"> | number
    activitiesUpdated?: IntWithAggregatesFilter<"ScrapeJob"> | number
    activitiesRemoved?: IntWithAggregatesFilter<"ScrapeJob"> | number
    errorMessage?: StringNullableWithAggregatesFilter<"ScrapeJob"> | string | null
    errorDetails?: JsonNullableWithAggregatesFilter<"ScrapeJob">
    createdAt?: DateTimeWithAggregatesFilter<"ScrapeJob"> | Date | string
  }

  export type ScraperHealthCheckWhereInput = {
    AND?: ScraperHealthCheckWhereInput | ScraperHealthCheckWhereInput[]
    OR?: ScraperHealthCheckWhereInput[]
    NOT?: ScraperHealthCheckWhereInput | ScraperHealthCheckWhereInput[]
    id?: StringFilter<"ScraperHealthCheck"> | string
    providerId?: StringFilter<"ScraperHealthCheck"> | string
    status?: StringFilter<"ScraperHealthCheck"> | string
    message?: StringNullableFilter<"ScraperHealthCheck"> | string | null
    details?: JsonNullableFilter<"ScraperHealthCheck">
    checkedAt?: DateTimeFilter<"ScraperHealthCheck"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"ScraperHealthCheck"> | Date | string | null
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }

  export type ScraperHealthCheckOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    checkedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    provider?: ProviderOrderByWithRelationInput
  }

  export type ScraperHealthCheckWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScraperHealthCheckWhereInput | ScraperHealthCheckWhereInput[]
    OR?: ScraperHealthCheckWhereInput[]
    NOT?: ScraperHealthCheckWhereInput | ScraperHealthCheckWhereInput[]
    providerId?: StringFilter<"ScraperHealthCheck"> | string
    status?: StringFilter<"ScraperHealthCheck"> | string
    message?: StringNullableFilter<"ScraperHealthCheck"> | string | null
    details?: JsonNullableFilter<"ScraperHealthCheck">
    checkedAt?: DateTimeFilter<"ScraperHealthCheck"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"ScraperHealthCheck"> | Date | string | null
    provider?: XOR<ProviderScalarRelationFilter, ProviderWhereInput>
  }, "id">

  export type ScraperHealthCheckOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    checkedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: ScraperHealthCheckCountOrderByAggregateInput
    _max?: ScraperHealthCheckMaxOrderByAggregateInput
    _min?: ScraperHealthCheckMinOrderByAggregateInput
  }

  export type ScraperHealthCheckScalarWhereWithAggregatesInput = {
    AND?: ScraperHealthCheckScalarWhereWithAggregatesInput | ScraperHealthCheckScalarWhereWithAggregatesInput[]
    OR?: ScraperHealthCheckScalarWhereWithAggregatesInput[]
    NOT?: ScraperHealthCheckScalarWhereWithAggregatesInput | ScraperHealthCheckScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScraperHealthCheck"> | string
    providerId?: StringWithAggregatesFilter<"ScraperHealthCheck"> | string
    status?: StringWithAggregatesFilter<"ScraperHealthCheck"> | string
    message?: StringNullableWithAggregatesFilter<"ScraperHealthCheck"> | string | null
    details?: JsonNullableWithAggregatesFilter<"ScraperHealthCheck">
    checkedAt?: DateTimeWithAggregatesFilter<"ScraperHealthCheck"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"ScraperHealthCheck"> | Date | string | null
  }

  export type ScraperRunWhereInput = {
    AND?: ScraperRunWhereInput | ScraperRunWhereInput[]
    OR?: ScraperRunWhereInput[]
    NOT?: ScraperRunWhereInput | ScraperRunWhereInput[]
    id?: StringFilter<"ScraperRun"> | string
    providerId?: StringFilter<"ScraperRun"> | string
    status?: StringFilter<"ScraperRun"> | string
    startedAt?: DateTimeFilter<"ScraperRun"> | Date | string
    completedAt?: DateTimeNullableFilter<"ScraperRun"> | Date | string | null
    activitiesFound?: IntFilter<"ScraperRun"> | number
    activitiesCreated?: IntFilter<"ScraperRun"> | number
    activitiesUpdated?: IntFilter<"ScraperRun"> | number
    activitiesDeactivated?: IntFilter<"ScraperRun"> | number
    activitiesPurged?: IntFilter<"ScraperRun"> | number
    errorMessage?: StringNullableFilter<"ScraperRun"> | string | null
    logs?: JsonNullableFilter<"ScraperRun">
  }

  export type ScraperRunOrderByWithRelationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    logs?: SortOrderInput | SortOrder
  }

  export type ScraperRunWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScraperRunWhereInput | ScraperRunWhereInput[]
    OR?: ScraperRunWhereInput[]
    NOT?: ScraperRunWhereInput | ScraperRunWhereInput[]
    providerId?: StringFilter<"ScraperRun"> | string
    status?: StringFilter<"ScraperRun"> | string
    startedAt?: DateTimeFilter<"ScraperRun"> | Date | string
    completedAt?: DateTimeNullableFilter<"ScraperRun"> | Date | string | null
    activitiesFound?: IntFilter<"ScraperRun"> | number
    activitiesCreated?: IntFilter<"ScraperRun"> | number
    activitiesUpdated?: IntFilter<"ScraperRun"> | number
    activitiesDeactivated?: IntFilter<"ScraperRun"> | number
    activitiesPurged?: IntFilter<"ScraperRun"> | number
    errorMessage?: StringNullableFilter<"ScraperRun"> | string | null
    logs?: JsonNullableFilter<"ScraperRun">
  }, "id">

  export type ScraperRunOrderByWithAggregationInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    logs?: SortOrderInput | SortOrder
    _count?: ScraperRunCountOrderByAggregateInput
    _avg?: ScraperRunAvgOrderByAggregateInput
    _max?: ScraperRunMaxOrderByAggregateInput
    _min?: ScraperRunMinOrderByAggregateInput
    _sum?: ScraperRunSumOrderByAggregateInput
  }

  export type ScraperRunScalarWhereWithAggregatesInput = {
    AND?: ScraperRunScalarWhereWithAggregatesInput | ScraperRunScalarWhereWithAggregatesInput[]
    OR?: ScraperRunScalarWhereWithAggregatesInput[]
    NOT?: ScraperRunScalarWhereWithAggregatesInput | ScraperRunScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScraperRun"> | string
    providerId?: StringWithAggregatesFilter<"ScraperRun"> | string
    status?: StringWithAggregatesFilter<"ScraperRun"> | string
    startedAt?: DateTimeWithAggregatesFilter<"ScraperRun"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ScraperRun"> | Date | string | null
    activitiesFound?: IntWithAggregatesFilter<"ScraperRun"> | number
    activitiesCreated?: IntWithAggregatesFilter<"ScraperRun"> | number
    activitiesUpdated?: IntWithAggregatesFilter<"ScraperRun"> | number
    activitiesDeactivated?: IntWithAggregatesFilter<"ScraperRun"> | number
    activitiesPurged?: IntWithAggregatesFilter<"ScraperRun"> | number
    errorMessage?: StringNullableWithAggregatesFilter<"ScraperRun"> | string | null
    logs?: JsonNullableWithAggregatesFilter<"ScraperRun">
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordHash?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    sharedWithMe?: ActivityShareListRelationFilter
    myShares?: ActivityShareListRelationFilter
    children?: ChildListRelationFilter
    favorites?: FavoriteListRelationFilter
    receivedInvitations?: InvitationListRelationFilter
    sentInvitations?: InvitationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordHash?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    sharedWithMe?: ActivityShareOrderByRelationAggregateInput
    myShares?: ActivityShareOrderByRelationAggregateInput
    children?: ChildOrderByRelationAggregateInput
    favorites?: FavoriteOrderByRelationAggregateInput
    receivedInvitations?: InvitationOrderByRelationAggregateInput
    sentInvitations?: InvitationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    preferences?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordHash?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    isVerified?: BoolFilter<"User"> | boolean
    verificationToken?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    sharedWithMe?: ActivityShareListRelationFilter
    myShares?: ActivityShareListRelationFilter
    children?: ChildListRelationFilter
    favorites?: FavoriteListRelationFilter
    receivedInvitations?: InvitationListRelationFilter
    sentInvitations?: InvitationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordHash?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    preferences?: JsonWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    verificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    ageMin?: IntNullableFilter<"Category"> | number | null
    ageMax?: IntNullableFilter<"Category"> | number | null
    requiresParent?: BoolFilter<"Category"> | boolean
    displayOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    activities?: ActivityCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ageMin?: SortOrderInput | SortOrder
    ageMax?: SortOrderInput | SortOrder
    requiresParent?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activities?: ActivityCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    description?: StringNullableFilter<"Category"> | string | null
    ageMin?: IntNullableFilter<"Category"> | number | null
    ageMax?: IntNullableFilter<"Category"> | number | null
    requiresParent?: BoolFilter<"Category"> | boolean
    displayOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    activities?: ActivityCategoryListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    ageMin?: SortOrderInput | SortOrder
    ageMax?: SortOrderInput | SortOrder
    requiresParent?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    ageMin?: IntNullableWithAggregatesFilter<"Category"> | number | null
    ageMax?: IntNullableWithAggregatesFilter<"Category"> | number | null
    requiresParent?: BoolWithAggregatesFilter<"Category"> | boolean
    displayOrder?: IntWithAggregatesFilter<"Category"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type ActivityCategoryWhereInput = {
    AND?: ActivityCategoryWhereInput | ActivityCategoryWhereInput[]
    OR?: ActivityCategoryWhereInput[]
    NOT?: ActivityCategoryWhereInput | ActivityCategoryWhereInput[]
    id?: StringFilter<"ActivityCategory"> | string
    activityId?: StringFilter<"ActivityCategory"> | string
    categoryId?: StringFilter<"ActivityCategory"> | string
    createdAt?: DateTimeFilter<"ActivityCategory"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }

  export type ActivityCategoryOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
  }

  export type ActivityCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    activityId_categoryId?: ActivityCategoryActivityIdCategoryIdCompoundUniqueInput
    AND?: ActivityCategoryWhereInput | ActivityCategoryWhereInput[]
    OR?: ActivityCategoryWhereInput[]
    NOT?: ActivityCategoryWhereInput | ActivityCategoryWhereInput[]
    activityId?: StringFilter<"ActivityCategory"> | string
    categoryId?: StringFilter<"ActivityCategory"> | string
    createdAt?: DateTimeFilter<"ActivityCategory"> | Date | string
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
  }, "id" | "activityId_categoryId">

  export type ActivityCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    _count?: ActivityCategoryCountOrderByAggregateInput
    _max?: ActivityCategoryMaxOrderByAggregateInput
    _min?: ActivityCategoryMinOrderByAggregateInput
  }

  export type ActivityCategoryScalarWhereWithAggregatesInput = {
    AND?: ActivityCategoryScalarWhereWithAggregatesInput | ActivityCategoryScalarWhereWithAggregatesInput[]
    OR?: ActivityCategoryScalarWhereWithAggregatesInput[]
    NOT?: ActivityCategoryScalarWhereWithAggregatesInput | ActivityCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityCategory"> | string
    activityId?: StringWithAggregatesFilter<"ActivityCategory"> | string
    categoryId?: StringWithAggregatesFilter<"ActivityCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityCategory"> | Date | string
  }

  export type ActivityCreateInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
  }

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityHistoryCreateInput = {
    id?: string
    activityId: string
    changeType: string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryCreatechangedFieldsInput | string[]
    createdAt?: Date | string
  }

  export type ActivityHistoryUncheckedCreateInput = {
    id?: string
    activityId: string
    changeType: string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryCreatechangedFieldsInput | string[]
    createdAt?: Date | string
  }

  export type ActivityHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryUpdatechangedFieldsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryUpdatechangedFieldsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityHistoryCreateManyInput = {
    id?: string
    activityId: string
    changeType: string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryCreatechangedFieldsInput | string[]
    createdAt?: Date | string
  }

  export type ActivityHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryUpdatechangedFieldsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    changeType?: StringFieldUpdateOperationsInput | string
    previousData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    changedFields?: ActivityHistoryUpdatechangedFieldsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteCreateInput = {
    id?: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutPrerequisitesListInput
  }

  export type ActivityPrerequisiteUncheckedCreateInput = {
    id?: string
    activityId: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityPrerequisiteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutPrerequisitesListNestedInput
  }

  export type ActivityPrerequisiteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteCreateManyInput = {
    id?: string
    activityId: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityPrerequisiteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionCreateInput = {
    id?: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutSessionsInput
  }

  export type ActivitySessionUncheckedCreateInput = {
    id?: string
    activityId: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivitySessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type ActivitySessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionCreateManyInput = {
    id?: string
    activityId: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivitySessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareCreateInput = {
    id?: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sharedWithUser: UserCreateNestedOneWithoutSharedWithMeInput
    sharingUser: UserCreateNestedOneWithoutMySharesInput
    profiles?: ActivityShareProfileCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareUncheckedCreateInput = {
    id?: string
    sharingUserId: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedWithUser?: UserUpdateOneRequiredWithoutSharedWithMeNestedInput
    sharingUser?: UserUpdateOneRequiredWithoutMySharesNestedInput
    profiles?: ActivityShareProfileUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharingUserId?: StringFieldUpdateOperationsInput | string
    sharedWithUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareCreateManyInput = {
    id?: string
    sharingUserId: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityShareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharingUserId?: StringFieldUpdateOperationsInput | string
    sharedWithUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileCreateInput = {
    id?: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
    activityShare: ActivityShareCreateNestedOneWithoutProfilesInput
    child: ChildCreateNestedOneWithoutProfilesInput
  }

  export type ActivityShareProfileUncheckedCreateInput = {
    id?: string
    activityShareId: string
    childId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ActivityShareProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityShare?: ActivityShareUpdateOneRequiredWithoutProfilesNestedInput
    child?: ChildUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ActivityShareProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityShareId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileCreateManyInput = {
    id?: string
    activityShareId: string
    childId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ActivityShareProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityShareId?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySubtypeCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
    activities?: ActivityCreateNestedManyWithoutActivitySubtypeInput
    activityType: ActivityTypeCreateNestedOneWithoutSubtypesInput
  }

  export type ActivitySubtypeUncheckedCreateInput = {
    id?: string
    activityTypeId: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
    activities?: ActivityUncheckedCreateNestedManyWithoutActivitySubtypeInput
  }

  export type ActivitySubtypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    activities?: ActivityUpdateManyWithoutActivitySubtypeNestedInput
    activityType?: ActivityTypeUpdateOneRequiredWithoutSubtypesNestedInput
  }

  export type ActivitySubtypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityTypeId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    activities?: ActivityUncheckedUpdateManyWithoutActivitySubtypeNestedInput
  }

  export type ActivitySubtypeCreateManyInput = {
    id?: string
    activityTypeId: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
  }

  export type ActivitySubtypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ActivitySubtypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityTypeId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityTypeCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutActivityTypeInput
    subtypes?: ActivitySubtypeCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutActivityTypeInput
    subtypes?: ActivitySubtypeUncheckedCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutActivityTypeNestedInput
    subtypes?: ActivitySubtypeUpdateManyWithoutActivityTypeNestedInput
  }

  export type ActivityTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutActivityTypeNestedInput
    subtypes?: ActivitySubtypeUncheckedUpdateManyWithoutActivityTypeNestedInput
  }

  export type ActivityTypeCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildCreateInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileCreateNestedManyWithoutChildInput
    user: UserCreateNestedOneWithoutChildrenInput
    childActivities?: ChildActivityCreateNestedManyWithoutChildInput
  }

  export type ChildUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutChildInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutChildInput
  }

  export type ChildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUpdateManyWithoutChildNestedInput
    user?: UserUpdateOneRequiredWithoutChildrenNestedInput
    childActivities?: ChildActivityUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutChildNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutChildNestedInput
  }

  export type ChildCreateManyInput = {
    id?: string
    userId: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityCreateInput = {
    id?: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutChildActivitiesInput
    child: ChildCreateNestedOneWithoutChildActivitiesInput
  }

  export type ChildActivityUncheckedCreateInput = {
    id?: string
    childId: string
    activityId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutChildActivitiesNestedInput
    child?: ChildUpdateOneRequiredWithoutChildActivitiesNestedInput
  }

  export type ChildActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityCreateManyInput = {
    id?: string
    childId: string
    activityId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteCreateInput = {
    id?: string
    createdAt?: Date | string
    notifyOnChange?: boolean
    activity: ActivityCreateNestedOneWithoutFavoritesInput
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateInput = {
    id?: string
    userId: string
    activityId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type FavoriteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutFavoritesNestedInput
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoriteCreateManyInput = {
    id?: string
    userId: string
    activityId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type FavoriteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoriteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationCreateInput = {
    id?: string
    recipientEmail: string
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    recipient?: UserCreateNestedOneWithoutReceivedInvitationsInput
    sender: UserCreateNestedOneWithoutSentInvitationsInput
  }

  export type InvitationUncheckedCreateInput = {
    id?: string
    senderId: string
    recipientEmail: string
    recipientUserId?: string | null
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type InvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneWithoutReceivedInvitationsNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationCreateManyInput = {
    id?: string
    senderId: string
    recipientEmail: string
    recipientUserId?: string | null
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type InvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityCreateInput = {
    id?: string
    name: string
    province: string
    country?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locations?: LocationCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateInput = {
    id?: string
    name: string
    province: string
    country?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    locations?: LocationUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locations?: LocationUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityCreateManyInput = {
    id?: string
    name: string
    province: string
    country?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateInput = {
    id?: string
    name: string
    address?: string | null
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    city: CityCreateNestedOneWithoutLocationsInput
    activities?: ActivityCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: string
    name: string
    address?: string | null
    cityId: string
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: CityUpdateOneRequiredWithoutLocationsNestedInput
    activities?: ActivityUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: StringFieldUpdateOperationsInput | string
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: string
    name: string
    address?: string | null
    cityId: string
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: StringFieldUpdateOperationsInput | string
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderCreateInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsUncheckedCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobUncheckedCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUncheckedUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUncheckedUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateManyInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
  }

  export type ProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderMetricsCreateInput = {
    id?: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
    provider: ProviderCreateNestedOneWithoutProviderMetricsInput
  }

  export type ProviderMetricsUncheckedCreateInput = {
    id?: string
    providerId: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
  }

  export type ProviderMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutProviderMetricsNestedInput
  }

  export type ProviderMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderMetricsCreateManyInput = {
    id?: string
    providerId: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
  }

  export type ProviderMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobCreateInput = {
    id?: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    provider: ProviderCreateNestedOneWithoutScrapeJobInput
  }

  export type ScrapeJobUncheckedCreateInput = {
    id?: string
    providerId: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ScrapeJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    provider?: ProviderUpdateOneRequiredWithoutScrapeJobNestedInput
  }

  export type ScrapeJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobCreateManyInput = {
    id?: string
    providerId: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ScrapeJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScraperHealthCheckCreateInput = {
    id?: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
    provider: ProviderCreateNestedOneWithoutScraperHealthCheckInput
  }

  export type ScraperHealthCheckUncheckedCreateInput = {
    id?: string
    providerId: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ScraperHealthCheckUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: ProviderUpdateOneRequiredWithoutScraperHealthCheckNestedInput
  }

  export type ScraperHealthCheckUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScraperHealthCheckCreateManyInput = {
    id?: string
    providerId: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ScraperHealthCheckUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScraperHealthCheckUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScraperRunCreateInput = {
    id?: string
    providerId: string
    status: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesDeactivated?: number
    activitiesPurged?: number
    errorMessage?: string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunUncheckedCreateInput = {
    id?: string
    providerId: string
    status: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesDeactivated?: number
    activitiesPurged?: number
    errorMessage?: string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesDeactivated?: IntFieldUpdateOperationsInput | number
    activitiesPurged?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesDeactivated?: IntFieldUpdateOperationsInput | number
    activitiesPurged?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunCreateManyInput = {
    id?: string
    providerId: string
    status: string
    startedAt?: Date | string
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesDeactivated?: number
    activitiesPurged?: number
    errorMessage?: string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesDeactivated?: IntFieldUpdateOperationsInput | number
    activitiesPurged?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScraperRunUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesDeactivated?: IntFieldUpdateOperationsInput | number
    activitiesPurged?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    logs?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    ageMin?: number | null
    ageMax?: number | null
    requiresParent?: boolean
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    ageMin?: number | null
    ageMax?: number | null
    requiresParent?: boolean
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    ageMin?: number | null
    ageMax?: number | null
    requiresParent?: boolean
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryCreateInput = {
    id?: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityCategoryUncheckedCreateInput = {
    id?: string
    activityId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ActivityCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivityCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryCreateManyInput = {
    id?: string
    activityId: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ActivityCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ActivitySubtypeNullableScalarRelationFilter = {
    is?: ActivitySubtypeWhereInput | null
    isNot?: ActivitySubtypeWhereInput | null
  }

  export type ActivityTypeNullableScalarRelationFilter = {
    is?: ActivityTypeWhereInput | null
    isNot?: ActivityTypeWhereInput | null
  }

  export type LocationNullableScalarRelationFilter = {
    is?: LocationWhereInput | null
    isNot?: LocationWhereInput | null
  }

  export type ProviderScalarRelationFilter = {
    is?: ProviderWhereInput
    isNot?: ProviderWhereInput
  }

  export type ActivityPrerequisiteListRelationFilter = {
    every?: ActivityPrerequisiteWhereInput
    some?: ActivityPrerequisiteWhereInput
    none?: ActivityPrerequisiteWhereInput
  }

  export type ActivitySessionListRelationFilter = {
    every?: ActivitySessionWhereInput
    some?: ActivitySessionWhereInput
    none?: ActivitySessionWhereInput
  }

  export type ChildActivityListRelationFilter = {
    every?: ChildActivityWhereInput
    some?: ChildActivityWhereInput
    none?: ChildActivityWhereInput
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type ActivityCategoryListRelationFilter = {
    every?: ActivityCategoryWhereInput
    some?: ActivityCategoryWhereInput
    none?: ActivityCategoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivityPrerequisiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivitySessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChildActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityProviderIdExternalIdCompoundUniqueInput = {
    providerId: string
    externalId: string
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    schedule?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    registrationDate?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrder
    totalSpots?: SortOrder
    locationId?: SortOrder
    registrationUrl?: SortOrder
    courseId?: SortOrder
    isActive?: SortOrder
    isUpdated?: SortOrder
    lastSeenAt?: SortOrder
    rawData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dayOfWeek?: SortOrder
    registrationEndDate?: SortOrder
    registrationEndTime?: SortOrder
    costIncludesTax?: SortOrder
    taxAmount?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    courseDetails?: SortOrder
    dates?: SortOrder
    registrationStatus?: SortOrder
    registrationButtonText?: SortOrder
    detailUrl?: SortOrder
    instructor?: SortOrder
    hasMultipleSessions?: SortOrder
    sessionCount?: SortOrder
    hasPrerequisites?: SortOrder
    fullDescription?: SortOrder
    whatToBring?: SortOrder
    prerequisites?: SortOrder
    directRegistrationUrl?: SortOrder
    contactInfo?: SortOrder
    activitySubtypeId?: SortOrder
    activityTypeId?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    ageMin?: SortOrder
    ageMax?: SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrder
    totalSpots?: SortOrder
    taxAmount?: SortOrder
    sessionCount?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    schedule?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    registrationDate?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrder
    totalSpots?: SortOrder
    locationId?: SortOrder
    registrationUrl?: SortOrder
    courseId?: SortOrder
    isActive?: SortOrder
    isUpdated?: SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrationEndDate?: SortOrder
    registrationEndTime?: SortOrder
    costIncludesTax?: SortOrder
    taxAmount?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    courseDetails?: SortOrder
    dates?: SortOrder
    registrationStatus?: SortOrder
    registrationButtonText?: SortOrder
    detailUrl?: SortOrder
    instructor?: SortOrder
    hasMultipleSessions?: SortOrder
    sessionCount?: SortOrder
    hasPrerequisites?: SortOrder
    fullDescription?: SortOrder
    whatToBring?: SortOrder
    prerequisites?: SortOrder
    directRegistrationUrl?: SortOrder
    contactInfo?: SortOrder
    activitySubtypeId?: SortOrder
    activityTypeId?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    schedule?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    registrationDate?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrder
    totalSpots?: SortOrder
    locationId?: SortOrder
    registrationUrl?: SortOrder
    courseId?: SortOrder
    isActive?: SortOrder
    isUpdated?: SortOrder
    lastSeenAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    registrationEndDate?: SortOrder
    registrationEndTime?: SortOrder
    costIncludesTax?: SortOrder
    taxAmount?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    courseDetails?: SortOrder
    dates?: SortOrder
    registrationStatus?: SortOrder
    registrationButtonText?: SortOrder
    detailUrl?: SortOrder
    instructor?: SortOrder
    hasMultipleSessions?: SortOrder
    sessionCount?: SortOrder
    hasPrerequisites?: SortOrder
    fullDescription?: SortOrder
    whatToBring?: SortOrder
    prerequisites?: SortOrder
    directRegistrationUrl?: SortOrder
    contactInfo?: SortOrder
    activitySubtypeId?: SortOrder
    activityTypeId?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    ageMin?: SortOrder
    ageMax?: SortOrder
    cost?: SortOrder
    spotsAvailable?: SortOrder
    totalSpots?: SortOrder
    taxAmount?: SortOrder
    sessionCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ActivityHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    changeType?: SortOrder
    previousData?: SortOrder
    newData?: SortOrder
    changedFields?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    changeType?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    changeType?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityScalarRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type ActivityPrerequisiteCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    courseId?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityPrerequisiteMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    courseId?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityPrerequisiteMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    url?: SortOrder
    courseId?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivitySessionCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    sessionNumber?: SortOrder
    date?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    subLocation?: SortOrder
    instructor?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivitySessionAvgOrderByAggregateInput = {
    sessionNumber?: SortOrder
  }

  export type ActivitySessionMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    sessionNumber?: SortOrder
    date?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    subLocation?: SortOrder
    instructor?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivitySessionMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    sessionNumber?: SortOrder
    date?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    subLocation?: SortOrder
    instructor?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivitySessionSumOrderByAggregateInput = {
    sessionNumber?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ActivityShareProfileListRelationFilter = {
    every?: ActivityShareProfileWhereInput
    some?: ActivityShareProfileWhereInput
    none?: ActivityShareProfileWhereInput
  }

  export type ActivityShareProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityShareSharingUserIdSharedWithUserIdCompoundUniqueInput = {
    sharingUserId: string
    sharedWithUserId: string
  }

  export type ActivityShareCountOrderByAggregateInput = {
    id?: SortOrder
    sharingUserId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityShareMaxOrderByAggregateInput = {
    id?: SortOrder
    sharingUserId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityShareMinOrderByAggregateInput = {
    id?: SortOrder
    sharingUserId?: SortOrder
    sharedWithUserId?: SortOrder
    permissionLevel?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityShareScalarRelationFilter = {
    is?: ActivityShareWhereInput
    isNot?: ActivityShareWhereInput
  }

  export type ChildScalarRelationFilter = {
    is?: ChildWhereInput
    isNot?: ChildWhereInput
  }

  export type ActivityShareProfileActivityShareIdChildIdCompoundUniqueInput = {
    activityShareId: string
    childId: string
  }

  export type ActivityShareProfileCountOrderByAggregateInput = {
    id?: SortOrder
    activityShareId?: SortOrder
    childId?: SortOrder
    canViewInterested?: SortOrder
    canViewRegistered?: SortOrder
    canViewCompleted?: SortOrder
    canViewNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityShareProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    activityShareId?: SortOrder
    childId?: SortOrder
    canViewInterested?: SortOrder
    canViewRegistered?: SortOrder
    canViewCompleted?: SortOrder
    canViewNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityShareProfileMinOrderByAggregateInput = {
    id?: SortOrder
    activityShareId?: SortOrder
    childId?: SortOrder
    canViewInterested?: SortOrder
    canViewRegistered?: SortOrder
    canViewCompleted?: SortOrder
    canViewNotes?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type ActivityTypeScalarRelationFilter = {
    is?: ActivityTypeWhereInput
    isNot?: ActivityTypeWhereInput
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivitySubtypeActivityTypeIdCodeCompoundUniqueInput = {
    activityTypeId: string
    code: string
  }

  export type ActivitySubtypeCountOrderByAggregateInput = {
    id?: SortOrder
    activityTypeId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
  }

  export type ActivitySubtypeAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type ActivitySubtypeMaxOrderByAggregateInput = {
    id?: SortOrder
    activityTypeId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
  }

  export type ActivitySubtypeMinOrderByAggregateInput = {
    id?: SortOrder
    activityTypeId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayOrder?: SortOrder
  }

  export type ActivitySubtypeSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type ActivitySubtypeListRelationFilter = {
    every?: ActivitySubtypeWhereInput
    some?: ActivitySubtypeWhereInput
    none?: ActivitySubtypeWhereInput
  }

  export type ActivitySubtypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityTypeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    imageUrl?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityTypeAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type ActivityTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    imageUrl?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityTypeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    iconName?: SortOrder
    imageUrl?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ActivityTypeSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type ChildCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    avatarUrl?: SortOrder
    interests?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    avatarUrl?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    avatarUrl?: SortOrder
    notes?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildActivityChildIdActivityIdCompoundUniqueInput = {
    childId: string
    activityId: string
  }

  export type ChildActivityCountOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    activityId?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildActivityAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ChildActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    activityId?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildActivityMinOrderByAggregateInput = {
    id?: SortOrder
    childId?: SortOrder
    activityId?: SortOrder
    status?: SortOrder
    registeredAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChildActivitySumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FavoriteUserIdActivityIdCompoundUniqueInput = {
    userId: string
    activityId: string
  }

  export type FavoriteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    createdAt?: SortOrder
    notifyOnChange?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    createdAt?: SortOrder
    notifyOnChange?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    createdAt?: SortOrder
    notifyOnChange?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type InvitationCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientEmail?: SortOrder
    recipientUserId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientEmail?: SortOrder
    recipientUserId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type InvitationMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    recipientEmail?: SortOrder
    recipientUserId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LocationListRelationFilter = {
    every?: LocationWhereInput
    some?: LocationWhereInput
    none?: LocationWhereInput
  }

  export type LocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CityNameProvinceCountryCompoundUniqueInput = {
    name: string
    province: string
    country: string
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    province?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    province?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    province?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityScalarRelationFilter = {
    is?: CityWhereInput
    isNot?: CityWhereInput
  }

  export type LocationNameAddressCityIdCompoundUniqueInput = {
    name: string
    address: string
    cityId: string
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    cityId?: SortOrder
    postalCode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    facility?: SortOrder
    fullAddress?: SortOrder
    mapUrl?: SortOrder
    placeId?: SortOrder
    phoneNumber?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    cityId?: SortOrder
    postalCode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    facility?: SortOrder
    fullAddress?: SortOrder
    mapUrl?: SortOrder
    placeId?: SortOrder
    phoneNumber?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    cityId?: SortOrder
    postalCode?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    facility?: SortOrder
    fullAddress?: SortOrder
    mapUrl?: SortOrder
    placeId?: SortOrder
    phoneNumber?: SortOrder
    website?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProviderMetricsListRelationFilter = {
    every?: ProviderMetricsWhereInput
    some?: ProviderMetricsWhereInput
    none?: ProviderMetricsWhereInput
  }

  export type ScrapeJobListRelationFilter = {
    every?: ScrapeJobWhereInput
    some?: ScrapeJobWhereInput
    none?: ScrapeJobWhereInput
  }

  export type ScraperHealthCheckListRelationFilter = {
    every?: ScraperHealthCheckWhereInput
    some?: ScraperHealthCheckWhereInput
    none?: ScraperHealthCheckWhereInput
  }

  export type ProviderMetricsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScrapeJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScraperHealthCheckOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    scraperConfig?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: SortOrder
    contactInfo?: SortOrder
    platform?: SortOrder
  }

  export type ProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: SortOrder
    platform?: SortOrder
  }

  export type ProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: SortOrder
    platform?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type ProviderMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    scrapeDate?: SortOrder
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrder
    errors?: SortOrder
    scrapeDuration?: SortOrder
    memoryUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderMetricsAvgOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrder
    scrapeDuration?: SortOrder
    memoryUsed?: SortOrder
  }

  export type ProviderMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    scrapeDate?: SortOrder
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrder
    scrapeDuration?: SortOrder
    memoryUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    scrapeDate?: SortOrder
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrder
    scrapeDuration?: SortOrder
    memoryUsed?: SortOrder
    createdAt?: SortOrder
  }

  export type ProviderMetricsSumOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesProcessed?: SortOrder
    dataQualityScore?: SortOrder
    scrapeDuration?: SortOrder
    memoryUsed?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type ScrapeJobCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
    errorMessage?: SortOrder
    errorDetails?: SortOrder
    createdAt?: SortOrder
  }

  export type ScrapeJobAvgOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
  }

  export type ScrapeJobMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type ScrapeJobMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type ScrapeJobSumOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesRemoved?: SortOrder
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type ScraperHealthCheckCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    details?: SortOrder
    checkedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ScraperHealthCheckMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    checkedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ScraperHealthCheckMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    checkedAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ScraperRunCountOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
    errorMessage?: SortOrder
    logs?: SortOrder
  }

  export type ScraperRunAvgOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
  }

  export type ScraperRunMaxOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
    errorMessage?: SortOrder
  }

  export type ScraperRunMinOrderByAggregateInput = {
    id?: SortOrder
    providerId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
    errorMessage?: SortOrder
  }

  export type ScraperRunSumOrderByAggregateInput = {
    activitiesFound?: SortOrder
    activitiesCreated?: SortOrder
    activitiesUpdated?: SortOrder
    activitiesDeactivated?: SortOrder
    activitiesPurged?: SortOrder
  }

  export type ActivityShareListRelationFilter = {
    every?: ActivityShareWhereInput
    some?: ActivityShareWhereInput
    none?: ActivityShareWhereInput
  }

  export type ChildListRelationFilter = {
    every?: ChildWhereInput
    some?: ChildWhereInput
    none?: ChildWhereInput
  }

  export type InvitationListRelationFilter = {
    every?: InvitationWhereInput
    some?: InvitationWhereInput
    none?: InvitationWhereInput
  }

  export type ActivityShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChildOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordHash?: SortOrder
    phoneNumber?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordHash?: SortOrder
    phoneNumber?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordHash?: SortOrder
    phoneNumber?: SortOrder
    isVerified?: SortOrder
    verificationToken?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    requiresParent?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    ageMin?: SortOrder
    ageMax?: SortOrder
    displayOrder?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    requiresParent?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ageMin?: SortOrder
    ageMax?: SortOrder
    requiresParent?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    ageMin?: SortOrder
    ageMax?: SortOrder
    displayOrder?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ActivityCategoryActivityIdCategoryIdCompoundUniqueInput = {
    activityId: string
    categoryId: string
  }

  export type ActivityCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityCreatedayOfWeekInput = {
    set: string[]
  }

  export type ActivitySubtypeCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivitiesInput, ActivitySubtypeUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivitiesInput
    connect?: ActivitySubtypeWhereUniqueInput
  }

  export type ActivityTypeCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ActivityTypeCreateWithoutActivitiesInput, ActivityTypeUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ActivityTypeCreateOrConnectWithoutActivitiesInput
    connect?: ActivityTypeWhereUniqueInput
  }

  export type LocationCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<LocationCreateWithoutActivitiesInput, LocationUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutActivitiesInput
    connect?: LocationWhereUniqueInput
  }

  export type ProviderCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<ProviderCreateWithoutActivitiesInput, ProviderUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutActivitiesInput
    connect?: ProviderWhereUniqueInput
  }

  export type ActivityPrerequisiteCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput> | ActivityPrerequisiteCreateWithoutActivityInput[] | ActivityPrerequisiteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityPrerequisiteCreateOrConnectWithoutActivityInput | ActivityPrerequisiteCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityPrerequisiteCreateManyActivityInputEnvelope
    connect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
  }

  export type ActivitySessionCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput> | ActivitySessionCreateWithoutActivityInput[] | ActivitySessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivitySessionCreateOrConnectWithoutActivityInput | ActivitySessionCreateOrConnectWithoutActivityInput[]
    createMany?: ActivitySessionCreateManyActivityInputEnvelope
    connect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
  }

  export type ChildActivityCreateNestedManyWithoutActivityInput = {
    create?: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput> | ChildActivityCreateWithoutActivityInput[] | ChildActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutActivityInput | ChildActivityCreateOrConnectWithoutActivityInput[]
    createMany?: ChildActivityCreateManyActivityInputEnvelope
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutActivityInput = {
    create?: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput> | FavoriteCreateWithoutActivityInput[] | FavoriteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutActivityInput | FavoriteCreateOrConnectWithoutActivityInput[]
    createMany?: FavoriteCreateManyActivityInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type ActivityCategoryCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput> | ActivityCategoryCreateWithoutActivityInput[] | ActivityCategoryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutActivityInput | ActivityCategoryCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityCategoryCreateManyActivityInputEnvelope
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
  }

  export type ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput> | ActivityPrerequisiteCreateWithoutActivityInput[] | ActivityPrerequisiteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityPrerequisiteCreateOrConnectWithoutActivityInput | ActivityPrerequisiteCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityPrerequisiteCreateManyActivityInputEnvelope
    connect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
  }

  export type ActivitySessionUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput> | ActivitySessionCreateWithoutActivityInput[] | ActivitySessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivitySessionCreateOrConnectWithoutActivityInput | ActivitySessionCreateOrConnectWithoutActivityInput[]
    createMany?: ActivitySessionCreateManyActivityInputEnvelope
    connect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
  }

  export type ChildActivityUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput> | ChildActivityCreateWithoutActivityInput[] | ChildActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutActivityInput | ChildActivityCreateOrConnectWithoutActivityInput[]
    createMany?: ChildActivityCreateManyActivityInputEnvelope
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput> | FavoriteCreateWithoutActivityInput[] | FavoriteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutActivityInput | FavoriteCreateOrConnectWithoutActivityInput[]
    createMany?: FavoriteCreateManyActivityInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput> | ActivityCategoryCreateWithoutActivityInput[] | ActivityCategoryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutActivityInput | ActivityCategoryCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityCategoryCreateManyActivityInputEnvelope
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ActivityUpdatedayOfWeekInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ActivitySubtypeUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivitiesInput, ActivitySubtypeUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivitiesInput
    upsert?: ActivitySubtypeUpsertWithoutActivitiesInput
    disconnect?: ActivitySubtypeWhereInput | boolean
    delete?: ActivitySubtypeWhereInput | boolean
    connect?: ActivitySubtypeWhereUniqueInput
    update?: XOR<XOR<ActivitySubtypeUpdateToOneWithWhereWithoutActivitiesInput, ActivitySubtypeUpdateWithoutActivitiesInput>, ActivitySubtypeUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityTypeUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<ActivityTypeCreateWithoutActivitiesInput, ActivityTypeUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ActivityTypeCreateOrConnectWithoutActivitiesInput
    upsert?: ActivityTypeUpsertWithoutActivitiesInput
    disconnect?: ActivityTypeWhereInput | boolean
    delete?: ActivityTypeWhereInput | boolean
    connect?: ActivityTypeWhereUniqueInput
    update?: XOR<XOR<ActivityTypeUpdateToOneWithWhereWithoutActivitiesInput, ActivityTypeUpdateWithoutActivitiesInput>, ActivityTypeUncheckedUpdateWithoutActivitiesInput>
  }

  export type LocationUpdateOneWithoutActivitiesNestedInput = {
    create?: XOR<LocationCreateWithoutActivitiesInput, LocationUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutActivitiesInput
    upsert?: LocationUpsertWithoutActivitiesInput
    disconnect?: LocationWhereInput | boolean
    delete?: LocationWhereInput | boolean
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutActivitiesInput, LocationUpdateWithoutActivitiesInput>, LocationUncheckedUpdateWithoutActivitiesInput>
  }

  export type ProviderUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<ProviderCreateWithoutActivitiesInput, ProviderUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutActivitiesInput
    upsert?: ProviderUpsertWithoutActivitiesInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutActivitiesInput, ProviderUpdateWithoutActivitiesInput>, ProviderUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityPrerequisiteUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput> | ActivityPrerequisiteCreateWithoutActivityInput[] | ActivityPrerequisiteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityPrerequisiteCreateOrConnectWithoutActivityInput | ActivityPrerequisiteCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityPrerequisiteUpsertWithWhereUniqueWithoutActivityInput | ActivityPrerequisiteUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityPrerequisiteCreateManyActivityInputEnvelope
    set?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    disconnect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    delete?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    connect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    update?: ActivityPrerequisiteUpdateWithWhereUniqueWithoutActivityInput | ActivityPrerequisiteUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityPrerequisiteUpdateManyWithWhereWithoutActivityInput | ActivityPrerequisiteUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityPrerequisiteScalarWhereInput | ActivityPrerequisiteScalarWhereInput[]
  }

  export type ActivitySessionUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput> | ActivitySessionCreateWithoutActivityInput[] | ActivitySessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivitySessionCreateOrConnectWithoutActivityInput | ActivitySessionCreateOrConnectWithoutActivityInput[]
    upsert?: ActivitySessionUpsertWithWhereUniqueWithoutActivityInput | ActivitySessionUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivitySessionCreateManyActivityInputEnvelope
    set?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    disconnect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    delete?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    connect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    update?: ActivitySessionUpdateWithWhereUniqueWithoutActivityInput | ActivitySessionUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivitySessionUpdateManyWithWhereWithoutActivityInput | ActivitySessionUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivitySessionScalarWhereInput | ActivitySessionScalarWhereInput[]
  }

  export type ChildActivityUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput> | ChildActivityCreateWithoutActivityInput[] | ChildActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutActivityInput | ChildActivityCreateOrConnectWithoutActivityInput[]
    upsert?: ChildActivityUpsertWithWhereUniqueWithoutActivityInput | ChildActivityUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ChildActivityCreateManyActivityInputEnvelope
    set?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    disconnect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    delete?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    update?: ChildActivityUpdateWithWhereUniqueWithoutActivityInput | ChildActivityUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ChildActivityUpdateManyWithWhereWithoutActivityInput | ChildActivityUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutActivityNestedInput = {
    create?: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput> | FavoriteCreateWithoutActivityInput[] | FavoriteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutActivityInput | FavoriteCreateOrConnectWithoutActivityInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutActivityInput | FavoriteUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: FavoriteCreateManyActivityInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutActivityInput | FavoriteUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutActivityInput | FavoriteUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type ActivityCategoryUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput> | ActivityCategoryCreateWithoutActivityInput[] | ActivityCategoryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutActivityInput | ActivityCategoryCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityCategoryUpsertWithWhereUniqueWithoutActivityInput | ActivityCategoryUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityCategoryCreateManyActivityInputEnvelope
    set?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    disconnect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    delete?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    update?: ActivityCategoryUpdateWithWhereUniqueWithoutActivityInput | ActivityCategoryUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityCategoryUpdateManyWithWhereWithoutActivityInput | ActivityCategoryUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
  }

  export type ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput> | ActivityPrerequisiteCreateWithoutActivityInput[] | ActivityPrerequisiteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityPrerequisiteCreateOrConnectWithoutActivityInput | ActivityPrerequisiteCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityPrerequisiteUpsertWithWhereUniqueWithoutActivityInput | ActivityPrerequisiteUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityPrerequisiteCreateManyActivityInputEnvelope
    set?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    disconnect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    delete?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    connect?: ActivityPrerequisiteWhereUniqueInput | ActivityPrerequisiteWhereUniqueInput[]
    update?: ActivityPrerequisiteUpdateWithWhereUniqueWithoutActivityInput | ActivityPrerequisiteUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityPrerequisiteUpdateManyWithWhereWithoutActivityInput | ActivityPrerequisiteUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityPrerequisiteScalarWhereInput | ActivityPrerequisiteScalarWhereInput[]
  }

  export type ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput> | ActivitySessionCreateWithoutActivityInput[] | ActivitySessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivitySessionCreateOrConnectWithoutActivityInput | ActivitySessionCreateOrConnectWithoutActivityInput[]
    upsert?: ActivitySessionUpsertWithWhereUniqueWithoutActivityInput | ActivitySessionUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivitySessionCreateManyActivityInputEnvelope
    set?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    disconnect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    delete?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    connect?: ActivitySessionWhereUniqueInput | ActivitySessionWhereUniqueInput[]
    update?: ActivitySessionUpdateWithWhereUniqueWithoutActivityInput | ActivitySessionUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivitySessionUpdateManyWithWhereWithoutActivityInput | ActivitySessionUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivitySessionScalarWhereInput | ActivitySessionScalarWhereInput[]
  }

  export type ChildActivityUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput> | ChildActivityCreateWithoutActivityInput[] | ChildActivityUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutActivityInput | ChildActivityCreateOrConnectWithoutActivityInput[]
    upsert?: ChildActivityUpsertWithWhereUniqueWithoutActivityInput | ChildActivityUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ChildActivityCreateManyActivityInputEnvelope
    set?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    disconnect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    delete?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    update?: ChildActivityUpdateWithWhereUniqueWithoutActivityInput | ChildActivityUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ChildActivityUpdateManyWithWhereWithoutActivityInput | ChildActivityUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput> | FavoriteCreateWithoutActivityInput[] | FavoriteUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutActivityInput | FavoriteCreateOrConnectWithoutActivityInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutActivityInput | FavoriteUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: FavoriteCreateManyActivityInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutActivityInput | FavoriteUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutActivityInput | FavoriteUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput> | ActivityCategoryCreateWithoutActivityInput[] | ActivityCategoryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutActivityInput | ActivityCategoryCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityCategoryUpsertWithWhereUniqueWithoutActivityInput | ActivityCategoryUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityCategoryCreateManyActivityInputEnvelope
    set?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    disconnect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    delete?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    update?: ActivityCategoryUpdateWithWhereUniqueWithoutActivityInput | ActivityCategoryUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityCategoryUpdateManyWithWhereWithoutActivityInput | ActivityCategoryUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
  }

  export type ActivityHistoryCreatechangedFieldsInput = {
    set: string[]
  }

  export type ActivityHistoryUpdatechangedFieldsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ActivityCreateNestedOneWithoutPrerequisitesListInput = {
    create?: XOR<ActivityCreateWithoutPrerequisitesListInput, ActivityUncheckedCreateWithoutPrerequisitesListInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutPrerequisitesListInput
    connect?: ActivityWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutPrerequisitesListNestedInput = {
    create?: XOR<ActivityCreateWithoutPrerequisitesListInput, ActivityUncheckedCreateWithoutPrerequisitesListInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutPrerequisitesListInput
    upsert?: ActivityUpsertWithoutPrerequisitesListInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutPrerequisitesListInput, ActivityUpdateWithoutPrerequisitesListInput>, ActivityUncheckedUpdateWithoutPrerequisitesListInput>
  }

  export type ActivityCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ActivityCreateWithoutSessionsInput, ActivityUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutSessionsInput
    connect?: ActivityWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<ActivityCreateWithoutSessionsInput, ActivityUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutSessionsInput
    upsert?: ActivityUpsertWithoutSessionsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutSessionsInput, ActivityUpdateWithoutSessionsInput>, ActivityUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutSharedWithMeInput = {
    create?: XOR<UserCreateWithoutSharedWithMeInput, UserUncheckedCreateWithoutSharedWithMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharedWithMeInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMySharesInput = {
    create?: XOR<UserCreateWithoutMySharesInput, UserUncheckedCreateWithoutMySharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMySharesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityShareProfileCreateNestedManyWithoutActivityShareInput = {
    create?: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput> | ActivityShareProfileCreateWithoutActivityShareInput[] | ActivityShareProfileUncheckedCreateWithoutActivityShareInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutActivityShareInput | ActivityShareProfileCreateOrConnectWithoutActivityShareInput[]
    createMany?: ActivityShareProfileCreateManyActivityShareInputEnvelope
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
  }

  export type ActivityShareProfileUncheckedCreateNestedManyWithoutActivityShareInput = {
    create?: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput> | ActivityShareProfileCreateWithoutActivityShareInput[] | ActivityShareProfileUncheckedCreateWithoutActivityShareInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutActivityShareInput | ActivityShareProfileCreateOrConnectWithoutActivityShareInput[]
    createMany?: ActivityShareProfileCreateManyActivityShareInputEnvelope
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSharedWithMeNestedInput = {
    create?: XOR<UserCreateWithoutSharedWithMeInput, UserUncheckedCreateWithoutSharedWithMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharedWithMeInput
    upsert?: UserUpsertWithoutSharedWithMeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSharedWithMeInput, UserUpdateWithoutSharedWithMeInput>, UserUncheckedUpdateWithoutSharedWithMeInput>
  }

  export type UserUpdateOneRequiredWithoutMySharesNestedInput = {
    create?: XOR<UserCreateWithoutMySharesInput, UserUncheckedCreateWithoutMySharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMySharesInput
    upsert?: UserUpsertWithoutMySharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMySharesInput, UserUpdateWithoutMySharesInput>, UserUncheckedUpdateWithoutMySharesInput>
  }

  export type ActivityShareProfileUpdateManyWithoutActivityShareNestedInput = {
    create?: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput> | ActivityShareProfileCreateWithoutActivityShareInput[] | ActivityShareProfileUncheckedCreateWithoutActivityShareInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutActivityShareInput | ActivityShareProfileCreateOrConnectWithoutActivityShareInput[]
    upsert?: ActivityShareProfileUpsertWithWhereUniqueWithoutActivityShareInput | ActivityShareProfileUpsertWithWhereUniqueWithoutActivityShareInput[]
    createMany?: ActivityShareProfileCreateManyActivityShareInputEnvelope
    set?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    disconnect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    delete?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    update?: ActivityShareProfileUpdateWithWhereUniqueWithoutActivityShareInput | ActivityShareProfileUpdateWithWhereUniqueWithoutActivityShareInput[]
    updateMany?: ActivityShareProfileUpdateManyWithWhereWithoutActivityShareInput | ActivityShareProfileUpdateManyWithWhereWithoutActivityShareInput[]
    deleteMany?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
  }

  export type ActivityShareProfileUncheckedUpdateManyWithoutActivityShareNestedInput = {
    create?: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput> | ActivityShareProfileCreateWithoutActivityShareInput[] | ActivityShareProfileUncheckedCreateWithoutActivityShareInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutActivityShareInput | ActivityShareProfileCreateOrConnectWithoutActivityShareInput[]
    upsert?: ActivityShareProfileUpsertWithWhereUniqueWithoutActivityShareInput | ActivityShareProfileUpsertWithWhereUniqueWithoutActivityShareInput[]
    createMany?: ActivityShareProfileCreateManyActivityShareInputEnvelope
    set?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    disconnect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    delete?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    update?: ActivityShareProfileUpdateWithWhereUniqueWithoutActivityShareInput | ActivityShareProfileUpdateWithWhereUniqueWithoutActivityShareInput[]
    updateMany?: ActivityShareProfileUpdateManyWithWhereWithoutActivityShareInput | ActivityShareProfileUpdateManyWithWhereWithoutActivityShareInput[]
    deleteMany?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
  }

  export type ActivityShareCreateNestedOneWithoutProfilesInput = {
    create?: XOR<ActivityShareCreateWithoutProfilesInput, ActivityShareUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ActivityShareCreateOrConnectWithoutProfilesInput
    connect?: ActivityShareWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutProfilesInput = {
    create?: XOR<ChildCreateWithoutProfilesInput, ChildUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutProfilesInput
    connect?: ChildWhereUniqueInput
  }

  export type ActivityShareUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<ActivityShareCreateWithoutProfilesInput, ActivityShareUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ActivityShareCreateOrConnectWithoutProfilesInput
    upsert?: ActivityShareUpsertWithoutProfilesInput
    connect?: ActivityShareWhereUniqueInput
    update?: XOR<XOR<ActivityShareUpdateToOneWithWhereWithoutProfilesInput, ActivityShareUpdateWithoutProfilesInput>, ActivityShareUncheckedUpdateWithoutProfilesInput>
  }

  export type ChildUpdateOneRequiredWithoutProfilesNestedInput = {
    create?: XOR<ChildCreateWithoutProfilesInput, ChildUncheckedCreateWithoutProfilesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutProfilesInput
    upsert?: ChildUpsertWithoutProfilesInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutProfilesInput, ChildUpdateWithoutProfilesInput>, ChildUncheckedUpdateWithoutProfilesInput>
  }

  export type ActivityCreateNestedManyWithoutActivitySubtypeInput = {
    create?: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput> | ActivityCreateWithoutActivitySubtypeInput[] | ActivityUncheckedCreateWithoutActivitySubtypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivitySubtypeInput | ActivityCreateOrConnectWithoutActivitySubtypeInput[]
    createMany?: ActivityCreateManyActivitySubtypeInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityTypeCreateNestedOneWithoutSubtypesInput = {
    create?: XOR<ActivityTypeCreateWithoutSubtypesInput, ActivityTypeUncheckedCreateWithoutSubtypesInput>
    connectOrCreate?: ActivityTypeCreateOrConnectWithoutSubtypesInput
    connect?: ActivityTypeWhereUniqueInput
  }

  export type ActivityUncheckedCreateNestedManyWithoutActivitySubtypeInput = {
    create?: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput> | ActivityCreateWithoutActivitySubtypeInput[] | ActivityUncheckedCreateWithoutActivitySubtypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivitySubtypeInput | ActivityCreateOrConnectWithoutActivitySubtypeInput[]
    createMany?: ActivityCreateManyActivitySubtypeInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityUpdateManyWithoutActivitySubtypeNestedInput = {
    create?: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput> | ActivityCreateWithoutActivitySubtypeInput[] | ActivityUncheckedCreateWithoutActivitySubtypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivitySubtypeInput | ActivityCreateOrConnectWithoutActivitySubtypeInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutActivitySubtypeInput | ActivityUpsertWithWhereUniqueWithoutActivitySubtypeInput[]
    createMany?: ActivityCreateManyActivitySubtypeInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutActivitySubtypeInput | ActivityUpdateWithWhereUniqueWithoutActivitySubtypeInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutActivitySubtypeInput | ActivityUpdateManyWithWhereWithoutActivitySubtypeInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityTypeUpdateOneRequiredWithoutSubtypesNestedInput = {
    create?: XOR<ActivityTypeCreateWithoutSubtypesInput, ActivityTypeUncheckedCreateWithoutSubtypesInput>
    connectOrCreate?: ActivityTypeCreateOrConnectWithoutSubtypesInput
    upsert?: ActivityTypeUpsertWithoutSubtypesInput
    connect?: ActivityTypeWhereUniqueInput
    update?: XOR<XOR<ActivityTypeUpdateToOneWithWhereWithoutSubtypesInput, ActivityTypeUpdateWithoutSubtypesInput>, ActivityTypeUncheckedUpdateWithoutSubtypesInput>
  }

  export type ActivityUncheckedUpdateManyWithoutActivitySubtypeNestedInput = {
    create?: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput> | ActivityCreateWithoutActivitySubtypeInput[] | ActivityUncheckedCreateWithoutActivitySubtypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivitySubtypeInput | ActivityCreateOrConnectWithoutActivitySubtypeInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutActivitySubtypeInput | ActivityUpsertWithWhereUniqueWithoutActivitySubtypeInput[]
    createMany?: ActivityCreateManyActivitySubtypeInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutActivitySubtypeInput | ActivityUpdateWithWhereUniqueWithoutActivitySubtypeInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutActivitySubtypeInput | ActivityUpdateManyWithWhereWithoutActivitySubtypeInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput> | ActivityCreateWithoutActivityTypeInput[] | ActivityUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityTypeInput | ActivityCreateOrConnectWithoutActivityTypeInput[]
    createMany?: ActivityCreateManyActivityTypeInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivitySubtypeCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput> | ActivitySubtypeCreateWithoutActivityTypeInput[] | ActivitySubtypeUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivityTypeInput | ActivitySubtypeCreateOrConnectWithoutActivityTypeInput[]
    createMany?: ActivitySubtypeCreateManyActivityTypeInputEnvelope
    connect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput> | ActivityCreateWithoutActivityTypeInput[] | ActivityUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityTypeInput | ActivityCreateOrConnectWithoutActivityTypeInput[]
    createMany?: ActivityCreateManyActivityTypeInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivitySubtypeUncheckedCreateNestedManyWithoutActivityTypeInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput> | ActivitySubtypeCreateWithoutActivityTypeInput[] | ActivitySubtypeUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivityTypeInput | ActivitySubtypeCreateOrConnectWithoutActivityTypeInput[]
    createMany?: ActivitySubtypeCreateManyActivityTypeInputEnvelope
    connect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
  }

  export type ActivityUpdateManyWithoutActivityTypeNestedInput = {
    create?: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput> | ActivityCreateWithoutActivityTypeInput[] | ActivityUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityTypeInput | ActivityCreateOrConnectWithoutActivityTypeInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutActivityTypeInput | ActivityUpsertWithWhereUniqueWithoutActivityTypeInput[]
    createMany?: ActivityCreateManyActivityTypeInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutActivityTypeInput | ActivityUpdateWithWhereUniqueWithoutActivityTypeInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutActivityTypeInput | ActivityUpdateManyWithWhereWithoutActivityTypeInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivitySubtypeUpdateManyWithoutActivityTypeNestedInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput> | ActivitySubtypeCreateWithoutActivityTypeInput[] | ActivitySubtypeUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivityTypeInput | ActivitySubtypeCreateOrConnectWithoutActivityTypeInput[]
    upsert?: ActivitySubtypeUpsertWithWhereUniqueWithoutActivityTypeInput | ActivitySubtypeUpsertWithWhereUniqueWithoutActivityTypeInput[]
    createMany?: ActivitySubtypeCreateManyActivityTypeInputEnvelope
    set?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    disconnect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    delete?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    connect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    update?: ActivitySubtypeUpdateWithWhereUniqueWithoutActivityTypeInput | ActivitySubtypeUpdateWithWhereUniqueWithoutActivityTypeInput[]
    updateMany?: ActivitySubtypeUpdateManyWithWhereWithoutActivityTypeInput | ActivitySubtypeUpdateManyWithWhereWithoutActivityTypeInput[]
    deleteMany?: ActivitySubtypeScalarWhereInput | ActivitySubtypeScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutActivityTypeNestedInput = {
    create?: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput> | ActivityCreateWithoutActivityTypeInput[] | ActivityUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutActivityTypeInput | ActivityCreateOrConnectWithoutActivityTypeInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutActivityTypeInput | ActivityUpsertWithWhereUniqueWithoutActivityTypeInput[]
    createMany?: ActivityCreateManyActivityTypeInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutActivityTypeInput | ActivityUpdateWithWhereUniqueWithoutActivityTypeInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutActivityTypeInput | ActivityUpdateManyWithWhereWithoutActivityTypeInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivitySubtypeUncheckedUpdateManyWithoutActivityTypeNestedInput = {
    create?: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput> | ActivitySubtypeCreateWithoutActivityTypeInput[] | ActivitySubtypeUncheckedCreateWithoutActivityTypeInput[]
    connectOrCreate?: ActivitySubtypeCreateOrConnectWithoutActivityTypeInput | ActivitySubtypeCreateOrConnectWithoutActivityTypeInput[]
    upsert?: ActivitySubtypeUpsertWithWhereUniqueWithoutActivityTypeInput | ActivitySubtypeUpsertWithWhereUniqueWithoutActivityTypeInput[]
    createMany?: ActivitySubtypeCreateManyActivityTypeInputEnvelope
    set?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    disconnect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    delete?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    connect?: ActivitySubtypeWhereUniqueInput | ActivitySubtypeWhereUniqueInput[]
    update?: ActivitySubtypeUpdateWithWhereUniqueWithoutActivityTypeInput | ActivitySubtypeUpdateWithWhereUniqueWithoutActivityTypeInput[]
    updateMany?: ActivitySubtypeUpdateManyWithWhereWithoutActivityTypeInput | ActivitySubtypeUpdateManyWithWhereWithoutActivityTypeInput[]
    deleteMany?: ActivitySubtypeScalarWhereInput | ActivitySubtypeScalarWhereInput[]
  }

  export type ChildCreateinterestsInput = {
    set: string[]
  }

  export type ActivityShareProfileCreateNestedManyWithoutChildInput = {
    create?: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput> | ActivityShareProfileCreateWithoutChildInput[] | ActivityShareProfileUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutChildInput | ActivityShareProfileCreateOrConnectWithoutChildInput[]
    createMany?: ActivityShareProfileCreateManyChildInputEnvelope
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutChildrenInput = {
    create?: XOR<UserCreateWithoutChildrenInput, UserUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: UserCreateOrConnectWithoutChildrenInput
    connect?: UserWhereUniqueInput
  }

  export type ChildActivityCreateNestedManyWithoutChildInput = {
    create?: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput> | ChildActivityCreateWithoutChildInput[] | ChildActivityUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutChildInput | ChildActivityCreateOrConnectWithoutChildInput[]
    createMany?: ChildActivityCreateManyChildInputEnvelope
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
  }

  export type ActivityShareProfileUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput> | ActivityShareProfileCreateWithoutChildInput[] | ActivityShareProfileUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutChildInput | ActivityShareProfileCreateOrConnectWithoutChildInput[]
    createMany?: ActivityShareProfileCreateManyChildInputEnvelope
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
  }

  export type ChildActivityUncheckedCreateNestedManyWithoutChildInput = {
    create?: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput> | ChildActivityCreateWithoutChildInput[] | ChildActivityUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutChildInput | ChildActivityCreateOrConnectWithoutChildInput[]
    createMany?: ChildActivityCreateManyChildInputEnvelope
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
  }

  export type ChildUpdateinterestsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ActivityShareProfileUpdateManyWithoutChildNestedInput = {
    create?: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput> | ActivityShareProfileCreateWithoutChildInput[] | ActivityShareProfileUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutChildInput | ActivityShareProfileCreateOrConnectWithoutChildInput[]
    upsert?: ActivityShareProfileUpsertWithWhereUniqueWithoutChildInput | ActivityShareProfileUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ActivityShareProfileCreateManyChildInputEnvelope
    set?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    disconnect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    delete?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    update?: ActivityShareProfileUpdateWithWhereUniqueWithoutChildInput | ActivityShareProfileUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ActivityShareProfileUpdateManyWithWhereWithoutChildInput | ActivityShareProfileUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutChildrenNestedInput = {
    create?: XOR<UserCreateWithoutChildrenInput, UserUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: UserCreateOrConnectWithoutChildrenInput
    upsert?: UserUpsertWithoutChildrenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChildrenInput, UserUpdateWithoutChildrenInput>, UserUncheckedUpdateWithoutChildrenInput>
  }

  export type ChildActivityUpdateManyWithoutChildNestedInput = {
    create?: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput> | ChildActivityCreateWithoutChildInput[] | ChildActivityUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutChildInput | ChildActivityCreateOrConnectWithoutChildInput[]
    upsert?: ChildActivityUpsertWithWhereUniqueWithoutChildInput | ChildActivityUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ChildActivityCreateManyChildInputEnvelope
    set?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    disconnect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    delete?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    update?: ChildActivityUpdateWithWhereUniqueWithoutChildInput | ChildActivityUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ChildActivityUpdateManyWithWhereWithoutChildInput | ChildActivityUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
  }

  export type ActivityShareProfileUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput> | ActivityShareProfileCreateWithoutChildInput[] | ActivityShareProfileUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ActivityShareProfileCreateOrConnectWithoutChildInput | ActivityShareProfileCreateOrConnectWithoutChildInput[]
    upsert?: ActivityShareProfileUpsertWithWhereUniqueWithoutChildInput | ActivityShareProfileUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ActivityShareProfileCreateManyChildInputEnvelope
    set?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    disconnect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    delete?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    connect?: ActivityShareProfileWhereUniqueInput | ActivityShareProfileWhereUniqueInput[]
    update?: ActivityShareProfileUpdateWithWhereUniqueWithoutChildInput | ActivityShareProfileUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ActivityShareProfileUpdateManyWithWhereWithoutChildInput | ActivityShareProfileUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
  }

  export type ChildActivityUncheckedUpdateManyWithoutChildNestedInput = {
    create?: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput> | ChildActivityCreateWithoutChildInput[] | ChildActivityUncheckedCreateWithoutChildInput[]
    connectOrCreate?: ChildActivityCreateOrConnectWithoutChildInput | ChildActivityCreateOrConnectWithoutChildInput[]
    upsert?: ChildActivityUpsertWithWhereUniqueWithoutChildInput | ChildActivityUpsertWithWhereUniqueWithoutChildInput[]
    createMany?: ChildActivityCreateManyChildInputEnvelope
    set?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    disconnect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    delete?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    connect?: ChildActivityWhereUniqueInput | ChildActivityWhereUniqueInput[]
    update?: ChildActivityUpdateWithWhereUniqueWithoutChildInput | ChildActivityUpdateWithWhereUniqueWithoutChildInput[]
    updateMany?: ChildActivityUpdateManyWithWhereWithoutChildInput | ChildActivityUpdateManyWithWhereWithoutChildInput[]
    deleteMany?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
  }

  export type ActivityCreateNestedOneWithoutChildActivitiesInput = {
    create?: XOR<ActivityCreateWithoutChildActivitiesInput, ActivityUncheckedCreateWithoutChildActivitiesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutChildActivitiesInput
    connect?: ActivityWhereUniqueInput
  }

  export type ChildCreateNestedOneWithoutChildActivitiesInput = {
    create?: XOR<ChildCreateWithoutChildActivitiesInput, ChildUncheckedCreateWithoutChildActivitiesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutChildActivitiesInput
    connect?: ChildWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutChildActivitiesNestedInput = {
    create?: XOR<ActivityCreateWithoutChildActivitiesInput, ActivityUncheckedCreateWithoutChildActivitiesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutChildActivitiesInput
    upsert?: ActivityUpsertWithoutChildActivitiesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutChildActivitiesInput, ActivityUpdateWithoutChildActivitiesInput>, ActivityUncheckedUpdateWithoutChildActivitiesInput>
  }

  export type ChildUpdateOneRequiredWithoutChildActivitiesNestedInput = {
    create?: XOR<ChildCreateWithoutChildActivitiesInput, ChildUncheckedCreateWithoutChildActivitiesInput>
    connectOrCreate?: ChildCreateOrConnectWithoutChildActivitiesInput
    upsert?: ChildUpsertWithoutChildActivitiesInput
    connect?: ChildWhereUniqueInput
    update?: XOR<XOR<ChildUpdateToOneWithWhereWithoutChildActivitiesInput, ChildUpdateWithoutChildActivitiesInput>, ChildUncheckedUpdateWithoutChildActivitiesInput>
  }

  export type ActivityCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<ActivityCreateWithoutFavoritesInput, ActivityUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutFavoritesInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<ActivityCreateWithoutFavoritesInput, ActivityUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutFavoritesInput
    upsert?: ActivityUpsertWithoutFavoritesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutFavoritesInput, ActivityUpdateWithoutFavoritesInput>, ActivityUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutReceivedInvitationsInput = {
    create?: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentInvitationsInput = {
    create?: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutReceivedInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitationsInput
    upsert?: UserUpsertWithoutReceivedInvitationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedInvitationsInput, UserUpdateWithoutReceivedInvitationsInput>, UserUncheckedUpdateWithoutReceivedInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutSentInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitationsInput
    upsert?: UserUpsertWithoutSentInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentInvitationsInput, UserUpdateWithoutSentInvitationsInput>, UserUncheckedUpdateWithoutSentInvitationsInput>
  }

  export type LocationCreateNestedManyWithoutCityInput = {
    create?: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput> | LocationCreateWithoutCityInput[] | LocationUncheckedCreateWithoutCityInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCityInput | LocationCreateOrConnectWithoutCityInput[]
    createMany?: LocationCreateManyCityInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type LocationUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput> | LocationCreateWithoutCityInput[] | LocationUncheckedCreateWithoutCityInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCityInput | LocationCreateOrConnectWithoutCityInput[]
    createMany?: LocationCreateManyCityInputEnvelope
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
  }

  export type LocationUpdateManyWithoutCityNestedInput = {
    create?: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput> | LocationCreateWithoutCityInput[] | LocationUncheckedCreateWithoutCityInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCityInput | LocationCreateOrConnectWithoutCityInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutCityInput | LocationUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: LocationCreateManyCityInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutCityInput | LocationUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutCityInput | LocationUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type LocationUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput> | LocationCreateWithoutCityInput[] | LocationUncheckedCreateWithoutCityInput[]
    connectOrCreate?: LocationCreateOrConnectWithoutCityInput | LocationCreateOrConnectWithoutCityInput[]
    upsert?: LocationUpsertWithWhereUniqueWithoutCityInput | LocationUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: LocationCreateManyCityInputEnvelope
    set?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    disconnect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    delete?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    connect?: LocationWhereUniqueInput | LocationWhereUniqueInput[]
    update?: LocationUpdateWithWhereUniqueWithoutCityInput | LocationUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: LocationUpdateManyWithWhereWithoutCityInput | LocationUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: LocationScalarWhereInput | LocationScalarWhereInput[]
  }

  export type CityCreateNestedOneWithoutLocationsInput = {
    create?: XOR<CityCreateWithoutLocationsInput, CityUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: CityCreateOrConnectWithoutLocationsInput
    connect?: CityWhereUniqueInput
  }

  export type ActivityCreateNestedManyWithoutLocationInput = {
    create?: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput> | ActivityCreateWithoutLocationInput[] | ActivityUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutLocationInput | ActivityCreateOrConnectWithoutLocationInput[]
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput> | ActivityCreateWithoutLocationInput[] | ActivityUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutLocationInput | ActivityCreateOrConnectWithoutLocationInput[]
    createMany?: ActivityCreateManyLocationInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type CityUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<CityCreateWithoutLocationsInput, CityUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: CityCreateOrConnectWithoutLocationsInput
    upsert?: CityUpsertWithoutLocationsInput
    connect?: CityWhereUniqueInput
    update?: XOR<XOR<CityUpdateToOneWithWhereWithoutLocationsInput, CityUpdateWithoutLocationsInput>, CityUncheckedUpdateWithoutLocationsInput>
  }

  export type ActivityUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput> | ActivityCreateWithoutLocationInput[] | ActivityUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutLocationInput | ActivityCreateOrConnectWithoutLocationInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutLocationInput | ActivityUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ActivityCreateManyLocationInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutLocationInput | ActivityUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutLocationInput | ActivityUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput> | ActivityCreateWithoutLocationInput[] | ActivityUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutLocationInput | ActivityCreateOrConnectWithoutLocationInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutLocationInput | ActivityUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: ActivityCreateManyLocationInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutLocationInput | ActivityUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutLocationInput | ActivityUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityCreateNestedManyWithoutProviderInput = {
    create?: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput> | ActivityCreateWithoutProviderInput[] | ActivityUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutProviderInput | ActivityCreateOrConnectWithoutProviderInput[]
    createMany?: ActivityCreateManyProviderInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ProviderMetricsCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput> | ProviderMetricsCreateWithoutProviderInput[] | ProviderMetricsUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderMetricsCreateOrConnectWithoutProviderInput | ProviderMetricsCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderMetricsCreateManyProviderInputEnvelope
    connect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
  }

  export type ScrapeJobCreateNestedManyWithoutProviderInput = {
    create?: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput> | ScrapeJobCreateWithoutProviderInput[] | ScrapeJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScrapeJobCreateOrConnectWithoutProviderInput | ScrapeJobCreateOrConnectWithoutProviderInput[]
    createMany?: ScrapeJobCreateManyProviderInputEnvelope
    connect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
  }

  export type ScraperHealthCheckCreateNestedManyWithoutProviderInput = {
    create?: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput> | ScraperHealthCheckCreateWithoutProviderInput[] | ScraperHealthCheckUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScraperHealthCheckCreateOrConnectWithoutProviderInput | ScraperHealthCheckCreateOrConnectWithoutProviderInput[]
    createMany?: ScraperHealthCheckCreateManyProviderInputEnvelope
    connect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput> | ActivityCreateWithoutProviderInput[] | ActivityUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutProviderInput | ActivityCreateOrConnectWithoutProviderInput[]
    createMany?: ActivityCreateManyProviderInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ProviderMetricsUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput> | ProviderMetricsCreateWithoutProviderInput[] | ProviderMetricsUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderMetricsCreateOrConnectWithoutProviderInput | ProviderMetricsCreateOrConnectWithoutProviderInput[]
    createMany?: ProviderMetricsCreateManyProviderInputEnvelope
    connect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
  }

  export type ScrapeJobUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput> | ScrapeJobCreateWithoutProviderInput[] | ScrapeJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScrapeJobCreateOrConnectWithoutProviderInput | ScrapeJobCreateOrConnectWithoutProviderInput[]
    createMany?: ScrapeJobCreateManyProviderInputEnvelope
    connect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
  }

  export type ScraperHealthCheckUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput> | ScraperHealthCheckCreateWithoutProviderInput[] | ScraperHealthCheckUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScraperHealthCheckCreateOrConnectWithoutProviderInput | ScraperHealthCheckCreateOrConnectWithoutProviderInput[]
    createMany?: ScraperHealthCheckCreateManyProviderInputEnvelope
    connect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
  }

  export type ActivityUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput> | ActivityCreateWithoutProviderInput[] | ActivityUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutProviderInput | ActivityCreateOrConnectWithoutProviderInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutProviderInput | ActivityUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ActivityCreateManyProviderInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutProviderInput | ActivityUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutProviderInput | ActivityUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ProviderMetricsUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput> | ProviderMetricsCreateWithoutProviderInput[] | ProviderMetricsUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderMetricsCreateOrConnectWithoutProviderInput | ProviderMetricsCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderMetricsUpsertWithWhereUniqueWithoutProviderInput | ProviderMetricsUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderMetricsCreateManyProviderInputEnvelope
    set?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    disconnect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    delete?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    connect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    update?: ProviderMetricsUpdateWithWhereUniqueWithoutProviderInput | ProviderMetricsUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderMetricsUpdateManyWithWhereWithoutProviderInput | ProviderMetricsUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderMetricsScalarWhereInput | ProviderMetricsScalarWhereInput[]
  }

  export type ScrapeJobUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput> | ScrapeJobCreateWithoutProviderInput[] | ScrapeJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScrapeJobCreateOrConnectWithoutProviderInput | ScrapeJobCreateOrConnectWithoutProviderInput[]
    upsert?: ScrapeJobUpsertWithWhereUniqueWithoutProviderInput | ScrapeJobUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ScrapeJobCreateManyProviderInputEnvelope
    set?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    disconnect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    delete?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    connect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    update?: ScrapeJobUpdateWithWhereUniqueWithoutProviderInput | ScrapeJobUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ScrapeJobUpdateManyWithWhereWithoutProviderInput | ScrapeJobUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ScrapeJobScalarWhereInput | ScrapeJobScalarWhereInput[]
  }

  export type ScraperHealthCheckUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput> | ScraperHealthCheckCreateWithoutProviderInput[] | ScraperHealthCheckUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScraperHealthCheckCreateOrConnectWithoutProviderInput | ScraperHealthCheckCreateOrConnectWithoutProviderInput[]
    upsert?: ScraperHealthCheckUpsertWithWhereUniqueWithoutProviderInput | ScraperHealthCheckUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ScraperHealthCheckCreateManyProviderInputEnvelope
    set?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    disconnect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    delete?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    connect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    update?: ScraperHealthCheckUpdateWithWhereUniqueWithoutProviderInput | ScraperHealthCheckUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ScraperHealthCheckUpdateManyWithWhereWithoutProviderInput | ScraperHealthCheckUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ScraperHealthCheckScalarWhereInput | ScraperHealthCheckScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput> | ActivityCreateWithoutProviderInput[] | ActivityUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutProviderInput | ActivityCreateOrConnectWithoutProviderInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutProviderInput | ActivityUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ActivityCreateManyProviderInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutProviderInput | ActivityUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutProviderInput | ActivityUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ProviderMetricsUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput> | ProviderMetricsCreateWithoutProviderInput[] | ProviderMetricsUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ProviderMetricsCreateOrConnectWithoutProviderInput | ProviderMetricsCreateOrConnectWithoutProviderInput[]
    upsert?: ProviderMetricsUpsertWithWhereUniqueWithoutProviderInput | ProviderMetricsUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ProviderMetricsCreateManyProviderInputEnvelope
    set?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    disconnect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    delete?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    connect?: ProviderMetricsWhereUniqueInput | ProviderMetricsWhereUniqueInput[]
    update?: ProviderMetricsUpdateWithWhereUniqueWithoutProviderInput | ProviderMetricsUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ProviderMetricsUpdateManyWithWhereWithoutProviderInput | ProviderMetricsUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ProviderMetricsScalarWhereInput | ProviderMetricsScalarWhereInput[]
  }

  export type ScrapeJobUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput> | ScrapeJobCreateWithoutProviderInput[] | ScrapeJobUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScrapeJobCreateOrConnectWithoutProviderInput | ScrapeJobCreateOrConnectWithoutProviderInput[]
    upsert?: ScrapeJobUpsertWithWhereUniqueWithoutProviderInput | ScrapeJobUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ScrapeJobCreateManyProviderInputEnvelope
    set?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    disconnect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    delete?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    connect?: ScrapeJobWhereUniqueInput | ScrapeJobWhereUniqueInput[]
    update?: ScrapeJobUpdateWithWhereUniqueWithoutProviderInput | ScrapeJobUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ScrapeJobUpdateManyWithWhereWithoutProviderInput | ScrapeJobUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ScrapeJobScalarWhereInput | ScrapeJobScalarWhereInput[]
  }

  export type ScraperHealthCheckUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput> | ScraperHealthCheckCreateWithoutProviderInput[] | ScraperHealthCheckUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ScraperHealthCheckCreateOrConnectWithoutProviderInput | ScraperHealthCheckCreateOrConnectWithoutProviderInput[]
    upsert?: ScraperHealthCheckUpsertWithWhereUniqueWithoutProviderInput | ScraperHealthCheckUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ScraperHealthCheckCreateManyProviderInputEnvelope
    set?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    disconnect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    delete?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    connect?: ScraperHealthCheckWhereUniqueInput | ScraperHealthCheckWhereUniqueInput[]
    update?: ScraperHealthCheckUpdateWithWhereUniqueWithoutProviderInput | ScraperHealthCheckUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ScraperHealthCheckUpdateManyWithWhereWithoutProviderInput | ScraperHealthCheckUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ScraperHealthCheckScalarWhereInput | ScraperHealthCheckScalarWhereInput[]
  }

  export type ProviderCreateNestedOneWithoutProviderMetricsInput = {
    create?: XOR<ProviderCreateWithoutProviderMetricsInput, ProviderUncheckedCreateWithoutProviderMetricsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutProviderMetricsInput
    connect?: ProviderWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ProviderUpdateOneRequiredWithoutProviderMetricsNestedInput = {
    create?: XOR<ProviderCreateWithoutProviderMetricsInput, ProviderUncheckedCreateWithoutProviderMetricsInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutProviderMetricsInput
    upsert?: ProviderUpsertWithoutProviderMetricsInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutProviderMetricsInput, ProviderUpdateWithoutProviderMetricsInput>, ProviderUncheckedUpdateWithoutProviderMetricsInput>
  }

  export type ProviderCreateNestedOneWithoutScrapeJobInput = {
    create?: XOR<ProviderCreateWithoutScrapeJobInput, ProviderUncheckedCreateWithoutScrapeJobInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutScrapeJobInput
    connect?: ProviderWhereUniqueInput
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type ProviderUpdateOneRequiredWithoutScrapeJobNestedInput = {
    create?: XOR<ProviderCreateWithoutScrapeJobInput, ProviderUncheckedCreateWithoutScrapeJobInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutScrapeJobInput
    upsert?: ProviderUpsertWithoutScrapeJobInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutScrapeJobInput, ProviderUpdateWithoutScrapeJobInput>, ProviderUncheckedUpdateWithoutScrapeJobInput>
  }

  export type ProviderCreateNestedOneWithoutScraperHealthCheckInput = {
    create?: XOR<ProviderCreateWithoutScraperHealthCheckInput, ProviderUncheckedCreateWithoutScraperHealthCheckInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutScraperHealthCheckInput
    connect?: ProviderWhereUniqueInput
  }

  export type ProviderUpdateOneRequiredWithoutScraperHealthCheckNestedInput = {
    create?: XOR<ProviderCreateWithoutScraperHealthCheckInput, ProviderUncheckedCreateWithoutScraperHealthCheckInput>
    connectOrCreate?: ProviderCreateOrConnectWithoutScraperHealthCheckInput
    upsert?: ProviderUpsertWithoutScraperHealthCheckInput
    connect?: ProviderWhereUniqueInput
    update?: XOR<XOR<ProviderUpdateToOneWithWhereWithoutScraperHealthCheckInput, ProviderUpdateWithoutScraperHealthCheckInput>, ProviderUncheckedUpdateWithoutScraperHealthCheckInput>
  }

  export type ActivityShareCreateNestedManyWithoutSharedWithUserInput = {
    create?: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput> | ActivityShareCreateWithoutSharedWithUserInput[] | ActivityShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharedWithUserInput | ActivityShareCreateOrConnectWithoutSharedWithUserInput[]
    createMany?: ActivityShareCreateManySharedWithUserInputEnvelope
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
  }

  export type ActivityShareCreateNestedManyWithoutSharingUserInput = {
    create?: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput> | ActivityShareCreateWithoutSharingUserInput[] | ActivityShareUncheckedCreateWithoutSharingUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharingUserInput | ActivityShareCreateOrConnectWithoutSharingUserInput[]
    createMany?: ActivityShareCreateManySharingUserInputEnvelope
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
  }

  export type ChildCreateNestedManyWithoutUserInput = {
    create?: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput> | ChildCreateWithoutUserInput[] | ChildUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutUserInput | ChildCreateOrConnectWithoutUserInput[]
    createMany?: ChildCreateManyUserInputEnvelope
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutRecipientInput = {
    create?: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput> | InvitationCreateWithoutRecipientInput[] | InvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutRecipientInput | InvitationCreateOrConnectWithoutRecipientInput[]
    createMany?: InvitationCreateManyRecipientInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type InvitationCreateNestedManyWithoutSenderInput = {
    create?: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput> | InvitationCreateWithoutSenderInput[] | InvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutSenderInput | InvitationCreateOrConnectWithoutSenderInput[]
    createMany?: InvitationCreateManySenderInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput = {
    create?: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput> | ActivityShareCreateWithoutSharedWithUserInput[] | ActivityShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharedWithUserInput | ActivityShareCreateOrConnectWithoutSharedWithUserInput[]
    createMany?: ActivityShareCreateManySharedWithUserInputEnvelope
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
  }

  export type ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput = {
    create?: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput> | ActivityShareCreateWithoutSharingUserInput[] | ActivityShareUncheckedCreateWithoutSharingUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharingUserInput | ActivityShareCreateOrConnectWithoutSharingUserInput[]
    createMany?: ActivityShareCreateManySharingUserInputEnvelope
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
  }

  export type ChildUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput> | ChildCreateWithoutUserInput[] | ChildUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutUserInput | ChildCreateOrConnectWithoutUserInput[]
    createMany?: ChildCreateManyUserInputEnvelope
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput> | InvitationCreateWithoutRecipientInput[] | InvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutRecipientInput | InvitationCreateOrConnectWithoutRecipientInput[]
    createMany?: InvitationCreateManyRecipientInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type InvitationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput> | InvitationCreateWithoutSenderInput[] | InvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutSenderInput | InvitationCreateOrConnectWithoutSenderInput[]
    createMany?: InvitationCreateManySenderInputEnvelope
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
  }

  export type ActivityShareUpdateManyWithoutSharedWithUserNestedInput = {
    create?: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput> | ActivityShareCreateWithoutSharedWithUserInput[] | ActivityShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharedWithUserInput | ActivityShareCreateOrConnectWithoutSharedWithUserInput[]
    upsert?: ActivityShareUpsertWithWhereUniqueWithoutSharedWithUserInput | ActivityShareUpsertWithWhereUniqueWithoutSharedWithUserInput[]
    createMany?: ActivityShareCreateManySharedWithUserInputEnvelope
    set?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    disconnect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    delete?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    update?: ActivityShareUpdateWithWhereUniqueWithoutSharedWithUserInput | ActivityShareUpdateWithWhereUniqueWithoutSharedWithUserInput[]
    updateMany?: ActivityShareUpdateManyWithWhereWithoutSharedWithUserInput | ActivityShareUpdateManyWithWhereWithoutSharedWithUserInput[]
    deleteMany?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
  }

  export type ActivityShareUpdateManyWithoutSharingUserNestedInput = {
    create?: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput> | ActivityShareCreateWithoutSharingUserInput[] | ActivityShareUncheckedCreateWithoutSharingUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharingUserInput | ActivityShareCreateOrConnectWithoutSharingUserInput[]
    upsert?: ActivityShareUpsertWithWhereUniqueWithoutSharingUserInput | ActivityShareUpsertWithWhereUniqueWithoutSharingUserInput[]
    createMany?: ActivityShareCreateManySharingUserInputEnvelope
    set?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    disconnect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    delete?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    update?: ActivityShareUpdateWithWhereUniqueWithoutSharingUserInput | ActivityShareUpdateWithWhereUniqueWithoutSharingUserInput[]
    updateMany?: ActivityShareUpdateManyWithWhereWithoutSharingUserInput | ActivityShareUpdateManyWithWhereWithoutSharingUserInput[]
    deleteMany?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
  }

  export type ChildUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput> | ChildCreateWithoutUserInput[] | ChildUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutUserInput | ChildCreateOrConnectWithoutUserInput[]
    upsert?: ChildUpsertWithWhereUniqueWithoutUserInput | ChildUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChildCreateManyUserInputEnvelope
    set?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    disconnect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    delete?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    update?: ChildUpdateWithWhereUniqueWithoutUserInput | ChildUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChildUpdateManyWithWhereWithoutUserInput | ChildUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChildScalarWhereInput | ChildScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput> | InvitationCreateWithoutRecipientInput[] | InvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutRecipientInput | InvitationCreateOrConnectWithoutRecipientInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutRecipientInput | InvitationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: InvitationCreateManyRecipientInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutRecipientInput | InvitationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutRecipientInput | InvitationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type InvitationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput> | InvitationCreateWithoutSenderInput[] | InvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutSenderInput | InvitationCreateOrConnectWithoutSenderInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutSenderInput | InvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InvitationCreateManySenderInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutSenderInput | InvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutSenderInput | InvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput = {
    create?: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput> | ActivityShareCreateWithoutSharedWithUserInput[] | ActivityShareUncheckedCreateWithoutSharedWithUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharedWithUserInput | ActivityShareCreateOrConnectWithoutSharedWithUserInput[]
    upsert?: ActivityShareUpsertWithWhereUniqueWithoutSharedWithUserInput | ActivityShareUpsertWithWhereUniqueWithoutSharedWithUserInput[]
    createMany?: ActivityShareCreateManySharedWithUserInputEnvelope
    set?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    disconnect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    delete?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    update?: ActivityShareUpdateWithWhereUniqueWithoutSharedWithUserInput | ActivityShareUpdateWithWhereUniqueWithoutSharedWithUserInput[]
    updateMany?: ActivityShareUpdateManyWithWhereWithoutSharedWithUserInput | ActivityShareUpdateManyWithWhereWithoutSharedWithUserInput[]
    deleteMany?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
  }

  export type ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput = {
    create?: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput> | ActivityShareCreateWithoutSharingUserInput[] | ActivityShareUncheckedCreateWithoutSharingUserInput[]
    connectOrCreate?: ActivityShareCreateOrConnectWithoutSharingUserInput | ActivityShareCreateOrConnectWithoutSharingUserInput[]
    upsert?: ActivityShareUpsertWithWhereUniqueWithoutSharingUserInput | ActivityShareUpsertWithWhereUniqueWithoutSharingUserInput[]
    createMany?: ActivityShareCreateManySharingUserInputEnvelope
    set?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    disconnect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    delete?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    connect?: ActivityShareWhereUniqueInput | ActivityShareWhereUniqueInput[]
    update?: ActivityShareUpdateWithWhereUniqueWithoutSharingUserInput | ActivityShareUpdateWithWhereUniqueWithoutSharingUserInput[]
    updateMany?: ActivityShareUpdateManyWithWhereWithoutSharingUserInput | ActivityShareUpdateManyWithWhereWithoutSharingUserInput[]
    deleteMany?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
  }

  export type ChildUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput> | ChildCreateWithoutUserInput[] | ChildUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChildCreateOrConnectWithoutUserInput | ChildCreateOrConnectWithoutUserInput[]
    upsert?: ChildUpsertWithWhereUniqueWithoutUserInput | ChildUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChildCreateManyUserInputEnvelope
    set?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    disconnect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    delete?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    connect?: ChildWhereUniqueInput | ChildWhereUniqueInput[]
    update?: ChildUpdateWithWhereUniqueWithoutUserInput | ChildUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChildUpdateManyWithWhereWithoutUserInput | ChildUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChildScalarWhereInput | ChildScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput> | InvitationCreateWithoutRecipientInput[] | InvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutRecipientInput | InvitationCreateOrConnectWithoutRecipientInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutRecipientInput | InvitationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: InvitationCreateManyRecipientInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutRecipientInput | InvitationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutRecipientInput | InvitationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type InvitationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput> | InvitationCreateWithoutSenderInput[] | InvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: InvitationCreateOrConnectWithoutSenderInput | InvitationCreateOrConnectWithoutSenderInput[]
    upsert?: InvitationUpsertWithWhereUniqueWithoutSenderInput | InvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: InvitationCreateManySenderInputEnvelope
    set?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    disconnect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    delete?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    connect?: InvitationWhereUniqueInput | InvitationWhereUniqueInput[]
    update?: InvitationUpdateWithWhereUniqueWithoutSenderInput | InvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: InvitationUpdateManyWithWhereWithoutSenderInput | InvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
  }

  export type ActivityCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput> | ActivityCategoryCreateWithoutCategoryInput[] | ActivityCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutCategoryInput | ActivityCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ActivityCategoryCreateManyCategoryInputEnvelope
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
  }

  export type ActivityCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput> | ActivityCategoryCreateWithoutCategoryInput[] | ActivityCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutCategoryInput | ActivityCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: ActivityCategoryCreateManyCategoryInputEnvelope
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
  }

  export type ActivityCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput> | ActivityCategoryCreateWithoutCategoryInput[] | ActivityCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutCategoryInput | ActivityCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ActivityCategoryUpsertWithWhereUniqueWithoutCategoryInput | ActivityCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ActivityCategoryCreateManyCategoryInputEnvelope
    set?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    disconnect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    delete?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    update?: ActivityCategoryUpdateWithWhereUniqueWithoutCategoryInput | ActivityCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ActivityCategoryUpdateManyWithWhereWithoutCategoryInput | ActivityCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
  }

  export type ActivityCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput> | ActivityCategoryCreateWithoutCategoryInput[] | ActivityCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ActivityCategoryCreateOrConnectWithoutCategoryInput | ActivityCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: ActivityCategoryUpsertWithWhereUniqueWithoutCategoryInput | ActivityCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ActivityCategoryCreateManyCategoryInputEnvelope
    set?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    disconnect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    delete?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    connect?: ActivityCategoryWhereUniqueInput | ActivityCategoryWhereUniqueInput[]
    update?: ActivityCategoryUpdateWithWhereUniqueWithoutCategoryInput | ActivityCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ActivityCategoryUpdateManyWithWhereWithoutCategoryInput | ActivityCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
  }

  export type ActivityCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<ActivityCreateWithoutCategoriesInput, ActivityUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCategoriesInput
    connect?: ActivityWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<CategoryCreateWithoutActivitiesInput, CategoryUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutActivitiesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<ActivityCreateWithoutCategoriesInput, ActivityUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutCategoriesInput
    upsert?: ActivityUpsertWithoutCategoriesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutCategoriesInput, ActivityUpdateWithoutCategoriesInput>, ActivityUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<CategoryCreateWithoutActivitiesInput, CategoryUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutActivitiesInput
    upsert?: CategoryUpsertWithoutActivitiesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutActivitiesInput, CategoryUpdateWithoutActivitiesInput>, CategoryUncheckedUpdateWithoutActivitiesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type ActivitySubtypeCreateWithoutActivitiesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
    activityType: ActivityTypeCreateNestedOneWithoutSubtypesInput
  }

  export type ActivitySubtypeUncheckedCreateWithoutActivitiesInput = {
    id?: string
    activityTypeId: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
  }

  export type ActivitySubtypeCreateOrConnectWithoutActivitiesInput = {
    where: ActivitySubtypeWhereUniqueInput
    create: XOR<ActivitySubtypeCreateWithoutActivitiesInput, ActivitySubtypeUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityTypeCreateWithoutActivitiesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtypes?: ActivitySubtypeCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeUncheckedCreateWithoutActivitiesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subtypes?: ActivitySubtypeUncheckedCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeCreateOrConnectWithoutActivitiesInput = {
    where: ActivityTypeWhereUniqueInput
    create: XOR<ActivityTypeCreateWithoutActivitiesInput, ActivityTypeUncheckedCreateWithoutActivitiesInput>
  }

  export type LocationCreateWithoutActivitiesInput = {
    id?: string
    name: string
    address?: string | null
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    city: CityCreateNestedOneWithoutLocationsInput
  }

  export type LocationUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    address?: string | null
    cityId: string
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateOrConnectWithoutActivitiesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutActivitiesInput, LocationUncheckedCreateWithoutActivitiesInput>
  }

  export type ProviderCreateWithoutActivitiesInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    ProviderMetrics?: ProviderMetricsCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    ProviderMetrics?: ProviderMetricsUncheckedCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobUncheckedCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutActivitiesInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutActivitiesInput, ProviderUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityPrerequisiteCreateWithoutActivityInput = {
    id?: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityPrerequisiteUncheckedCreateWithoutActivityInput = {
    id?: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityPrerequisiteCreateOrConnectWithoutActivityInput = {
    where: ActivityPrerequisiteWhereUniqueInput
    create: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput>
  }

  export type ActivityPrerequisiteCreateManyActivityInputEnvelope = {
    data: ActivityPrerequisiteCreateManyActivityInput | ActivityPrerequisiteCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivitySessionCreateWithoutActivityInput = {
    id?: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivitySessionUncheckedCreateWithoutActivityInput = {
    id?: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivitySessionCreateOrConnectWithoutActivityInput = {
    where: ActivitySessionWhereUniqueInput
    create: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput>
  }

  export type ActivitySessionCreateManyActivityInputEnvelope = {
    data: ActivitySessionCreateManyActivityInput | ActivitySessionCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ChildActivityCreateWithoutActivityInput = {
    id?: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    child: ChildCreateNestedOneWithoutChildActivitiesInput
  }

  export type ChildActivityUncheckedCreateWithoutActivityInput = {
    id?: string
    childId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildActivityCreateOrConnectWithoutActivityInput = {
    where: ChildActivityWhereUniqueInput
    create: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput>
  }

  export type ChildActivityCreateManyActivityInputEnvelope = {
    data: ChildActivityCreateManyActivityInput | ChildActivityCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    notifyOnChange?: boolean
    user: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateWithoutActivityInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type FavoriteCreateOrConnectWithoutActivityInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput>
  }

  export type FavoriteCreateManyActivityInputEnvelope = {
    data: FavoriteCreateManyActivityInput | FavoriteCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCategoryCreateWithoutActivityInput = {
    id?: string
    createdAt?: Date | string
    category: CategoryCreateNestedOneWithoutActivitiesInput
  }

  export type ActivityCategoryUncheckedCreateWithoutActivityInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ActivityCategoryCreateOrConnectWithoutActivityInput = {
    where: ActivityCategoryWhereUniqueInput
    create: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput>
  }

  export type ActivityCategoryCreateManyActivityInputEnvelope = {
    data: ActivityCategoryCreateManyActivityInput | ActivityCategoryCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivitySubtypeUpsertWithoutActivitiesInput = {
    update: XOR<ActivitySubtypeUpdateWithoutActivitiesInput, ActivitySubtypeUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ActivitySubtypeCreateWithoutActivitiesInput, ActivitySubtypeUncheckedCreateWithoutActivitiesInput>
    where?: ActivitySubtypeWhereInput
  }

  export type ActivitySubtypeUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ActivitySubtypeWhereInput
    data: XOR<ActivitySubtypeUpdateWithoutActivitiesInput, ActivitySubtypeUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivitySubtypeUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    activityType?: ActivityTypeUpdateOneRequiredWithoutSubtypesNestedInput
  }

  export type ActivitySubtypeUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityTypeId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityTypeUpsertWithoutActivitiesInput = {
    update: XOR<ActivityTypeUpdateWithoutActivitiesInput, ActivityTypeUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ActivityTypeCreateWithoutActivitiesInput, ActivityTypeUncheckedCreateWithoutActivitiesInput>
    where?: ActivityTypeWhereInput
  }

  export type ActivityTypeUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ActivityTypeWhereInput
    data: XOR<ActivityTypeUpdateWithoutActivitiesInput, ActivityTypeUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityTypeUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtypes?: ActivitySubtypeUpdateManyWithoutActivityTypeNestedInput
  }

  export type ActivityTypeUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtypes?: ActivitySubtypeUncheckedUpdateManyWithoutActivityTypeNestedInput
  }

  export type LocationUpsertWithoutActivitiesInput = {
    update: XOR<LocationUpdateWithoutActivitiesInput, LocationUncheckedUpdateWithoutActivitiesInput>
    create: XOR<LocationCreateWithoutActivitiesInput, LocationUncheckedCreateWithoutActivitiesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutActivitiesInput, LocationUncheckedUpdateWithoutActivitiesInput>
  }

  export type LocationUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: CityUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type LocationUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    cityId?: StringFieldUpdateOperationsInput | string
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderUpsertWithoutActivitiesInput = {
    update: XOR<ProviderUpdateWithoutActivitiesInput, ProviderUncheckedUpdateWithoutActivitiesInput>
    create: XOR<ProviderCreateWithoutActivitiesInput, ProviderUncheckedCreateWithoutActivitiesInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutActivitiesInput, ProviderUncheckedUpdateWithoutActivitiesInput>
  }

  export type ProviderUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ProviderMetrics?: ProviderMetricsUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    ProviderMetrics?: ProviderMetricsUncheckedUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUncheckedUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ActivityPrerequisiteUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityPrerequisiteWhereUniqueInput
    update: XOR<ActivityPrerequisiteUpdateWithoutActivityInput, ActivityPrerequisiteUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityPrerequisiteCreateWithoutActivityInput, ActivityPrerequisiteUncheckedCreateWithoutActivityInput>
  }

  export type ActivityPrerequisiteUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityPrerequisiteWhereUniqueInput
    data: XOR<ActivityPrerequisiteUpdateWithoutActivityInput, ActivityPrerequisiteUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityPrerequisiteUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityPrerequisiteScalarWhereInput
    data: XOR<ActivityPrerequisiteUpdateManyMutationInput, ActivityPrerequisiteUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityPrerequisiteScalarWhereInput = {
    AND?: ActivityPrerequisiteScalarWhereInput | ActivityPrerequisiteScalarWhereInput[]
    OR?: ActivityPrerequisiteScalarWhereInput[]
    NOT?: ActivityPrerequisiteScalarWhereInput | ActivityPrerequisiteScalarWhereInput[]
    id?: StringFilter<"ActivityPrerequisite"> | string
    activityId?: StringFilter<"ActivityPrerequisite"> | string
    name?: StringFilter<"ActivityPrerequisite"> | string
    description?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    url?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    courseId?: StringNullableFilter<"ActivityPrerequisite"> | string | null
    isRequired?: BoolFilter<"ActivityPrerequisite"> | boolean
    createdAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityPrerequisite"> | Date | string
  }

  export type ActivitySessionUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivitySessionWhereUniqueInput
    update: XOR<ActivitySessionUpdateWithoutActivityInput, ActivitySessionUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivitySessionCreateWithoutActivityInput, ActivitySessionUncheckedCreateWithoutActivityInput>
  }

  export type ActivitySessionUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivitySessionWhereUniqueInput
    data: XOR<ActivitySessionUpdateWithoutActivityInput, ActivitySessionUncheckedUpdateWithoutActivityInput>
  }

  export type ActivitySessionUpdateManyWithWhereWithoutActivityInput = {
    where: ActivitySessionScalarWhereInput
    data: XOR<ActivitySessionUpdateManyMutationInput, ActivitySessionUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivitySessionScalarWhereInput = {
    AND?: ActivitySessionScalarWhereInput | ActivitySessionScalarWhereInput[]
    OR?: ActivitySessionScalarWhereInput[]
    NOT?: ActivitySessionScalarWhereInput | ActivitySessionScalarWhereInput[]
    id?: StringFilter<"ActivitySession"> | string
    activityId?: StringFilter<"ActivitySession"> | string
    sessionNumber?: IntNullableFilter<"ActivitySession"> | number | null
    date?: StringNullableFilter<"ActivitySession"> | string | null
    dayOfWeek?: StringNullableFilter<"ActivitySession"> | string | null
    startTime?: StringNullableFilter<"ActivitySession"> | string | null
    endTime?: StringNullableFilter<"ActivitySession"> | string | null
    location?: StringNullableFilter<"ActivitySession"> | string | null
    subLocation?: StringNullableFilter<"ActivitySession"> | string | null
    instructor?: StringNullableFilter<"ActivitySession"> | string | null
    notes?: StringNullableFilter<"ActivitySession"> | string | null
    createdAt?: DateTimeFilter<"ActivitySession"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySession"> | Date | string
  }

  export type ChildActivityUpsertWithWhereUniqueWithoutActivityInput = {
    where: ChildActivityWhereUniqueInput
    update: XOR<ChildActivityUpdateWithoutActivityInput, ChildActivityUncheckedUpdateWithoutActivityInput>
    create: XOR<ChildActivityCreateWithoutActivityInput, ChildActivityUncheckedCreateWithoutActivityInput>
  }

  export type ChildActivityUpdateWithWhereUniqueWithoutActivityInput = {
    where: ChildActivityWhereUniqueInput
    data: XOR<ChildActivityUpdateWithoutActivityInput, ChildActivityUncheckedUpdateWithoutActivityInput>
  }

  export type ChildActivityUpdateManyWithWhereWithoutActivityInput = {
    where: ChildActivityScalarWhereInput
    data: XOR<ChildActivityUpdateManyMutationInput, ChildActivityUncheckedUpdateManyWithoutActivityInput>
  }

  export type ChildActivityScalarWhereInput = {
    AND?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
    OR?: ChildActivityScalarWhereInput[]
    NOT?: ChildActivityScalarWhereInput | ChildActivityScalarWhereInput[]
    id?: StringFilter<"ChildActivity"> | string
    childId?: StringFilter<"ChildActivity"> | string
    activityId?: StringFilter<"ChildActivity"> | string
    status?: StringFilter<"ChildActivity"> | string
    registeredAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ChildActivity"> | Date | string | null
    notes?: StringNullableFilter<"ChildActivity"> | string | null
    rating?: IntNullableFilter<"ChildActivity"> | number | null
    createdAt?: DateTimeFilter<"ChildActivity"> | Date | string
    updatedAt?: DateTimeFilter<"ChildActivity"> | Date | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutActivityInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutActivityInput, FavoriteUncheckedUpdateWithoutActivityInput>
    create: XOR<FavoriteCreateWithoutActivityInput, FavoriteUncheckedCreateWithoutActivityInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutActivityInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutActivityInput, FavoriteUncheckedUpdateWithoutActivityInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutActivityInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutActivityInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    id?: StringFilter<"Favorite"> | string
    userId?: StringFilter<"Favorite"> | string
    activityId?: StringFilter<"Favorite"> | string
    createdAt?: DateTimeFilter<"Favorite"> | Date | string
    notifyOnChange?: BoolFilter<"Favorite"> | boolean
  }

  export type ActivityCategoryUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityCategoryWhereUniqueInput
    update: XOR<ActivityCategoryUpdateWithoutActivityInput, ActivityCategoryUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityCategoryCreateWithoutActivityInput, ActivityCategoryUncheckedCreateWithoutActivityInput>
  }

  export type ActivityCategoryUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityCategoryWhereUniqueInput
    data: XOR<ActivityCategoryUpdateWithoutActivityInput, ActivityCategoryUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityCategoryUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityCategoryScalarWhereInput
    data: XOR<ActivityCategoryUpdateManyMutationInput, ActivityCategoryUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityCategoryScalarWhereInput = {
    AND?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
    OR?: ActivityCategoryScalarWhereInput[]
    NOT?: ActivityCategoryScalarWhereInput | ActivityCategoryScalarWhereInput[]
    id?: StringFilter<"ActivityCategory"> | string
    activityId?: StringFilter<"ActivityCategory"> | string
    categoryId?: StringFilter<"ActivityCategory"> | string
    createdAt?: DateTimeFilter<"ActivityCategory"> | Date | string
  }

  export type ActivityCreateWithoutPrerequisitesListInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutPrerequisitesListInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutPrerequisitesListInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutPrerequisitesListInput, ActivityUncheckedCreateWithoutPrerequisitesListInput>
  }

  export type ActivityUpsertWithoutPrerequisitesListInput = {
    update: XOR<ActivityUpdateWithoutPrerequisitesListInput, ActivityUncheckedUpdateWithoutPrerequisitesListInput>
    create: XOR<ActivityCreateWithoutPrerequisitesListInput, ActivityUncheckedCreateWithoutPrerequisitesListInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutPrerequisitesListInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutPrerequisitesListInput, ActivityUncheckedUpdateWithoutPrerequisitesListInput>
  }

  export type ActivityUpdateWithoutPrerequisitesListInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutPrerequisitesListInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateWithoutSessionsInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutSessionsInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutSessionsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutSessionsInput, ActivityUncheckedCreateWithoutSessionsInput>
  }

  export type ActivityUpsertWithoutSessionsInput = {
    update: XOR<ActivityUpdateWithoutSessionsInput, ActivityUncheckedUpdateWithoutSessionsInput>
    create: XOR<ActivityCreateWithoutSessionsInput, ActivityUncheckedCreateWithoutSessionsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutSessionsInput, ActivityUncheckedUpdateWithoutSessionsInput>
  }

  export type ActivityUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserCreateWithoutSharedWithMeInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutSharedWithMeInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutSharedWithMeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharedWithMeInput, UserUncheckedCreateWithoutSharedWithMeInput>
  }

  export type UserCreateWithoutMySharesInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutMySharesInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutMySharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMySharesInput, UserUncheckedCreateWithoutMySharesInput>
  }

  export type ActivityShareProfileCreateWithoutActivityShareInput = {
    id?: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
    child: ChildCreateNestedOneWithoutProfilesInput
  }

  export type ActivityShareProfileUncheckedCreateWithoutActivityShareInput = {
    id?: string
    childId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ActivityShareProfileCreateOrConnectWithoutActivityShareInput = {
    where: ActivityShareProfileWhereUniqueInput
    create: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput>
  }

  export type ActivityShareProfileCreateManyActivityShareInputEnvelope = {
    data: ActivityShareProfileCreateManyActivityShareInput | ActivityShareProfileCreateManyActivityShareInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSharedWithMeInput = {
    update: XOR<UserUpdateWithoutSharedWithMeInput, UserUncheckedUpdateWithoutSharedWithMeInput>
    create: XOR<UserCreateWithoutSharedWithMeInput, UserUncheckedCreateWithoutSharedWithMeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSharedWithMeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSharedWithMeInput, UserUncheckedUpdateWithoutSharedWithMeInput>
  }

  export type UserUpdateWithoutSharedWithMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutSharedWithMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserUpsertWithoutMySharesInput = {
    update: XOR<UserUpdateWithoutMySharesInput, UserUncheckedUpdateWithoutMySharesInput>
    create: XOR<UserCreateWithoutMySharesInput, UserUncheckedCreateWithoutMySharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMySharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMySharesInput, UserUncheckedUpdateWithoutMySharesInput>
  }

  export type UserUpdateWithoutMySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutMySharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type ActivityShareProfileUpsertWithWhereUniqueWithoutActivityShareInput = {
    where: ActivityShareProfileWhereUniqueInput
    update: XOR<ActivityShareProfileUpdateWithoutActivityShareInput, ActivityShareProfileUncheckedUpdateWithoutActivityShareInput>
    create: XOR<ActivityShareProfileCreateWithoutActivityShareInput, ActivityShareProfileUncheckedCreateWithoutActivityShareInput>
  }

  export type ActivityShareProfileUpdateWithWhereUniqueWithoutActivityShareInput = {
    where: ActivityShareProfileWhereUniqueInput
    data: XOR<ActivityShareProfileUpdateWithoutActivityShareInput, ActivityShareProfileUncheckedUpdateWithoutActivityShareInput>
  }

  export type ActivityShareProfileUpdateManyWithWhereWithoutActivityShareInput = {
    where: ActivityShareProfileScalarWhereInput
    data: XOR<ActivityShareProfileUpdateManyMutationInput, ActivityShareProfileUncheckedUpdateManyWithoutActivityShareInput>
  }

  export type ActivityShareProfileScalarWhereInput = {
    AND?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
    OR?: ActivityShareProfileScalarWhereInput[]
    NOT?: ActivityShareProfileScalarWhereInput | ActivityShareProfileScalarWhereInput[]
    id?: StringFilter<"ActivityShareProfile"> | string
    activityShareId?: StringFilter<"ActivityShareProfile"> | string
    childId?: StringFilter<"ActivityShareProfile"> | string
    canViewInterested?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewRegistered?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewCompleted?: BoolFilter<"ActivityShareProfile"> | boolean
    canViewNotes?: BoolFilter<"ActivityShareProfile"> | boolean
    createdAt?: DateTimeFilter<"ActivityShareProfile"> | Date | string
  }

  export type ActivityShareCreateWithoutProfilesInput = {
    id?: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sharedWithUser: UserCreateNestedOneWithoutSharedWithMeInput
    sharingUser: UserCreateNestedOneWithoutMySharesInput
  }

  export type ActivityShareUncheckedCreateWithoutProfilesInput = {
    id?: string
    sharingUserId: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityShareCreateOrConnectWithoutProfilesInput = {
    where: ActivityShareWhereUniqueInput
    create: XOR<ActivityShareCreateWithoutProfilesInput, ActivityShareUncheckedCreateWithoutProfilesInput>
  }

  export type ChildCreateWithoutProfilesInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChildrenInput
    childActivities?: ChildActivityCreateNestedManyWithoutChildInput
  }

  export type ChildUncheckedCreateWithoutProfilesInput = {
    id?: string
    userId: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutChildInput
  }

  export type ChildCreateOrConnectWithoutProfilesInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutProfilesInput, ChildUncheckedCreateWithoutProfilesInput>
  }

  export type ActivityShareUpsertWithoutProfilesInput = {
    update: XOR<ActivityShareUpdateWithoutProfilesInput, ActivityShareUncheckedUpdateWithoutProfilesInput>
    create: XOR<ActivityShareCreateWithoutProfilesInput, ActivityShareUncheckedCreateWithoutProfilesInput>
    where?: ActivityShareWhereInput
  }

  export type ActivityShareUpdateToOneWithWhereWithoutProfilesInput = {
    where?: ActivityShareWhereInput
    data: XOR<ActivityShareUpdateWithoutProfilesInput, ActivityShareUncheckedUpdateWithoutProfilesInput>
  }

  export type ActivityShareUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedWithUser?: UserUpdateOneRequiredWithoutSharedWithMeNestedInput
    sharingUser?: UserUpdateOneRequiredWithoutMySharesNestedInput
  }

  export type ActivityShareUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharingUserId?: StringFieldUpdateOperationsInput | string
    sharedWithUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUpsertWithoutProfilesInput = {
    update: XOR<ChildUpdateWithoutProfilesInput, ChildUncheckedUpdateWithoutProfilesInput>
    create: XOR<ChildCreateWithoutProfilesInput, ChildUncheckedCreateWithoutProfilesInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutProfilesInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutProfilesInput, ChildUncheckedUpdateWithoutProfilesInput>
  }

  export type ChildUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChildrenNestedInput
    childActivities?: ChildActivityUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateWithoutProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    childActivities?: ChildActivityUncheckedUpdateManyWithoutChildNestedInput
  }

  export type ActivityCreateWithoutActivitySubtypeInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutActivitySubtypeInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutActivitySubtypeInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput>
  }

  export type ActivityCreateManyActivitySubtypeInputEnvelope = {
    data: ActivityCreateManyActivitySubtypeInput | ActivityCreateManyActivitySubtypeInput[]
    skipDuplicates?: boolean
  }

  export type ActivityTypeCreateWithoutSubtypesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeUncheckedCreateWithoutSubtypesInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    iconName?: string | null
    imageUrl?: string | null
    displayOrder: number
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutActivityTypeInput
  }

  export type ActivityTypeCreateOrConnectWithoutSubtypesInput = {
    where: ActivityTypeWhereUniqueInput
    create: XOR<ActivityTypeCreateWithoutSubtypesInput, ActivityTypeUncheckedCreateWithoutSubtypesInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutActivitySubtypeInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutActivitySubtypeInput, ActivityUncheckedUpdateWithoutActivitySubtypeInput>
    create: XOR<ActivityCreateWithoutActivitySubtypeInput, ActivityUncheckedCreateWithoutActivitySubtypeInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutActivitySubtypeInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutActivitySubtypeInput, ActivityUncheckedUpdateWithoutActivitySubtypeInput>
  }

  export type ActivityUpdateManyWithWhereWithoutActivitySubtypeInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutActivitySubtypeInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    providerId?: StringFilter<"Activity"> | string
    externalId?: StringFilter<"Activity"> | string
    name?: StringFilter<"Activity"> | string
    category?: StringFilter<"Activity"> | string
    subcategory?: StringNullableFilter<"Activity"> | string | null
    description?: StringNullableFilter<"Activity"> | string | null
    schedule?: StringNullableFilter<"Activity"> | string | null
    dateStart?: DateTimeNullableFilter<"Activity"> | Date | string | null
    dateEnd?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    ageMin?: IntNullableFilter<"Activity"> | number | null
    ageMax?: IntNullableFilter<"Activity"> | number | null
    cost?: FloatFilter<"Activity"> | number
    spotsAvailable?: IntNullableFilter<"Activity"> | number | null
    totalSpots?: IntNullableFilter<"Activity"> | number | null
    locationId?: StringNullableFilter<"Activity"> | string | null
    registrationUrl?: StringNullableFilter<"Activity"> | string | null
    courseId?: StringNullableFilter<"Activity"> | string | null
    isActive?: BoolFilter<"Activity"> | boolean
    isUpdated?: BoolFilter<"Activity"> | boolean
    lastSeenAt?: DateTimeFilter<"Activity"> | Date | string
    rawData?: JsonNullableFilter<"Activity">
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    updatedAt?: DateTimeFilter<"Activity"> | Date | string
    dayOfWeek?: StringNullableListFilter<"Activity">
    registrationEndDate?: DateTimeNullableFilter<"Activity"> | Date | string | null
    registrationEndTime?: StringNullableFilter<"Activity"> | string | null
    costIncludesTax?: BoolFilter<"Activity"> | boolean
    taxAmount?: FloatNullableFilter<"Activity"> | number | null
    startTime?: StringNullableFilter<"Activity"> | string | null
    endTime?: StringNullableFilter<"Activity"> | string | null
    courseDetails?: StringNullableFilter<"Activity"> | string | null
    dates?: StringNullableFilter<"Activity"> | string | null
    registrationStatus?: StringNullableFilter<"Activity"> | string | null
    registrationButtonText?: StringNullableFilter<"Activity"> | string | null
    detailUrl?: StringNullableFilter<"Activity"> | string | null
    instructor?: StringNullableFilter<"Activity"> | string | null
    hasMultipleSessions?: BoolFilter<"Activity"> | boolean
    sessionCount?: IntFilter<"Activity"> | number
    hasPrerequisites?: BoolFilter<"Activity"> | boolean
    fullDescription?: StringNullableFilter<"Activity"> | string | null
    whatToBring?: StringNullableFilter<"Activity"> | string | null
    prerequisites?: StringNullableFilter<"Activity"> | string | null
    directRegistrationUrl?: StringNullableFilter<"Activity"> | string | null
    contactInfo?: StringNullableFilter<"Activity"> | string | null
    activitySubtypeId?: StringNullableFilter<"Activity"> | string | null
    activityTypeId?: StringNullableFilter<"Activity"> | string | null
  }

  export type ActivityTypeUpsertWithoutSubtypesInput = {
    update: XOR<ActivityTypeUpdateWithoutSubtypesInput, ActivityTypeUncheckedUpdateWithoutSubtypesInput>
    create: XOR<ActivityTypeCreateWithoutSubtypesInput, ActivityTypeUncheckedCreateWithoutSubtypesInput>
    where?: ActivityTypeWhereInput
  }

  export type ActivityTypeUpdateToOneWithWhereWithoutSubtypesInput = {
    where?: ActivityTypeWhereInput
    data: XOR<ActivityTypeUpdateWithoutSubtypesInput, ActivityTypeUncheckedUpdateWithoutSubtypesInput>
  }

  export type ActivityTypeUpdateWithoutSubtypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutActivityTypeNestedInput
  }

  export type ActivityTypeUncheckedUpdateWithoutSubtypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    iconName?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutActivityTypeNestedInput
  }

  export type ActivityCreateWithoutActivityTypeInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutActivityTypeInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutActivityTypeInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput>
  }

  export type ActivityCreateManyActivityTypeInputEnvelope = {
    data: ActivityCreateManyActivityTypeInput | ActivityCreateManyActivityTypeInput[]
    skipDuplicates?: boolean
  }

  export type ActivitySubtypeCreateWithoutActivityTypeInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
    activities?: ActivityCreateNestedManyWithoutActivitySubtypeInput
  }

  export type ActivitySubtypeUncheckedCreateWithoutActivityTypeInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
    activities?: ActivityUncheckedCreateNestedManyWithoutActivitySubtypeInput
  }

  export type ActivitySubtypeCreateOrConnectWithoutActivityTypeInput = {
    where: ActivitySubtypeWhereUniqueInput
    create: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput>
  }

  export type ActivitySubtypeCreateManyActivityTypeInputEnvelope = {
    data: ActivitySubtypeCreateManyActivityTypeInput | ActivitySubtypeCreateManyActivityTypeInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutActivityTypeInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutActivityTypeInput, ActivityUncheckedUpdateWithoutActivityTypeInput>
    create: XOR<ActivityCreateWithoutActivityTypeInput, ActivityUncheckedCreateWithoutActivityTypeInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutActivityTypeInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutActivityTypeInput, ActivityUncheckedUpdateWithoutActivityTypeInput>
  }

  export type ActivityUpdateManyWithWhereWithoutActivityTypeInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutActivityTypeInput>
  }

  export type ActivitySubtypeUpsertWithWhereUniqueWithoutActivityTypeInput = {
    where: ActivitySubtypeWhereUniqueInput
    update: XOR<ActivitySubtypeUpdateWithoutActivityTypeInput, ActivitySubtypeUncheckedUpdateWithoutActivityTypeInput>
    create: XOR<ActivitySubtypeCreateWithoutActivityTypeInput, ActivitySubtypeUncheckedCreateWithoutActivityTypeInput>
  }

  export type ActivitySubtypeUpdateWithWhereUniqueWithoutActivityTypeInput = {
    where: ActivitySubtypeWhereUniqueInput
    data: XOR<ActivitySubtypeUpdateWithoutActivityTypeInput, ActivitySubtypeUncheckedUpdateWithoutActivityTypeInput>
  }

  export type ActivitySubtypeUpdateManyWithWhereWithoutActivityTypeInput = {
    where: ActivitySubtypeScalarWhereInput
    data: XOR<ActivitySubtypeUpdateManyMutationInput, ActivitySubtypeUncheckedUpdateManyWithoutActivityTypeInput>
  }

  export type ActivitySubtypeScalarWhereInput = {
    AND?: ActivitySubtypeScalarWhereInput | ActivitySubtypeScalarWhereInput[]
    OR?: ActivitySubtypeScalarWhereInput[]
    NOT?: ActivitySubtypeScalarWhereInput | ActivitySubtypeScalarWhereInput[]
    id?: StringFilter<"ActivitySubtype"> | string
    activityTypeId?: StringFilter<"ActivitySubtype"> | string
    code?: StringFilter<"ActivitySubtype"> | string
    name?: StringFilter<"ActivitySubtype"> | string
    description?: StringNullableFilter<"ActivitySubtype"> | string | null
    imageUrl?: StringNullableFilter<"ActivitySubtype"> | string | null
    createdAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    updatedAt?: DateTimeFilter<"ActivitySubtype"> | Date | string
    displayOrder?: IntFilter<"ActivitySubtype"> | number
  }

  export type ActivityShareProfileCreateWithoutChildInput = {
    id?: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
    activityShare: ActivityShareCreateNestedOneWithoutProfilesInput
  }

  export type ActivityShareProfileUncheckedCreateWithoutChildInput = {
    id?: string
    activityShareId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ActivityShareProfileCreateOrConnectWithoutChildInput = {
    where: ActivityShareProfileWhereUniqueInput
    create: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput>
  }

  export type ActivityShareProfileCreateManyChildInputEnvelope = {
    data: ActivityShareProfileCreateManyChildInput | ActivityShareProfileCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutChildrenInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutChildrenInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutChildrenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChildrenInput, UserUncheckedCreateWithoutChildrenInput>
  }

  export type ChildActivityCreateWithoutChildInput = {
    id?: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutChildActivitiesInput
  }

  export type ChildActivityUncheckedCreateWithoutChildInput = {
    id?: string
    activityId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildActivityCreateOrConnectWithoutChildInput = {
    where: ChildActivityWhereUniqueInput
    create: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput>
  }

  export type ChildActivityCreateManyChildInputEnvelope = {
    data: ChildActivityCreateManyChildInput | ChildActivityCreateManyChildInput[]
    skipDuplicates?: boolean
  }

  export type ActivityShareProfileUpsertWithWhereUniqueWithoutChildInput = {
    where: ActivityShareProfileWhereUniqueInput
    update: XOR<ActivityShareProfileUpdateWithoutChildInput, ActivityShareProfileUncheckedUpdateWithoutChildInput>
    create: XOR<ActivityShareProfileCreateWithoutChildInput, ActivityShareProfileUncheckedCreateWithoutChildInput>
  }

  export type ActivityShareProfileUpdateWithWhereUniqueWithoutChildInput = {
    where: ActivityShareProfileWhereUniqueInput
    data: XOR<ActivityShareProfileUpdateWithoutChildInput, ActivityShareProfileUncheckedUpdateWithoutChildInput>
  }

  export type ActivityShareProfileUpdateManyWithWhereWithoutChildInput = {
    where: ActivityShareProfileScalarWhereInput
    data: XOR<ActivityShareProfileUpdateManyMutationInput, ActivityShareProfileUncheckedUpdateManyWithoutChildInput>
  }

  export type UserUpsertWithoutChildrenInput = {
    update: XOR<UserUpdateWithoutChildrenInput, UserUncheckedUpdateWithoutChildrenInput>
    create: XOR<UserCreateWithoutChildrenInput, UserUncheckedCreateWithoutChildrenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChildrenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChildrenInput, UserUncheckedUpdateWithoutChildrenInput>
  }

  export type UserUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type ChildActivityUpsertWithWhereUniqueWithoutChildInput = {
    where: ChildActivityWhereUniqueInput
    update: XOR<ChildActivityUpdateWithoutChildInput, ChildActivityUncheckedUpdateWithoutChildInput>
    create: XOR<ChildActivityCreateWithoutChildInput, ChildActivityUncheckedCreateWithoutChildInput>
  }

  export type ChildActivityUpdateWithWhereUniqueWithoutChildInput = {
    where: ChildActivityWhereUniqueInput
    data: XOR<ChildActivityUpdateWithoutChildInput, ChildActivityUncheckedUpdateWithoutChildInput>
  }

  export type ChildActivityUpdateManyWithWhereWithoutChildInput = {
    where: ChildActivityScalarWhereInput
    data: XOR<ChildActivityUpdateManyMutationInput, ChildActivityUncheckedUpdateManyWithoutChildInput>
  }

  export type ActivityCreateWithoutChildActivitiesInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutChildActivitiesInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutChildActivitiesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutChildActivitiesInput, ActivityUncheckedCreateWithoutChildActivitiesInput>
  }

  export type ChildCreateWithoutChildActivitiesInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileCreateNestedManyWithoutChildInput
    user: UserCreateNestedOneWithoutChildrenInput
  }

  export type ChildUncheckedCreateWithoutChildActivitiesInput = {
    id?: string
    userId: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutChildInput
  }

  export type ChildCreateOrConnectWithoutChildActivitiesInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutChildActivitiesInput, ChildUncheckedCreateWithoutChildActivitiesInput>
  }

  export type ActivityUpsertWithoutChildActivitiesInput = {
    update: XOR<ActivityUpdateWithoutChildActivitiesInput, ActivityUncheckedUpdateWithoutChildActivitiesInput>
    create: XOR<ActivityCreateWithoutChildActivitiesInput, ActivityUncheckedCreateWithoutChildActivitiesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutChildActivitiesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutChildActivitiesInput, ActivityUncheckedUpdateWithoutChildActivitiesInput>
  }

  export type ActivityUpdateWithoutChildActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutChildActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ChildUpsertWithoutChildActivitiesInput = {
    update: XOR<ChildUpdateWithoutChildActivitiesInput, ChildUncheckedUpdateWithoutChildActivitiesInput>
    create: XOR<ChildCreateWithoutChildActivitiesInput, ChildUncheckedCreateWithoutChildActivitiesInput>
    where?: ChildWhereInput
  }

  export type ChildUpdateToOneWithWhereWithoutChildActivitiesInput = {
    where?: ChildWhereInput
    data: XOR<ChildUpdateWithoutChildActivitiesInput, ChildUncheckedUpdateWithoutChildActivitiesInput>
  }

  export type ChildUpdateWithoutChildActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUpdateManyWithoutChildNestedInput
    user?: UserUpdateOneRequiredWithoutChildrenNestedInput
  }

  export type ChildUncheckedUpdateWithoutChildActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutChildNestedInput
  }

  export type ActivityCreateWithoutFavoritesInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutFavoritesInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutFavoritesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutFavoritesInput, ActivityUncheckedCreateWithoutFavoritesInput>
  }

  export type UserCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type ActivityUpsertWithoutFavoritesInput = {
    update: XOR<ActivityUpdateWithoutFavoritesInput, ActivityUncheckedUpdateWithoutFavoritesInput>
    create: XOR<ActivityCreateWithoutFavoritesInput, ActivityUncheckedCreateWithoutFavoritesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutFavoritesInput, ActivityUncheckedUpdateWithoutFavoritesInput>
  }

  export type ActivityUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateWithoutReceivedInvitationsInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    sentInvitations?: InvitationCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutReceivedInvitationsInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: InvitationUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutReceivedInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
  }

  export type UserCreateWithoutSentInvitationsInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareCreateNestedManyWithoutSharingUserInput
    children?: ChildCreateNestedManyWithoutUserInput
    favorites?: FavoriteCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationCreateNestedManyWithoutRecipientInput
  }

  export type UserUncheckedCreateWithoutSentInvitationsInput = {
    id?: string
    email: string
    name: string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordHash: string
    phoneNumber?: string | null
    isVerified?: boolean
    verificationToken?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    sharedWithMe?: ActivityShareUncheckedCreateNestedManyWithoutSharedWithUserInput
    myShares?: ActivityShareUncheckedCreateNestedManyWithoutSharingUserInput
    children?: ChildUncheckedCreateNestedManyWithoutUserInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: InvitationUncheckedCreateNestedManyWithoutRecipientInput
  }

  export type UserCreateOrConnectWithoutSentInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
  }

  export type UserUpsertWithoutReceivedInvitationsInput = {
    update: XOR<UserUpdateWithoutReceivedInvitationsInput, UserUncheckedUpdateWithoutReceivedInvitationsInput>
    create: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedInvitationsInput, UserUncheckedUpdateWithoutReceivedInvitationsInput>
  }

  export type UserUpdateWithoutReceivedInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    sentInvitations?: InvitationUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: InvitationUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserUpsertWithoutSentInvitationsInput = {
    update: XOR<UserUpdateWithoutSentInvitationsInput, UserUncheckedUpdateWithoutSentInvitationsInput>
    create: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentInvitationsInput, UserUncheckedUpdateWithoutSentInvitationsInput>
  }

  export type UserUpdateWithoutSentInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUpdateManyWithoutSharingUserNestedInput
    children?: ChildUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUpdateManyWithoutRecipientNestedInput
  }

  export type UserUncheckedUpdateWithoutSentInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    preferences?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sharedWithMe?: ActivityShareUncheckedUpdateManyWithoutSharedWithUserNestedInput
    myShares?: ActivityShareUncheckedUpdateManyWithoutSharingUserNestedInput
    children?: ChildUncheckedUpdateManyWithoutUserNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: InvitationUncheckedUpdateManyWithoutRecipientNestedInput
  }

  export type LocationCreateWithoutCityInput = {
    id?: string
    name: string
    address?: string | null
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutCityInput = {
    id?: string
    name: string
    address?: string | null
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activities?: ActivityUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutCityInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput>
  }

  export type LocationCreateManyCityInputEnvelope = {
    data: LocationCreateManyCityInput | LocationCreateManyCityInput[]
    skipDuplicates?: boolean
  }

  export type LocationUpsertWithWhereUniqueWithoutCityInput = {
    where: LocationWhereUniqueInput
    update: XOR<LocationUpdateWithoutCityInput, LocationUncheckedUpdateWithoutCityInput>
    create: XOR<LocationCreateWithoutCityInput, LocationUncheckedCreateWithoutCityInput>
  }

  export type LocationUpdateWithWhereUniqueWithoutCityInput = {
    where: LocationWhereUniqueInput
    data: XOR<LocationUpdateWithoutCityInput, LocationUncheckedUpdateWithoutCityInput>
  }

  export type LocationUpdateManyWithWhereWithoutCityInput = {
    where: LocationScalarWhereInput
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyWithoutCityInput>
  }

  export type LocationScalarWhereInput = {
    AND?: LocationScalarWhereInput | LocationScalarWhereInput[]
    OR?: LocationScalarWhereInput[]
    NOT?: LocationScalarWhereInput | LocationScalarWhereInput[]
    id?: StringFilter<"Location"> | string
    name?: StringFilter<"Location"> | string
    address?: StringNullableFilter<"Location"> | string | null
    cityId?: StringFilter<"Location"> | string
    postalCode?: StringNullableFilter<"Location"> | string | null
    latitude?: FloatNullableFilter<"Location"> | number | null
    longitude?: FloatNullableFilter<"Location"> | number | null
    facility?: StringNullableFilter<"Location"> | string | null
    fullAddress?: StringNullableFilter<"Location"> | string | null
    mapUrl?: StringNullableFilter<"Location"> | string | null
    placeId?: StringNullableFilter<"Location"> | string | null
    phoneNumber?: StringNullableFilter<"Location"> | string | null
    website?: StringNullableFilter<"Location"> | string | null
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
  }

  export type CityCreateWithoutLocationsInput = {
    id?: string
    name: string
    province: string
    country?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    province: string
    country?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityCreateOrConnectWithoutLocationsInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutLocationsInput, CityUncheckedCreateWithoutLocationsInput>
  }

  export type ActivityCreateWithoutLocationInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutLocationInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput>
  }

  export type ActivityCreateManyLocationInputEnvelope = {
    data: ActivityCreateManyLocationInput | ActivityCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type CityUpsertWithoutLocationsInput = {
    update: XOR<CityUpdateWithoutLocationsInput, CityUncheckedUpdateWithoutLocationsInput>
    create: XOR<CityCreateWithoutLocationsInput, CityUncheckedCreateWithoutLocationsInput>
    where?: CityWhereInput
  }

  export type CityUpdateToOneWithWhereWithoutLocationsInput = {
    where?: CityWhereInput
    data: XOR<CityUpdateWithoutLocationsInput, CityUncheckedUpdateWithoutLocationsInput>
  }

  export type CityUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    province?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUpsertWithWhereUniqueWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutLocationInput, ActivityUncheckedUpdateWithoutLocationInput>
    create: XOR<ActivityCreateWithoutLocationInput, ActivityUncheckedCreateWithoutLocationInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutLocationInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutLocationInput, ActivityUncheckedUpdateWithoutLocationInput>
  }

  export type ActivityUpdateManyWithWhereWithoutLocationInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutLocationInput>
  }

  export type ActivityCreateWithoutProviderInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutProviderInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
    categories?: ActivityCategoryUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutProviderInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput>
  }

  export type ActivityCreateManyProviderInputEnvelope = {
    data: ActivityCreateManyProviderInput | ActivityCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ProviderMetricsCreateWithoutProviderInput = {
    id?: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
  }

  export type ProviderMetricsUncheckedCreateWithoutProviderInput = {
    id?: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
  }

  export type ProviderMetricsCreateOrConnectWithoutProviderInput = {
    where: ProviderMetricsWhereUniqueInput
    create: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput>
  }

  export type ProviderMetricsCreateManyProviderInputEnvelope = {
    data: ProviderMetricsCreateManyProviderInput | ProviderMetricsCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ScrapeJobCreateWithoutProviderInput = {
    id?: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ScrapeJobUncheckedCreateWithoutProviderInput = {
    id?: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ScrapeJobCreateOrConnectWithoutProviderInput = {
    where: ScrapeJobWhereUniqueInput
    create: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput>
  }

  export type ScrapeJobCreateManyProviderInputEnvelope = {
    data: ScrapeJobCreateManyProviderInput | ScrapeJobCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ScraperHealthCheckCreateWithoutProviderInput = {
    id?: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ScraperHealthCheckUncheckedCreateWithoutProviderInput = {
    id?: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ScraperHealthCheckCreateOrConnectWithoutProviderInput = {
    where: ScraperHealthCheckWhereUniqueInput
    create: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput>
  }

  export type ScraperHealthCheckCreateManyProviderInputEnvelope = {
    data: ScraperHealthCheckCreateManyProviderInput | ScraperHealthCheckCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutProviderInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutProviderInput, ActivityUncheckedUpdateWithoutProviderInput>
    create: XOR<ActivityCreateWithoutProviderInput, ActivityUncheckedCreateWithoutProviderInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutProviderInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutProviderInput, ActivityUncheckedUpdateWithoutProviderInput>
  }

  export type ActivityUpdateManyWithWhereWithoutProviderInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutProviderInput>
  }

  export type ProviderMetricsUpsertWithWhereUniqueWithoutProviderInput = {
    where: ProviderMetricsWhereUniqueInput
    update: XOR<ProviderMetricsUpdateWithoutProviderInput, ProviderMetricsUncheckedUpdateWithoutProviderInput>
    create: XOR<ProviderMetricsCreateWithoutProviderInput, ProviderMetricsUncheckedCreateWithoutProviderInput>
  }

  export type ProviderMetricsUpdateWithWhereUniqueWithoutProviderInput = {
    where: ProviderMetricsWhereUniqueInput
    data: XOR<ProviderMetricsUpdateWithoutProviderInput, ProviderMetricsUncheckedUpdateWithoutProviderInput>
  }

  export type ProviderMetricsUpdateManyWithWhereWithoutProviderInput = {
    where: ProviderMetricsScalarWhereInput
    data: XOR<ProviderMetricsUpdateManyMutationInput, ProviderMetricsUncheckedUpdateManyWithoutProviderInput>
  }

  export type ProviderMetricsScalarWhereInput = {
    AND?: ProviderMetricsScalarWhereInput | ProviderMetricsScalarWhereInput[]
    OR?: ProviderMetricsScalarWhereInput[]
    NOT?: ProviderMetricsScalarWhereInput | ProviderMetricsScalarWhereInput[]
    id?: StringFilter<"ProviderMetrics"> | string
    providerId?: StringFilter<"ProviderMetrics"> | string
    scrapeDate?: DateTimeFilter<"ProviderMetrics"> | Date | string
    activitiesFound?: IntFilter<"ProviderMetrics"> | number
    activitiesProcessed?: IntFilter<"ProviderMetrics"> | number
    dataQualityScore?: FloatNullableFilter<"ProviderMetrics"> | number | null
    errors?: JsonNullableFilter<"ProviderMetrics">
    scrapeDuration?: IntNullableFilter<"ProviderMetrics"> | number | null
    memoryUsed?: BigIntNullableFilter<"ProviderMetrics"> | bigint | number | null
    createdAt?: DateTimeFilter<"ProviderMetrics"> | Date | string
  }

  export type ScrapeJobUpsertWithWhereUniqueWithoutProviderInput = {
    where: ScrapeJobWhereUniqueInput
    update: XOR<ScrapeJobUpdateWithoutProviderInput, ScrapeJobUncheckedUpdateWithoutProviderInput>
    create: XOR<ScrapeJobCreateWithoutProviderInput, ScrapeJobUncheckedCreateWithoutProviderInput>
  }

  export type ScrapeJobUpdateWithWhereUniqueWithoutProviderInput = {
    where: ScrapeJobWhereUniqueInput
    data: XOR<ScrapeJobUpdateWithoutProviderInput, ScrapeJobUncheckedUpdateWithoutProviderInput>
  }

  export type ScrapeJobUpdateManyWithWhereWithoutProviderInput = {
    where: ScrapeJobScalarWhereInput
    data: XOR<ScrapeJobUpdateManyMutationInput, ScrapeJobUncheckedUpdateManyWithoutProviderInput>
  }

  export type ScrapeJobScalarWhereInput = {
    AND?: ScrapeJobScalarWhereInput | ScrapeJobScalarWhereInput[]
    OR?: ScrapeJobScalarWhereInput[]
    NOT?: ScrapeJobScalarWhereInput | ScrapeJobScalarWhereInput[]
    id?: StringFilter<"ScrapeJob"> | string
    providerId?: StringFilter<"ScrapeJob"> | string
    status?: EnumJobStatusFilter<"ScrapeJob"> | $Enums.JobStatus
    startedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ScrapeJob"> | Date | string | null
    activitiesFound?: IntFilter<"ScrapeJob"> | number
    activitiesCreated?: IntFilter<"ScrapeJob"> | number
    activitiesUpdated?: IntFilter<"ScrapeJob"> | number
    activitiesRemoved?: IntFilter<"ScrapeJob"> | number
    errorMessage?: StringNullableFilter<"ScrapeJob"> | string | null
    errorDetails?: JsonNullableFilter<"ScrapeJob">
    createdAt?: DateTimeFilter<"ScrapeJob"> | Date | string
  }

  export type ScraperHealthCheckUpsertWithWhereUniqueWithoutProviderInput = {
    where: ScraperHealthCheckWhereUniqueInput
    update: XOR<ScraperHealthCheckUpdateWithoutProviderInput, ScraperHealthCheckUncheckedUpdateWithoutProviderInput>
    create: XOR<ScraperHealthCheckCreateWithoutProviderInput, ScraperHealthCheckUncheckedCreateWithoutProviderInput>
  }

  export type ScraperHealthCheckUpdateWithWhereUniqueWithoutProviderInput = {
    where: ScraperHealthCheckWhereUniqueInput
    data: XOR<ScraperHealthCheckUpdateWithoutProviderInput, ScraperHealthCheckUncheckedUpdateWithoutProviderInput>
  }

  export type ScraperHealthCheckUpdateManyWithWhereWithoutProviderInput = {
    where: ScraperHealthCheckScalarWhereInput
    data: XOR<ScraperHealthCheckUpdateManyMutationInput, ScraperHealthCheckUncheckedUpdateManyWithoutProviderInput>
  }

  export type ScraperHealthCheckScalarWhereInput = {
    AND?: ScraperHealthCheckScalarWhereInput | ScraperHealthCheckScalarWhereInput[]
    OR?: ScraperHealthCheckScalarWhereInput[]
    NOT?: ScraperHealthCheckScalarWhereInput | ScraperHealthCheckScalarWhereInput[]
    id?: StringFilter<"ScraperHealthCheck"> | string
    providerId?: StringFilter<"ScraperHealthCheck"> | string
    status?: StringFilter<"ScraperHealthCheck"> | string
    message?: StringNullableFilter<"ScraperHealthCheck"> | string | null
    details?: JsonNullableFilter<"ScraperHealthCheck">
    checkedAt?: DateTimeFilter<"ScraperHealthCheck"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"ScraperHealthCheck"> | Date | string | null
  }

  export type ProviderCreateWithoutProviderMetricsInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutProviderMetricsInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobUncheckedCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutProviderMetricsInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutProviderMetricsInput, ProviderUncheckedCreateWithoutProviderMetricsInput>
  }

  export type ProviderUpsertWithoutProviderMetricsInput = {
    update: XOR<ProviderUpdateWithoutProviderMetricsInput, ProviderUncheckedUpdateWithoutProviderMetricsInput>
    create: XOR<ProviderCreateWithoutProviderMetricsInput, ProviderUncheckedCreateWithoutProviderMetricsInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutProviderMetricsInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutProviderMetricsInput, ProviderUncheckedUpdateWithoutProviderMetricsInput>
  }

  export type ProviderUpdateWithoutProviderMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutProviderMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUncheckedUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateWithoutScrapeJobInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutScrapeJobInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsUncheckedCreateNestedManyWithoutProviderInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutScrapeJobInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutScrapeJobInput, ProviderUncheckedCreateWithoutScrapeJobInput>
  }

  export type ProviderUpsertWithoutScrapeJobInput = {
    update: XOR<ProviderUpdateWithoutScrapeJobInput, ProviderUncheckedUpdateWithoutScrapeJobInput>
    create: XOR<ProviderCreateWithoutScrapeJobInput, ProviderUncheckedCreateWithoutScrapeJobInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutScrapeJobInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutScrapeJobInput, ProviderUncheckedUpdateWithoutScrapeJobInput>
  }

  export type ProviderUpdateWithoutScrapeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutScrapeJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUncheckedUpdateManyWithoutProviderNestedInput
    ScraperHealthCheck?: ScraperHealthCheckUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ProviderCreateWithoutScraperHealthCheckInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobCreateNestedManyWithoutProviderInput
  }

  export type ProviderUncheckedCreateWithoutScraperHealthCheckInput = {
    id?: string
    name: string
    website: string
    scraperConfig: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    region?: string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutProviderInput
    ProviderMetrics?: ProviderMetricsUncheckedCreateNestedManyWithoutProviderInput
    ScrapeJob?: ScrapeJobUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ProviderCreateOrConnectWithoutScraperHealthCheckInput = {
    where: ProviderWhereUniqueInput
    create: XOR<ProviderCreateWithoutScraperHealthCheckInput, ProviderUncheckedCreateWithoutScraperHealthCheckInput>
  }

  export type ProviderUpsertWithoutScraperHealthCheckInput = {
    update: XOR<ProviderUpdateWithoutScraperHealthCheckInput, ProviderUncheckedUpdateWithoutScraperHealthCheckInput>
    create: XOR<ProviderCreateWithoutScraperHealthCheckInput, ProviderUncheckedCreateWithoutScraperHealthCheckInput>
    where?: ProviderWhereInput
  }

  export type ProviderUpdateToOneWithWhereWithoutScraperHealthCheckInput = {
    where?: ProviderWhereInput
    data: XOR<ProviderUpdateWithoutScraperHealthCheckInput, ProviderUncheckedUpdateWithoutScraperHealthCheckInput>
  }

  export type ProviderUpdateWithoutScraperHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUpdateManyWithoutProviderNestedInput
  }

  export type ProviderUncheckedUpdateWithoutScraperHealthCheckInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    scraperConfig?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    platform?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutProviderNestedInput
    ProviderMetrics?: ProviderMetricsUncheckedUpdateManyWithoutProviderNestedInput
    ScrapeJob?: ScrapeJobUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ActivityShareCreateWithoutSharedWithUserInput = {
    id?: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sharingUser: UserCreateNestedOneWithoutMySharesInput
    profiles?: ActivityShareProfileCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareUncheckedCreateWithoutSharedWithUserInput = {
    id?: string
    sharingUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareCreateOrConnectWithoutSharedWithUserInput = {
    where: ActivityShareWhereUniqueInput
    create: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput>
  }

  export type ActivityShareCreateManySharedWithUserInputEnvelope = {
    data: ActivityShareCreateManySharedWithUserInput | ActivityShareCreateManySharedWithUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityShareCreateWithoutSharingUserInput = {
    id?: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    sharedWithUser: UserCreateNestedOneWithoutSharedWithMeInput
    profiles?: ActivityShareProfileCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareUncheckedCreateWithoutSharingUserInput = {
    id?: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutActivityShareInput
  }

  export type ActivityShareCreateOrConnectWithoutSharingUserInput = {
    where: ActivityShareWhereUniqueInput
    create: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput>
  }

  export type ActivityShareCreateManySharingUserInputEnvelope = {
    data: ActivityShareCreateManySharingUserInput | ActivityShareCreateManySharingUserInput[]
    skipDuplicates?: boolean
  }

  export type ChildCreateWithoutUserInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileCreateNestedManyWithoutChildInput
    childActivities?: ChildActivityCreateNestedManyWithoutChildInput
  }

  export type ChildUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ActivityShareProfileUncheckedCreateNestedManyWithoutChildInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutChildInput
  }

  export type ChildCreateOrConnectWithoutUserInput = {
    where: ChildWhereUniqueInput
    create: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput>
  }

  export type ChildCreateManyUserInputEnvelope = {
    data: ChildCreateManyUserInput | ChildCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    notifyOnChange?: boolean
    activity: ActivityCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    id?: string
    activityId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutRecipientInput = {
    id?: string
    recipientEmail: string
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutSentInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutRecipientInput = {
    id?: string
    senderId: string
    recipientEmail: string
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type InvitationCreateOrConnectWithoutRecipientInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput>
  }

  export type InvitationCreateManyRecipientInputEnvelope = {
    data: InvitationCreateManyRecipientInput | InvitationCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type InvitationCreateWithoutSenderInput = {
    id?: string
    recipientEmail: string
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
    recipient?: UserCreateNestedOneWithoutReceivedInvitationsInput
  }

  export type InvitationUncheckedCreateWithoutSenderInput = {
    id?: string
    recipientEmail: string
    recipientUserId?: string | null
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type InvitationCreateOrConnectWithoutSenderInput = {
    where: InvitationWhereUniqueInput
    create: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput>
  }

  export type InvitationCreateManySenderInputEnvelope = {
    data: InvitationCreateManySenderInput | InvitationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type ActivityShareUpsertWithWhereUniqueWithoutSharedWithUserInput = {
    where: ActivityShareWhereUniqueInput
    update: XOR<ActivityShareUpdateWithoutSharedWithUserInput, ActivityShareUncheckedUpdateWithoutSharedWithUserInput>
    create: XOR<ActivityShareCreateWithoutSharedWithUserInput, ActivityShareUncheckedCreateWithoutSharedWithUserInput>
  }

  export type ActivityShareUpdateWithWhereUniqueWithoutSharedWithUserInput = {
    where: ActivityShareWhereUniqueInput
    data: XOR<ActivityShareUpdateWithoutSharedWithUserInput, ActivityShareUncheckedUpdateWithoutSharedWithUserInput>
  }

  export type ActivityShareUpdateManyWithWhereWithoutSharedWithUserInput = {
    where: ActivityShareScalarWhereInput
    data: XOR<ActivityShareUpdateManyMutationInput, ActivityShareUncheckedUpdateManyWithoutSharedWithUserInput>
  }

  export type ActivityShareScalarWhereInput = {
    AND?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
    OR?: ActivityShareScalarWhereInput[]
    NOT?: ActivityShareScalarWhereInput | ActivityShareScalarWhereInput[]
    id?: StringFilter<"ActivityShare"> | string
    sharingUserId?: StringFilter<"ActivityShare"> | string
    sharedWithUserId?: StringFilter<"ActivityShare"> | string
    permissionLevel?: StringFilter<"ActivityShare"> | string
    expiresAt?: DateTimeNullableFilter<"ActivityShare"> | Date | string | null
    isActive?: BoolFilter<"ActivityShare"> | boolean
    createdAt?: DateTimeFilter<"ActivityShare"> | Date | string
    updatedAt?: DateTimeFilter<"ActivityShare"> | Date | string
  }

  export type ActivityShareUpsertWithWhereUniqueWithoutSharingUserInput = {
    where: ActivityShareWhereUniqueInput
    update: XOR<ActivityShareUpdateWithoutSharingUserInput, ActivityShareUncheckedUpdateWithoutSharingUserInput>
    create: XOR<ActivityShareCreateWithoutSharingUserInput, ActivityShareUncheckedCreateWithoutSharingUserInput>
  }

  export type ActivityShareUpdateWithWhereUniqueWithoutSharingUserInput = {
    where: ActivityShareWhereUniqueInput
    data: XOR<ActivityShareUpdateWithoutSharingUserInput, ActivityShareUncheckedUpdateWithoutSharingUserInput>
  }

  export type ActivityShareUpdateManyWithWhereWithoutSharingUserInput = {
    where: ActivityShareScalarWhereInput
    data: XOR<ActivityShareUpdateManyMutationInput, ActivityShareUncheckedUpdateManyWithoutSharingUserInput>
  }

  export type ChildUpsertWithWhereUniqueWithoutUserInput = {
    where: ChildWhereUniqueInput
    update: XOR<ChildUpdateWithoutUserInput, ChildUncheckedUpdateWithoutUserInput>
    create: XOR<ChildCreateWithoutUserInput, ChildUncheckedCreateWithoutUserInput>
  }

  export type ChildUpdateWithWhereUniqueWithoutUserInput = {
    where: ChildWhereUniqueInput
    data: XOR<ChildUpdateWithoutUserInput, ChildUncheckedUpdateWithoutUserInput>
  }

  export type ChildUpdateManyWithWhereWithoutUserInput = {
    where: ChildScalarWhereInput
    data: XOR<ChildUpdateManyMutationInput, ChildUncheckedUpdateManyWithoutUserInput>
  }

  export type ChildScalarWhereInput = {
    AND?: ChildScalarWhereInput | ChildScalarWhereInput[]
    OR?: ChildScalarWhereInput[]
    NOT?: ChildScalarWhereInput | ChildScalarWhereInput[]
    id?: StringFilter<"Child"> | string
    userId?: StringFilter<"Child"> | string
    name?: StringFilter<"Child"> | string
    dateOfBirth?: DateTimeFilter<"Child"> | Date | string
    gender?: StringNullableFilter<"Child"> | string | null
    avatarUrl?: StringNullableFilter<"Child"> | string | null
    interests?: StringNullableListFilter<"Child">
    notes?: StringNullableFilter<"Child"> | string | null
    isActive?: BoolFilter<"Child"> | boolean
    createdAt?: DateTimeFilter<"Child"> | Date | string
    updatedAt?: DateTimeFilter<"Child"> | Date | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type InvitationUpsertWithWhereUniqueWithoutRecipientInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutRecipientInput, InvitationUncheckedUpdateWithoutRecipientInput>
    create: XOR<InvitationCreateWithoutRecipientInput, InvitationUncheckedCreateWithoutRecipientInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutRecipientInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutRecipientInput, InvitationUncheckedUpdateWithoutRecipientInput>
  }

  export type InvitationUpdateManyWithWhereWithoutRecipientInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutRecipientInput>
  }

  export type InvitationScalarWhereInput = {
    AND?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    OR?: InvitationScalarWhereInput[]
    NOT?: InvitationScalarWhereInput | InvitationScalarWhereInput[]
    id?: StringFilter<"Invitation"> | string
    senderId?: StringFilter<"Invitation"> | string
    recipientEmail?: StringFilter<"Invitation"> | string
    recipientUserId?: StringNullableFilter<"Invitation"> | string | null
    status?: StringFilter<"Invitation"> | string
    message?: StringNullableFilter<"Invitation"> | string | null
    token?: StringFilter<"Invitation"> | string
    expiresAt?: DateTimeFilter<"Invitation"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"Invitation"> | Date | string | null
    createdAt?: DateTimeFilter<"Invitation"> | Date | string
  }

  export type InvitationUpsertWithWhereUniqueWithoutSenderInput = {
    where: InvitationWhereUniqueInput
    update: XOR<InvitationUpdateWithoutSenderInput, InvitationUncheckedUpdateWithoutSenderInput>
    create: XOR<InvitationCreateWithoutSenderInput, InvitationUncheckedCreateWithoutSenderInput>
  }

  export type InvitationUpdateWithWhereUniqueWithoutSenderInput = {
    where: InvitationWhereUniqueInput
    data: XOR<InvitationUpdateWithoutSenderInput, InvitationUncheckedUpdateWithoutSenderInput>
  }

  export type InvitationUpdateManyWithWhereWithoutSenderInput = {
    where: InvitationScalarWhereInput
    data: XOR<InvitationUpdateManyMutationInput, InvitationUncheckedUpdateManyWithoutSenderInput>
  }

  export type ActivityCategoryCreateWithoutCategoryInput = {
    id?: string
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutCategoriesInput
  }

  export type ActivityCategoryUncheckedCreateWithoutCategoryInput = {
    id?: string
    activityId: string
    createdAt?: Date | string
  }

  export type ActivityCategoryCreateOrConnectWithoutCategoryInput = {
    where: ActivityCategoryWhereUniqueInput
    create: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ActivityCategoryCreateManyCategoryInputEnvelope = {
    data: ActivityCategoryCreateManyCategoryInput | ActivityCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ActivityCategoryWhereUniqueInput
    update: XOR<ActivityCategoryUpdateWithoutCategoryInput, ActivityCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<ActivityCategoryCreateWithoutCategoryInput, ActivityCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type ActivityCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ActivityCategoryWhereUniqueInput
    data: XOR<ActivityCategoryUpdateWithoutCategoryInput, ActivityCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type ActivityCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: ActivityCategoryScalarWhereInput
    data: XOR<ActivityCategoryUpdateManyMutationInput, ActivityCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ActivityCreateWithoutCategoriesInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtype?: ActivitySubtypeCreateNestedOneWithoutActivitiesInput
    activityType?: ActivityTypeCreateNestedOneWithoutActivitiesInput
    location?: LocationCreateNestedOneWithoutActivitiesInput
    provider: ProviderCreateNestedOneWithoutActivitiesInput
    prerequisitesList?: ActivityPrerequisiteCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityCreateNestedManyWithoutActivityInput
    favorites?: FavoriteCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutCategoriesInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedCreateNestedManyWithoutActivityInput
    sessions?: ActivitySessionUncheckedCreateNestedManyWithoutActivityInput
    childActivities?: ChildActivityUncheckedCreateNestedManyWithoutActivityInput
    favorites?: FavoriteUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutCategoriesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCategoriesInput, ActivityUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutActivitiesInput = {
    id?: string
    name: string
    description?: string | null
    ageMin?: number | null
    ageMax?: number | null
    requiresParent?: boolean
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name: string
    description?: string | null
    ageMin?: number | null
    ageMax?: number | null
    requiresParent?: boolean
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutActivitiesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutActivitiesInput, CategoryUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityUpsertWithoutCategoriesInput = {
    update: XOR<ActivityUpdateWithoutCategoriesInput, ActivityUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ActivityCreateWithoutCategoriesInput, ActivityUncheckedCreateWithoutCategoriesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutCategoriesInput, ActivityUncheckedUpdateWithoutCategoriesInput>
  }

  export type ActivityUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type CategoryUpsertWithoutActivitiesInput = {
    update: XOR<CategoryUpdateWithoutActivitiesInput, CategoryUncheckedUpdateWithoutActivitiesInput>
    create: XOR<CategoryCreateWithoutActivitiesInput, CategoryUncheckedCreateWithoutActivitiesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutActivitiesInput, CategoryUncheckedUpdateWithoutActivitiesInput>
  }

  export type CategoryUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    requiresParent?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteCreateManyActivityInput = {
    id?: string
    name: string
    description?: string | null
    url?: string | null
    courseId?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivitySessionCreateManyActivityInput = {
    id?: string
    sessionNumber?: number | null
    date?: string | null
    dayOfWeek?: string | null
    startTime?: string | null
    endTime?: string | null
    location?: string | null
    subLocation?: string | null
    instructor?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildActivityCreateManyActivityInput = {
    id?: string
    childId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteCreateManyActivityInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type ActivityCategoryCreateManyActivityInput = {
    id?: string
    categoryId: string
    createdAt?: Date | string
  }

  export type ActivityPrerequisiteUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityPrerequisiteUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivitySessionUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionNumber?: NullableIntFieldUpdateOperationsInput | number | null
    date?: NullableStringFieldUpdateOperationsInput | string | null
    dayOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    subLocation?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutChildActivitiesNestedInput
  }

  export type ChildActivityUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoriteUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityCategoryUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type ActivityCategoryUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileCreateManyActivityShareInput = {
    id?: string
    childId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ActivityShareProfileUpdateWithoutActivityShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    child?: ChildUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ActivityShareProfileUncheckedUpdateWithoutActivityShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileUncheckedUpdateManyWithoutActivityShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    childId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateManyActivitySubtypeInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activityTypeId?: string | null
  }

  export type ActivityUpdateWithoutActivitySubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutActivitySubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutActivitySubtypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityCreateManyActivityTypeInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
  }

  export type ActivitySubtypeCreateManyActivityTypeInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayOrder?: number
  }

  export type ActivityUpdateWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivitySubtypeUpdateWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    activities?: ActivityUpdateManyWithoutActivitySubtypeNestedInput
  }

  export type ActivitySubtypeUncheckedUpdateWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
    activities?: ActivityUncheckedUpdateManyWithoutActivitySubtypeNestedInput
  }

  export type ActivitySubtypeUncheckedUpdateManyWithoutActivityTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityShareProfileCreateManyChildInput = {
    id?: string
    activityShareId: string
    canViewInterested?: boolean
    canViewRegistered?: boolean
    canViewCompleted?: boolean
    canViewNotes?: boolean
    createdAt?: Date | string
  }

  export type ChildActivityCreateManyChildInput = {
    id?: string
    activityId: string
    status: string
    registeredAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityShareProfileUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityShare?: ActivityShareUpdateOneRequiredWithoutProfilesNestedInput
  }

  export type ActivityShareProfileUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityShareId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareProfileUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityShareId?: StringFieldUpdateOperationsInput | string
    canViewInterested?: BoolFieldUpdateOperationsInput | boolean
    canViewRegistered?: BoolFieldUpdateOperationsInput | boolean
    canViewCompleted?: BoolFieldUpdateOperationsInput | boolean
    canViewNotes?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutChildActivitiesNestedInput
  }

  export type ChildActivityUncheckedUpdateWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildActivityUncheckedUpdateManyWithoutChildInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    registeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationCreateManyCityInput = {
    id?: string
    name: string
    address?: string | null
    postalCode?: string | null
    latitude?: number | null
    longitude?: number | null
    facility?: string | null
    fullAddress?: string | null
    mapUrl?: string | null
    placeId?: string | null
    phoneNumber?: string | null
    website?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: ActivityUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateManyWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    facility?: NullableStringFieldUpdateOperationsInput | string | null
    fullAddress?: NullableStringFieldUpdateOperationsInput | string | null
    mapUrl?: NullableStringFieldUpdateOperationsInput | string | null
    placeId?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateManyLocationInput = {
    id?: string
    providerId: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
  }

  export type ActivityUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    provider?: ProviderUpdateOneRequiredWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityCreateManyProviderInput = {
    id?: string
    externalId: string
    name: string
    category: string
    subcategory?: string | null
    description?: string | null
    schedule?: string | null
    dateStart?: Date | string | null
    dateEnd?: Date | string | null
    registrationDate?: Date | string | null
    ageMin?: number | null
    ageMax?: number | null
    cost?: number
    spotsAvailable?: number | null
    totalSpots?: number | null
    locationId?: string | null
    registrationUrl?: string | null
    courseId?: string | null
    isActive?: boolean
    isUpdated?: boolean
    lastSeenAt?: Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    dayOfWeek?: ActivityCreatedayOfWeekInput | string[]
    registrationEndDate?: Date | string | null
    registrationEndTime?: string | null
    costIncludesTax?: boolean
    taxAmount?: number | null
    startTime?: string | null
    endTime?: string | null
    courseDetails?: string | null
    dates?: string | null
    registrationStatus?: string | null
    registrationButtonText?: string | null
    detailUrl?: string | null
    instructor?: string | null
    hasMultipleSessions?: boolean
    sessionCount?: number
    hasPrerequisites?: boolean
    fullDescription?: string | null
    whatToBring?: string | null
    prerequisites?: string | null
    directRegistrationUrl?: string | null
    contactInfo?: string | null
    activitySubtypeId?: string | null
    activityTypeId?: string | null
  }

  export type ProviderMetricsCreateManyProviderInput = {
    id?: string
    scrapeDate: Date | string
    activitiesFound?: number
    activitiesProcessed?: number
    dataQualityScore?: number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: number | null
    memoryUsed?: bigint | number | null
    createdAt?: Date | string
  }

  export type ScrapeJobCreateManyProviderInput = {
    id?: string
    status?: $Enums.JobStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    activitiesFound?: number
    activitiesCreated?: number
    activitiesUpdated?: number
    activitiesRemoved?: number
    errorMessage?: string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ScraperHealthCheckCreateManyProviderInput = {
    id?: string
    status: string
    message?: string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ActivityUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtype?: ActivitySubtypeUpdateOneWithoutActivitiesNestedInput
    activityType?: ActivityTypeUpdateOneWithoutActivitiesNestedInput
    location?: LocationUpdateOneWithoutActivitiesNestedInput
    prerequisitesList?: ActivityPrerequisiteUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisitesList?: ActivityPrerequisiteUncheckedUpdateManyWithoutActivityNestedInput
    sessions?: ActivitySessionUncheckedUpdateManyWithoutActivityNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutActivityNestedInput
    favorites?: FavoriteUncheckedUpdateManyWithoutActivityNestedInput
    categories?: ActivityCategoryUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    schedule?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ageMin?: NullableIntFieldUpdateOperationsInput | number | null
    ageMax?: NullableIntFieldUpdateOperationsInput | number | null
    cost?: FloatFieldUpdateOperationsInput | number
    spotsAvailable?: NullableIntFieldUpdateOperationsInput | number | null
    totalSpots?: NullableIntFieldUpdateOperationsInput | number | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    registrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isUpdated?: BoolFieldUpdateOperationsInput | boolean
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rawData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: ActivityUpdatedayOfWeekInput | string[]
    registrationEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrationEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    costIncludesTax?: BoolFieldUpdateOperationsInput | boolean
    taxAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    startTime?: NullableStringFieldUpdateOperationsInput | string | null
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    courseDetails?: NullableStringFieldUpdateOperationsInput | string | null
    dates?: NullableStringFieldUpdateOperationsInput | string | null
    registrationStatus?: NullableStringFieldUpdateOperationsInput | string | null
    registrationButtonText?: NullableStringFieldUpdateOperationsInput | string | null
    detailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instructor?: NullableStringFieldUpdateOperationsInput | string | null
    hasMultipleSessions?: BoolFieldUpdateOperationsInput | boolean
    sessionCount?: IntFieldUpdateOperationsInput | number
    hasPrerequisites?: BoolFieldUpdateOperationsInput | boolean
    fullDescription?: NullableStringFieldUpdateOperationsInput | string | null
    whatToBring?: NullableStringFieldUpdateOperationsInput | string | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    directRegistrationUrl?: NullableStringFieldUpdateOperationsInput | string | null
    contactInfo?: NullableStringFieldUpdateOperationsInput | string | null
    activitySubtypeId?: NullableStringFieldUpdateOperationsInput | string | null
    activityTypeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProviderMetricsUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderMetricsUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProviderMetricsUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    scrapeDate?: DateTimeFieldUpdateOperationsInput | Date | string
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesProcessed?: IntFieldUpdateOperationsInput | number
    dataQualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    errors?: NullableJsonNullValueInput | InputJsonValue
    scrapeDuration?: NullableIntFieldUpdateOperationsInput | number | null
    memoryUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScrapeJobUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activitiesFound?: IntFieldUpdateOperationsInput | number
    activitiesCreated?: IntFieldUpdateOperationsInput | number
    activitiesUpdated?: IntFieldUpdateOperationsInput | number
    activitiesRemoved?: IntFieldUpdateOperationsInput | number
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScraperHealthCheckUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScraperHealthCheckUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScraperHealthCheckUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableJsonNullValueInput | InputJsonValue
    checkedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityShareCreateManySharedWithUserInput = {
    id?: string
    sharingUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ActivityShareCreateManySharingUserInput = {
    id?: string
    sharedWithUserId: string
    permissionLevel: string
    expiresAt?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChildCreateManyUserInput = {
    id?: string
    name: string
    dateOfBirth: Date | string
    gender?: string | null
    avatarUrl?: string | null
    interests?: ChildCreateinterestsInput | string[]
    notes?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteCreateManyUserInput = {
    id?: string
    activityId: string
    createdAt?: Date | string
    notifyOnChange?: boolean
  }

  export type InvitationCreateManyRecipientInput = {
    id?: string
    senderId: string
    recipientEmail: string
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type InvitationCreateManySenderInput = {
    id?: string
    recipientEmail: string
    recipientUserId?: string | null
    status: string
    message?: string | null
    token: string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ActivityShareUpdateWithoutSharedWithUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharingUser?: UserUpdateOneRequiredWithoutMySharesNestedInput
    profiles?: ActivityShareProfileUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareUncheckedUpdateWithoutSharedWithUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharingUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareUncheckedUpdateManyWithoutSharedWithUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharingUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityShareUpdateWithoutSharingUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sharedWithUser?: UserUpdateOneRequiredWithoutSharedWithMeNestedInput
    profiles?: ActivityShareProfileUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareUncheckedUpdateWithoutSharingUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharedWithUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutActivityShareNestedInput
  }

  export type ActivityShareUncheckedUpdateManyWithoutSharingUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sharedWithUserId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChildUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUpdateManyWithoutChildNestedInput
    childActivities?: ChildActivityUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ActivityShareProfileUncheckedUpdateManyWithoutChildNestedInput
    childActivities?: ChildActivityUncheckedUpdateManyWithoutChildNestedInput
  }

  export type ChildUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    interests?: ChildUpdateinterestsInput | string[]
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifyOnChange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvitationUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneWithoutReceivedInvitationsNestedInput
  }

  export type InvitationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvitationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipientEmail?: StringFieldUpdateOperationsInput | string
    recipientUserId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryCreateManyCategoryInput = {
    id?: string
    activityId: string
    createdAt?: Date | string
  }

  export type ActivityCategoryUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type ActivityCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}