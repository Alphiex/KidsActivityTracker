generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id                     String                 @id @default(uuid())
  providerId             String
  externalId             String
  name                   String
  category               String
  subcategory            String?
  description            String?
  schedule               String?
  dateStart              DateTime?
  dateEnd                DateTime?
  registrationDate       DateTime?
  ageMin                 Int?
  ageMax                 Int?
  cost                   Float                  @default(0)
  spotsAvailable         Int?
  totalSpots             Int?
  locationId             String?
  registrationUrl        String?
  courseId               String?
  isActive               Boolean                @default(true) // Deprecated: Use isUpdated instead
  isUpdated              Boolean                @default(false)
  lastSeenAt             DateTime               @default(now())
  rawData                Json?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  dayOfWeek              String[]
  registrationEndDate    DateTime?
  registrationEndTime    String?
  costIncludesTax        Boolean                @default(true)
  taxAmount              Float?
  startTime              String?
  endTime                String?
  courseDetails          String?
  dates                  String?
  registrationStatus     String?                @default("Unknown")
  registrationButtonText String?
  detailUrl              String?
  instructor             String?
  hasMultipleSessions    Boolean                @default(false)
  sessionCount           Int                    @default(0)
  hasPrerequisites       Boolean                @default(false)
  fullDescription        String?
  whatToBring            String?
  prerequisites          String?
  directRegistrationUrl  String?
  contactInfo            String?
  activitySubtypeId      String?
  activityTypeId         String?
  activitySubtype        ActivitySubtype?       @relation(fields: [activitySubtypeId], references: [id])
  activityType           ActivityType?          @relation(fields: [activityTypeId], references: [id])
  location               Location?              @relation(fields: [locationId], references: [id])
  provider               Provider               @relation(fields: [providerId], references: [id])
  prerequisitesList      ActivityPrerequisite[]
  sessions               ActivitySession[]
  childActivities        ChildActivity[]
  favorites              Favorite[]
  categories             ActivityCategory[]

  @@unique([providerId, externalId])
  @@index([activitySubtypeId])
  @@index([activityTypeId, activitySubtypeId])
  @@index([activityTypeId])
  @@index([category])
  @@index([isActive, category])
  @@index([isActive, dateStart])
  @@index([isActive, lastSeenAt])
  @@index([locationId])
  @@index([providerId])
  @@index([registrationStatus])
}

model ActivityHistory {
  id            String   @id @default(uuid())
  activityId    String
  changeType    String
  previousData  Json?
  newData       Json?
  changedFields String[]
  createdAt     DateTime @default(now())

  @@index([activityId, createdAt])
}

model ActivityPrerequisite {
  id          String   @id @default(uuid())
  activityId  String
  name        String
  description String?
  url         String?
  courseId    String?
  isRequired  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  activity    Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
}

model ActivitySession {
  id            String   @id @default(uuid())
  activityId    String
  sessionNumber Int?
  date          String?
  dayOfWeek     String?
  startTime     String?
  endTime       String?
  location      String?
  subLocation   String?
  instructor    String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  activity      Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([date])
}

model ActivityShare {
  id               String                 @id @default(uuid())
  sharingUserId    String
  sharedWithUserId String
  permissionLevel  String
  expiresAt        DateTime?
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  sharedWithUser   User                   @relation("SharedWithUser", fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  sharingUser      User                   @relation("SharingUser", fields: [sharingUserId], references: [id], onDelete: Cascade)
  profiles         ActivityShareProfile[]

  @@unique([sharingUserId, sharedWithUserId])
  @@index([sharedWithUserId])
  @@index([sharingUserId])
}

model ActivityShareProfile {
  id                String        @id @default(uuid())
  activityShareId   String
  childId           String
  canViewInterested Boolean       @default(true)
  canViewRegistered Boolean       @default(true)
  canViewCompleted  Boolean       @default(false)
  canViewNotes      Boolean       @default(false)
  createdAt         DateTime      @default(now())
  activityShare     ActivityShare @relation(fields: [activityShareId], references: [id], onDelete: Cascade)
  child             Child         @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([activityShareId, childId])
}

model ActivitySubtype {
  id             String       @id @default(uuid())
  activityTypeId String
  code           String
  name           String
  description    String?
  imageUrl       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  displayOrder   Int          @default(999)
  activities     Activity[]
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id], onDelete: Cascade)

  @@unique([activityTypeId, code])
  @@index([activityTypeId])
}

model ActivityType {
  id           String            @id @default(uuid())
  code         String            @unique
  name         String
  description  String?
  iconName     String?
  imageUrl     String?
  displayOrder Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  activities   Activity[]
  subtypes     ActivitySubtype[]

  @@index([code])
}

model Child {
  id              String                 @id @default(uuid())
  userId          String
  name            String
  dateOfBirth     DateTime?
  location        String?
  gender          String?
  avatarUrl       String?
  interests       String[]
  notes           String?
  isActive        Boolean                @default(true)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  profiles        ActivityShareProfile[]
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  childActivities ChildActivity[]

  @@index([userId])
}

model ChildActivity {
  id               String    @id @default(uuid())
  childId          String
  activityId       String
  status           String
  registeredAt     DateTime?
  completedAt      DateTime?
  scheduledDate    DateTime?
  startTime        String?
  endTime          String?
  recurring        Boolean   @default(false)
  recurrencePattern String?  // e.g., "weekly", "biweekly", "monthly"
  recurrenceEnd    DateTime?
  notes            String?
  rating           Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  activity         Activity  @relation(fields: [activityId], references: [id])
  child            Child     @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([childId, activityId])
  @@index([activityId])
  @@index([childId, status])
  @@index([scheduledDate])
  @@index([childId, scheduledDate])
}

model Favorite {
  id             String   @id @default(uuid())
  userId         String
  activityId     String
  createdAt      DateTime @default(now())
  notifyOnChange Boolean  @default(true)
  activity       Activity @relation(fields: [activityId], references: [id])
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
  @@index([activityId])
  @@index([userId])
}

model Invitation {
  id              String    @id @default(uuid())
  senderId        String
  recipientEmail  String
  recipientUserId String?
  status          String
  message         String?
  token           String    @unique
  expiresAt       DateTime
  acceptedAt      DateTime?
  createdAt       DateTime  @default(now())
  recipient       User?     @relation("InvitationRecipient", fields: [recipientUserId], references: [id], onDelete: Cascade)
  sender          User      @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([recipientEmail])
  @@index([senderId])
  @@index([status, expiresAt])
  @@index([token])
}

model City {
  id        String     @id @default(uuid())
  name      String
  province  String
  country   String     @default("Canada")
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name, province, country])
  @@index([name])
}

model Location {
  id          String     @id @default(uuid())
  name        String
  address     String?
  cityId      String
  postalCode  String?
  latitude    Float?
  longitude   Float?
  facility    String?
  // Apple Maps integration fields
  fullAddress String?    // Complete formatted address for Apple Maps
  mapUrl      String?    // Apple Maps URL for direct navigation
  placeId     String?    // Apple Place ID if available
  phoneNumber String?    // Contact phone number
  website     String?    // Location website
  // Relationships
  city        City       @relation(fields: [cityId], references: [id])
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, address, cityId])
  @@index([cityId])
  @@index([name])
  @@index([name, cityId])
}

model Provider {
  id                 String               @id @default(uuid())
  name               String               @unique
  website            String
  scraperConfig      Json
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  region             String?
  contactInfo        Json?
  platform           String?
  activities         Activity[]
  ProviderMetrics    ProviderMetrics[]
  ScrapeJob          ScrapeJob[]
  ScraperHealthCheck ScraperHealthCheck[]

  @@index([isActive])
  @@index([platform])
  @@index([region])
}

model ProviderMetrics {
  id                  String   @id @default(uuid())
  providerId          String
  scrapeDate          DateTime @db.Date
  activitiesFound     Int      @default(0)
  activitiesProcessed Int      @default(0)
  dataQualityScore    Float?
  errors              Json?
  scrapeDuration      Int?
  memoryUsed          BigInt?
  createdAt           DateTime @default(now())
  provider            Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([providerId, scrapeDate])
  @@index([scrapeDate])
}

model ScrapeJob {
  id                String    @id @default(uuid())
  providerId        String
  status            JobStatus @default(PENDING)
  startedAt         DateTime?
  completedAt       DateTime?
  activitiesFound   Int       @default(0)
  activitiesCreated Int       @default(0)
  activitiesUpdated Int       @default(0)
  activitiesRemoved Int       @default(0)
  errorMessage      String?
  errorDetails      Json?
  createdAt         DateTime  @default(now())
  provider          Provider  @relation(fields: [providerId], references: [id])

  @@index([createdAt])
  @@index([providerId])
  @@index([status])
}

model ScraperHealthCheck {
  id         String    @id @default(uuid())
  providerId String
  status     String
  message    String?
  details    Json?
  checkedAt  DateTime  @default(now())
  resolvedAt DateTime?
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([checkedAt])
  @@index([providerId])
  @@index([status])
}

model ScraperRun {
  id                    String    @id @default(uuid())
  providerId            String
  status                String
  startedAt             DateTime  @default(now())
  completedAt           DateTime?
  activitiesFound       Int       @default(0)
  activitiesCreated     Int       @default(0)
  activitiesUpdated     Int       @default(0)
  activitiesDeactivated Int       @default(0)
  activitiesPurged      Int       @default(0)
  errorMessage          String?
  logs                  Json?

  @@index([providerId, startedAt])
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  name                String
  preferences         Json            @default("{}")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  passwordHash        String
  phoneNumber         String?
  isVerified          Boolean         @default(false)
  verificationToken   String?
  resetToken          String?
  resetTokenExpiry    DateTime?
  sharedWithMe        ActivityShare[] @relation("SharedWithUser")
  myShares            ActivityShare[] @relation("SharingUser")
  children            Child[]
  favorites           Favorite[]
  receivedInvitations Invitation[]    @relation("InvitationRecipient")
  sentInvitations     Invitation[]    @relation("InvitationSender")

  @@index([email])
}

model Category {
  id           String             @id @default(uuid())
  name         String             @unique
  description  String?
  ageMin       Int?
  ageMax       Int?
  requiresParent Boolean         @default(false)
  displayOrder Int               @default(999)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  activities   ActivityCategory[]

  @@index([name])
  @@index([displayOrder])
}

model ActivityCategory {
  id         String   @id @default(uuid())
  activityId String
  categoryId String
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([activityId, categoryId])
  @@index([activityId])
  @@index([categoryId])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
